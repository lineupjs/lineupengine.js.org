{"version":3,"file":"lineupengine.js","mappings":"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","sources":["webpack://lineupengine/webpack/universalModuleDefinition","webpack://lineupengine/webpack/bootstrap","webpack://lineupengine/webpack/runtime/define property getters","webpack://lineupengine/webpack/runtime/hasOwnProperty shorthand","webpack://lineupengine/webpack/runtime/make namespace object","webpack://lineupengine/./src/abortAble.ts","webpack://lineupengine/./src/animation/KeyFinder.ts","webpack://lineupengine/./src/animation/index.ts","webpack://lineupengine/./src/internal/scroll.ts","webpack://lineupengine/./src/internal/index.ts","webpack://lineupengine/./src/logic.ts","webpack://lineupengine/./src/mixin/IMixin.ts","webpack://lineupengine/./src/styles/index.ts","webpack://lineupengine/./src/ARowRenderer.ts","webpack://lineupengine/./src/style/StyleManager.ts","webpack://lineupengine/./src/style/GridStyleManager.ts","webpack://lineupengine/./src/table/internal/ACellAdapter.ts","webpack://lineupengine/./src/ACellRenderer.ts","webpack://lineupengine/./src/mixin/PrefetchMixin.ts","webpack://lineupengine/./src/table/ACellTableSection.ts","webpack://lineupengine/./src/table/MultiTableRowRenderer.ts","webpack://lineupengine/./src/bundle.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lineupengine\"] = factory();\n\telse\n\t\troot[\"lineupengine\"] = factory();\n})(globalThis, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export function isPromiseLike(p: PromiseLike<unknown> | unknown): p is PromiseLike<unknown> {\n  return p != null && typeof (p as PromiseLike<unknown>).then === 'function';\n}\n\n/**\n * a promise like object that has an abort method\n */\nexport interface IAbortAblePromiseBase<T> extends PromiseLike<T> {\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): IAbortAblePromiseBase<TResult1 | TResult2>;\n  /**\n   * abort the promise when possible\n   */\n  abort(): void;\n  /**\n   * whether this promise was aborted\n   */\n  isAborted(): boolean;\n}\n\n/**\n * a promise like object that has an abort method and return the ABORTED symbol in case it was\n */\nexport declare type IAbortAblePromise<T> = IAbortAblePromiseBase<T | symbol>;\nexport declare type IAAP<T> = IAbortAblePromise<T>;\n\n/**\n * an update result with an item and a promise when the update has been done\n */\nexport interface IAsyncUpdate<T> {\n  item: T;\n  ready: IAbortAblePromise<void>;\n}\n\n/**\n * the symbol returned when the promise was aborted\n */\nexport const ABORTED = Symbol('aborted');\n\nfunction thenFactory<T>(loader: PromiseLike<T | symbol>, isAborted: () => boolean, abort: () => void) {\n  function then<TResult1 = T | symbol, TResult2 = never>(\n    onfulfilled?: ((value: T | symbol) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    _onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): IAbortAblePromiseBase<TResult1 | TResult2> {\n    const fullfiller = loader.then((loaded) => {\n      const loadedOrAborted = isAborted() ? ABORTED : loaded;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const res = onfulfilled ? onfulfilled(loadedOrAborted) : (loadedOrAborted as unknown as any);\n\n      if (isPromiseLike(res)) {\n        return res.then((r) => {\n          return isAborted() ? ABORTED : r;\n        });\n      }\n      return isAborted() ? ABORTED : res;\n    });\n    return {\n      then: thenFactory(fullfiller, isAborted, abort),\n      abort,\n      isAborted,\n    };\n  }\n  return then;\n}\n\n/**\n * abort able Promise wrapper, returns a promise which can be aborted, and trying to avoid executing therefore the wrapped promise\n * @param {Promise<T>} loader\n * @returns {any}\n */\nexport default function abortAble<T>(loader: PromiseLike<T>): IAAP<T> {\n  let aborted: ((v: symbol) => void) | null = null;\n  const isAborted = () => aborted === null;\n  const aborter = new Promise<symbol>((resolve) => {\n    aborted = resolve;\n  });\n  const abort = () => {\n    if (aborted == null) {\n      return;\n    }\n    aborted(ABORTED);\n    aborted = null;\n  };\n\n  const race = Promise.race<T | symbol>([aborter, loader]);\n\n  return {\n    then: thenFactory(race, isAborted, abort),\n    abort,\n    isAborted,\n  };\n}\n\nexport function abortAbleFetch(input: RequestInfo, init?: RequestInit): IAAP<Response> {\n  const controller = new AbortController();\n\n  const race = new Promise<Response | symbol>((resolve, reject) => {\n    const r = fetch(input, { signal: controller.signal, ...(init || {}) });\n    r.then(resolve);\n    r.catch((error) => {\n      if (error instanceof DOMException) {\n        resolve(ABORTED);\n      } else {\n        reject(error);\n      }\n    });\n  });\n\n  const abort = controller.abort.bind(controller);\n  const isAborted = () => controller.signal.aborted;\n\n  return {\n    then: thenFactory(race, isAborted, abort),\n    abort,\n    isAborted,\n  };\n}\n\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n  values: [\n    T1 | IAAP<T1>,\n    T2 | IAAP<T2>,\n    T3 | IAAP<T3>,\n    T4 | IAAP<T4>,\n    T5 | IAAP<T5>,\n    T6 | IAAP<T6>,\n    T7 | IAAP<T7>,\n    T8 | IAAP<T8>,\n    T9 | IAAP<T9>,\n    T10 | IAAP<T10>,\n  ]\n): IAAP<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n  values: [\n    T1 | IAAP<T1>,\n    T2 | IAAP<T2>,\n    T3 | IAAP<T3>,\n    T4 | IAAP<T4>,\n    T5 | IAAP<T5>,\n    T6 | IAAP<T6>,\n    T7 | IAAP<T7>,\n    T8 | IAAP<T8>,\n    T9 | IAAP<T9>,\n  ]\n): IAAP<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6, T7, T8>(\n  values: [\n    T1 | IAAP<T1>,\n    T2 | IAAP<T2>,\n    T3 | IAAP<T3>,\n    T4 | IAAP<T4>,\n    T5 | IAAP<T5>,\n    T6 | IAAP<T6>,\n    T7 | IAAP<T7>,\n    T8 | IAAP<T8>,\n  ]\n): IAAP<[T1, T2, T3, T4, T5, T6, T7, T8]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6, T7>(\n  values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>, T4 | IAAP<T4>, T5 | IAAP<T5>, T6 | IAAP<T6>, T7 | IAAP<T7>]\n): IAAP<[T1, T2, T3, T4, T5, T6, T7]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6>(\n  values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>, T4 | IAAP<T4>, T5 | IAAP<T5>, T6 | IAAP<T6>]\n): IAAP<[T1, T2, T3, T4, T5, T6]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5>(\n  values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>, T4 | IAAP<T4>, T5 | IAAP<T5>]\n): IAAP<[T1, T2, T3, T4, T5]>;\nexport function abortAbleAll<T1, T2, T3, T4>(\n  values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>, T4 | IAAP<T4>]\n): IAAP<[T1, T2, T3, T4]>;\nexport function abortAbleAll<T1, T2, T3>(values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>]): IAAP<[T1, T2, T3]>;\nexport function abortAbleAll<T1, T2>(values: [T1 | IAAP<T1>, T2 | IAAP<T2>]): IAAP<[T1, T2]>;\nexport function abortAbleAll<T>(values: (T | IAAP<T>)[]): IAAP<T[]>;\n\n/**\n * similar to Promise.all but for abortAble\n */\nexport function abortAbleAll(values: unknown[]): IAAP<unknown[]> {\n  const loader = Promise.all(values);\n  let aborted: ((v: symbol) => void) | null = null;\n  const isAborted = () => aborted === null;\n  const aborter = new Promise<symbol>((resolve) => {\n    aborted = resolve;\n  });\n  const abort = () => {\n    if (aborted == null) {\n      return;\n    }\n    aborted(ABORTED);\n    for (const v of values) {\n      if (isAbortAble(v)) {\n        v.abort();\n      }\n    }\n    aborted = null;\n  };\n  const race = Promise.race<unknown | symbol>([aborter, loader]);\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    then: thenFactory(race, isAborted, abort) as any,\n    abort,\n    isAborted,\n  };\n}\n\n/**\n * checked whether the given argument is an abortable Promise\n * @param {IAbortAblePromise<any> | any} candidate\n * @returns {boolean}\n */\nexport function isAbortAble<T = unknown>(candidate: IAbortAblePromise<T> | T): candidate is IAbortAblePromise<T> {\n  return (\n    candidate != null &&\n    candidate &&\n    typeof (candidate as IAbortAblePromise<unknown>).then === 'function' &&\n    typeof (candidate as IAbortAblePromise<unknown>).abort === 'function'\n  );\n}\n\nexport function isAsyncUpdate<T>(update: T | void | undefined | null | IAsyncUpdate<T>): update is IAsyncUpdate<T> {\n  return update !== undefined && update !== null && update && isAbortAble((update as IAsyncUpdate<T>).ready);\n}\n\n/**\n * similar to Promise.resolve\n */\nexport function abortAbleResolveNow<T>(value: T): IAAP<T> {\n  function then<TResult1 = T | symbol, TResult2 = never>(\n    onfulfilled?: ((value: T | symbol) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    _onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): IAbortAblePromiseBase<TResult1 | TResult2> {\n    const res = onfulfilled ? onfulfilled(value) : (value as unknown);\n    if (isAbortAble(res)) {\n      return res as unknown as IAbortAblePromiseBase<TResult1 | TResult2>;\n    }\n    if (isPromiseLike(res)) {\n      return abortAble(res) as unknown as IAbortAblePromiseBase<TResult1 | TResult2>;\n    }\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      then: abortAbleResolveNow(res as TResult1) as any,\n      abort: () => undefined,\n      isAborted: () => false,\n    };\n  }\n  return {\n    then,\n    abort: () => undefined,\n    isAborted: () => false,\n  };\n}\n","import { IExceptionContext } from '../logic';\n\n/**\n * utility class for optimized row context access\n */\nexport default class KeyFinder {\n  private readonly cache: number[] = [];\n\n  private lastFilled = 0;\n\n  private readonly key2index = new Map<string, number>();\n\n  /**\n   * constructor for fast key based row access\n   * @param {IExceptionContext} context context to use\n   * @param {(rowIndex: number) => string} key key function\n   */\n  constructor(\n    public readonly context: IExceptionContext,\n    public readonly key: (rowIndex: number) => string\n  ) {\n    this.context.exceptions.forEach((e) => {\n      this.cache[e.index] = e.y;\n      this.key2index.set(key(e.index), e.index);\n    });\n  }\n\n  private findValidStart(before: number) {\n    for (let i = before - 1; i >= 0; i -= 1) {\n      if (this.cache[i] !== undefined) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * returns the position of the given given or -1 if not found\n   * @param {string} key\n   */\n  posByKey(key: string): { index: number; pos: number } {\n    const index = this.key2index.get(key);\n    if (index != null) {\n      return { index, pos: this.pos(index) };\n    }\n    return this.fillCacheTillKey(key);\n  }\n\n  /**\n   * returns the position of the given index\n   * @param {number} index index to look for\n   */\n  pos(index: number): number {\n    if (this.context.exceptions.length === 0) {\n      // fast pass\n      return index * this.context.defaultRowHeight;\n    }\n    const cached = this.cache[index];\n    if (cached !== undefined) {\n      return cached;\n    }\n    // need to compute it\n    // find the starting point where to start counting\n    const start = this.findValidStart(index);\n    if (start < 0) {\n      this.fillCache(0, index, 0);\n    } else {\n      this.fillCache(start + 1, index, this.cache[start] + this.heightOf(start));\n    }\n    return this.cache[index];\n  }\n\n  private fillCache(\n    first: number,\n    last: number,\n    offset: number,\n    callback?: (index: number, key: string, pos: number) => void\n  ) {\n    if (last <= this.lastFilled) {\n      // everything already there\n      if (!callback) {\n        return;\n      }\n      for (let i = first; i <= last; i += 1) {\n        callback(i, this.key(i), this.cache[i]);\n      }\n      return;\n    }\n    let pos = offset;\n    for (let i = first; i <= last; i += 1) {\n      this.cache[i] = pos;\n      const key = this.key(i);\n      this.key2index.set(key, i);\n      if (callback) {\n        callback(i, key, pos);\n      }\n      pos += this.heightOf(i);\n    }\n  }\n\n  /**\n   * returns the height of the row identified by index\n   * @param {number} index\n   */\n  heightOf(index: number): number {\n    const lookup = this.context.exceptionsLookup;\n    return lookup.get(index) ?? this.context.defaultRowHeight;\n  }\n\n  /**\n   * see heightOf but ignores padding and optional null in case of default height\n   * @param {number} index row index\n   * @param {boolean} returnDefault return null if default height\n   * @returns {number}\n   */\n  exceptionHeightOf(index: number, returnDefault?: boolean): number | null;\n  exceptionHeightOf(index: number, returnDefault: true): number;\n  exceptionHeightOf(index: number, returnDefault = false): number | null {\n    const padding = this.context.padding(index);\n    const lookup = this.context.exceptionsLookup;\n    const entry = lookup.get(index);\n    if (entry != null) {\n      return entry - padding;\n    }\n    return returnDefault ? this.context.defaultRowHeight - padding : null;\n  }\n\n  /**\n   * padding of the given index\n   * @param {number} index\n   * @returns {number}\n   */\n  padding(index: number): number {\n    return this.context.padding(index);\n  }\n\n  private fillCacheTillKey(target: string) {\n    let pos = 0;\n    for (let i = this.lastFilled; i < this.context.numberOfRows; i += 1, this.lastFilled += 1) {\n      const c = this.cache[i];\n      if (c !== undefined) {\n        pos = c + this.heightOf(i);\n        continue;\n      }\n      // new one fill up\n      const key = this.key(i);\n      this.cache[i] = pos;\n      this.key2index.set(key, i);\n      if (key === target) {\n        return { index: i, pos };\n      }\n      pos += this.heightOf(i);\n    }\n    return { index: -1, pos: -1 };\n  }\n\n  /**\n   * computes the positions and keys for a range of given indices\n   * @param {number} first first row index\n   * @param {number} last last row index\n   * @param {number} offset pos offset for the first row index\n   * @param {(index: number, key: string, pos: number) => void} callback callback for each identified index\n   */\n  positions(\n    first: number,\n    last: number,\n    offset: number,\n    callback?: (index: number, key: string, pos: number) => void\n  ): void {\n    this.fillCache(first, last, offset, callback);\n  }\n}\n","import { IExceptionContext } from '../logic';\nimport KeyFinder from './KeyFinder';\n\nexport { default as KeyFinder } from './KeyFinder';\n\n/**\n * different row animation modes\n */\nexport enum EAnimationMode {\n  /**\n   * plain update existed both before and after\n   */\n  UPDATE,\n  /**\n   * exists both before and after but wasn't visible yet thus was created\n   */\n  UPDATE_CREATE,\n  /**\n   * exists both before and after is visible but not needed anymore and thus removed\n   */\n  UPDATE_REMOVE,\n  /**\n   * row appears\n   */\n  SHOW,\n  /**\n   * row disappears\n   */\n  HIDE,\n}\n\n/**\n * animated row item\n */\nexport interface IAnimationItem {\n  mode: EAnimationMode;\n  node: HTMLElement;\n  key: string;\n\n  /**\n   * previous context information\n   */\n  previous: {\n    index: number | -1;\n    y: number;\n    height: number | null;\n  };\n\n  /**\n   * position of the added node considering the previous height\n   */\n  nodeY: number;\n  /**\n   * position of the added node considering the current height\n   */\n  nodeYCurrentHeight: number;\n\n  /**\n   * current position\n   */\n  current: {\n    index: number | -1;\n    y: number;\n    height: number | null;\n  };\n}\n\nconst NO_CHANGE_DELTA = 1;\n\nexport function noAnimationChange(\n  { previous, mode, nodeY, current }: IAnimationItem,\n  previousHeight: number,\n  currentHeight: number\n): boolean {\n  // sounds like the same\n  const prev = previous.height == null ? previousHeight : previous.height;\n  const curr = current.height == null ? currentHeight : current.height;\n  return (\n    mode === EAnimationMode.UPDATE &&\n    Math.abs(previous.y - nodeY) <= NO_CHANGE_DELTA &&\n    Math.abs(prev - curr) <= NO_CHANGE_DELTA\n  );\n}\n\nexport interface IPhase {\n  readonly delay: number;\n\n  apply(item: Readonly<IAnimationItem>, previousFinder: KeyFinder, currentFinder: KeyFinder): void;\n}\n\nexport interface IAnimationContext {\n  readonly previous: IExceptionContext;\n\n  previousKey(previousRowIndex: number): string;\n\n  currentKey(currentRowIndex: number): string;\n\n  phases?: IPhase[];\n}\n\n/**\n * maximal duration of all animations + extra waiting before e.g. rows are really removed\n * @type {number}\n */\nconst MAX_ANIMATION_TIME = 1100;\n\nexport const defaultPhases = [\n  {\n    delay: 0, // before\n    apply({ mode, previous, nodeY, current, node }: Readonly<IAnimationItem>): void {\n      const actNode = node;\n      actNode.dataset.animation = EAnimationMode[mode].toLowerCase();\n      actNode.style.transform = `translate(0, ${previous.y - nodeY}px)`;\n      if (mode === EAnimationMode.SHOW) {\n        // already target height\n        actNode.style.height = current.height !== null ? `${current.height}px` : '';\n      } else {\n        // always set previous height for default height changes\n        actNode.style.height = `${previous.height}px`;\n      }\n      if (mode === EAnimationMode.SHOW) {\n        actNode.style.opacity = '0';\n      } else if (mode === EAnimationMode.HIDE) {\n        actNode.style.opacity = '1';\n      } else {\n        actNode.style.opacity = '';\n      }\n    },\n  },\n  {\n    delay: 10, // after some delay for the before phase have been applied visually\n    apply({ mode, current, nodeY, node }: Readonly<IAnimationItem>): void {\n      const actNode = node;\n      // null for added/update since already at the right position\n      actNode.style.transform =\n        mode === EAnimationMode.HIDE || mode === EAnimationMode.UPDATE_REMOVE\n          ? `translate(0, ${current.y - nodeY}px)`\n          : '';\n      if (mode !== EAnimationMode.HIDE) {\n        // keep height for removal\n        actNode.style.height = current.height !== null ? `${current.height}px` : '';\n      }\n      if (mode === EAnimationMode.SHOW) {\n        actNode.style.opacity = '1';\n      } else if (mode === EAnimationMode.HIDE) {\n        actNode.style.opacity = '0';\n      } else {\n        actNode.style.opacity = '';\n      }\n    },\n  },\n  {\n    delay: MAX_ANIMATION_TIME, // cleanup\n    apply({ node }: Readonly<IAnimationItem>): void {\n      const actNode = node;\n      delete actNode.dataset.animation;\n      actNode.style.opacity = '';\n      actNode.style.transform = '';\n    },\n  },\n];\n","/* eslint-disable no-underscore-dangle */\nexport declare type IDelayedMode = number | 'animation' | 'sync';\n\nexport const defaultMode: IDelayedMode = 'animation'; // Boolean((<any>window).chrome) ? 'animation' : 0, // animation frame on chrome;\n\nexport interface IScrollInfo {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n}\n\ninterface IScrollHandler {\n  timer: number;\n  prev: IScrollInfo | null;\n  handler: ((act: IScrollInfo) => void)[];\n}\n\nfunction dummy(): IScrollHandler {\n  return {\n    handler: [],\n    prev: null,\n    timer: -1,\n  };\n}\n\nclass ScrollHandler {\n  private readonly sync = dummy();\n\n  private readonly animation = dummy();\n\n  private readonly numbers = new Map<number, IScrollHandler>();\n\n  // current: IScrollInfo;\n  // private prev: IScrollInfo | null = null;\n\n  get current() {\n    return this.asInfo();\n  }\n\n  constructor(private readonly node: HTMLElement) {\n    // this.current = this.asInfo();\n\n    node.addEventListener(\n      'scroll',\n      () => {\n        // this.current = this.asInfo();\n\n        // if (this.prev && (Math.abs(this.current.left - this.prev.left) + Math.abs(this.current.top - this.prev.top)) < 4) {\n        //   return;\n        // }\n        // this.prev = this.current;\n\n        if (this.sync.handler.length > 0) {\n          this.handle(this.sync);\n        }\n        this.handleAnimation();\n        this.handleTimeouts();\n      },\n      {\n        passive: true,\n      }\n    );\n  }\n\n  private handle(handler: IScrollHandler) {\n    const info = this.current;\n    if (handler.prev && Math.abs(info.left - handler.prev.left) + Math.abs(info.top - handler.prev.top) < 4) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    handler.prev = info;\n    for (const s of handler.handler) {\n      s(info);\n    }\n  }\n\n  private handleAnimation() {\n    if (this.animation.timer !== -1 || this.animation.handler.length === 0) {\n      return;\n    }\n    this.animation.timer = 1;\n    requestAnimationFrame(this.handleAnimationImpl);\n  }\n\n  private readonly handleAnimationImpl = () => {\n    if (this.animation.timer !== 1) {\n      return;\n    }\n    this.handle(this.animation);\n    this.animation.timer = -1;\n  };\n\n  private handleTimeouts() {\n    if (this.numbers.size === 0) {\n      return;\n    }\n\n    this.numbers.forEach((handler, n) => {\n      if (handler.handler.length === 0) {\n        return;\n      }\n      // eslint-disable-next-line no-param-reassign, no-restricted-globals\n      handler.timer = self.setTimeout(() => {\n        this.handle(handler);\n        // eslint-disable-next-line no-param-reassign\n        handler.timer = -1;\n      }, n);\n    });\n  }\n\n  asInfo(): IScrollInfo {\n    return {\n      left: this.node.scrollLeft,\n      top: this.node.scrollTop,\n      width: this.node.clientWidth,\n      height: this.node.clientHeight,\n    };\n  }\n\n  push(mode: IDelayedMode, handler: (act: IScrollInfo) => void) {\n    if (typeof mode === 'number') {\n      const entry = this.numbers.get(mode) ?? dummy();\n      entry.handler.push(handler);\n      this.numbers.set(mode, entry);\n    }\n\n    switch (mode) {\n      case 'sync':\n        this.sync.handler.push(handler);\n        break;\n      case 'animation':\n        this.animation.handler.push(handler);\n        break;\n    }\n  }\n\n  remove(handler: (act: IScrollInfo) => void) {\n    const test = [this.sync, this.animation].concat(Array.from(this.numbers.values()));\n\n    return test.some((d) => {\n      const index = d.handler.indexOf(handler);\n      if (index >= 0) {\n        d.handler.splice(index, 1);\n      }\n      return index >= 0;\n    });\n  }\n\n  isWaiting(mode: IDelayedMode) {\n    switch (mode) {\n      case 'animation':\n        return this.animation.timer >= 0;\n      case 'sync':\n        return false;\n      default:\n        return (this.numbers.get(mode)?.timer ?? -1) >= 0;\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function addScroll(\n  scrollElement: HTMLElement,\n  mode: IDelayedMode,\n  handler: (act: IScrollInfo) => void\n): IScrollInfo {\n  // hide in element to have just one real listener\n  const c = scrollElement as HTMLElement & { __le_scroller__?: ScrollHandler };\n  if (!c.__le_scroller__) {\n    c.__le_scroller__ = new ScrollHandler(scrollElement);\n  }\n  const s: ScrollHandler = c.__le_scroller__;\n  s.push(mode, handler);\n  return s.asInfo();\n}\n\n/**\n * @internal\n */\nexport function isScrollEventWaiting(scroller: HTMLElement, mode: IDelayedMode): boolean {\n  const c = scroller as HTMLElement & { __le_scroller__?: ScrollHandler };\n  if (!c.__le_scroller__) {\n    return false;\n  }\n  const s: ScrollHandler = c.__le_scroller__;\n  return s.isWaiting(mode);\n}\n\n/**\n * @internal\n */\nexport function removeScroll(scroller: HTMLElement, handler: (act: IScrollInfo) => void): void {\n  const c = scroller as HTMLElement & { __le_scroller__?: ScrollHandler };\n  if (c.__le_scroller__) {\n    c.__le_scroller__.remove(handler);\n  }\n}\n","export * from './scroll';\n\n/**\n * clear node clearing\n * @param node\n * @internal\n */\nexport function clear<T extends Node>(node: T): T {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n","/**\n * generic exception of a uniform space\n */\nexport interface IRowHeightException {\n  /**\n   * reference index\n   */\n  readonly index: number;\n  /**\n   * height of the element\n   */\n  readonly height: number;\n  /**\n   * starting y\n   */\n  readonly y: number;\n  /**\n   * ending y\n   */\n  readonly y2: number;\n}\n\nclass RowHeightException implements IRowHeightException {\n  constructor(\n    public readonly index: number,\n    public readonly y: number,\n    public readonly height: number\n  ) {}\n\n  get y2() {\n    return this.y + this.height;\n  }\n}\n\n/**\n * similar to a map\n */\nexport interface IRowHeightExceptionLookup {\n  keys(): IterableIterator<number>;\n\n  get(index: number): number | undefined;\n\n  has(index: number): boolean;\n\n  readonly size: number;\n}\n\n/**\n * exception context for optimized non uniform height exceptions\n */\nexport interface IExceptionContext {\n  /**\n   * height exceptions as a list\n   */\n  readonly exceptions: IRowHeightException[];\n  /**\n   * lookup for the height of a given index, if not part of this map it has the default height\n   */\n  readonly exceptionsLookup: IRowHeightExceptionLookup;\n  /**\n   * number of rows\n   */\n  readonly numberOfRows: number;\n  /**\n   * default height of rows\n   */\n  readonly defaultRowHeight: number;\n  /**\n   * total height\n   */\n  readonly totalHeight: number;\n\n  /**\n   * padding between rows, however already included in all heights to have the precise numbers\n   */\n  readonly padding: (index: number) => number;\n}\n\n/**\n * creates a uniform exception context, i.e no exceptions all rows are of the same height\n * @param {number} numberOfRows\n * @param {number} currentRowHeight\n * @param {number} rowPadding padding between rows\n * @return {IExceptionContext}\n */\nexport function uniformContext(numberOfRows: number, rowHeight: number, rowPadding = 0): IExceptionContext {\n  const currentRowHeight = rowHeight + rowPadding;\n  const exceptionsLookup = {\n    keys: () => [].values(),\n    get: () => currentRowHeight,\n    has: () => false,\n    size: 0,\n  };\n  return {\n    exceptions: [],\n    exceptionsLookup,\n    totalHeight: numberOfRows * currentRowHeight,\n    numberOfRows,\n    defaultRowHeight: currentRowHeight,\n    padding: () => rowPadding,\n  };\n}\n\n/**\n * computes the most frequent value in a given array like\n * @param {} values\n * @return {number}\n */\nfunction mostFrequentValue(values: { forEach: (callback: (height: number, index: number) => void) => void }): number {\n  const lookup = new Map<number, number>();\n  values.forEach((value) => {\n    lookup.set(value, (lookup.get(value) || 0) + 1);\n  });\n  if (lookup.size === 0) {\n    return 20; // default value since it doesn't matter\n  }\n  // sort desc take first key and asc by the second in case of tie, it is optimized to have exceptions for higher rows less for big rows\n  const sorted = Array.from(lookup).sort((a, b) => {\n    if (a[1] !== b[1]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  const mostFrequent = sorted[0][0];\n  if (mostFrequent === 0) {\n    // corner case\n    return sorted.length > 1 ? sorted[1][0] : 20; // all empty\n  }\n  return mostFrequent;\n}\n\n/**\n * creates a non uniform context based on the given array like heights\n * @param rowHeights array like to get the heights\n * @param {number} defaultRowHeight if not given the most frequent value will be used\n * @param {number} rowPadding padding between rows\n * @return {IExceptionContext}\n */\nexport function nonUniformContext(\n  rowHeights: {\n    forEach: (callback: (height: number, index: number) => void) => void;\n  },\n  defaultRowHeight = Number.NaN,\n  rowPadding: number | ((index: number) => number) = 0\n): IExceptionContext {\n  const exceptionsLookup = new Map<number, number>();\n  const exceptions: IRowHeightException[] = [];\n\n  const padding = typeof rowPadding === 'function' ? rowPadding : () => rowPadding as number;\n\n  let actualDefaultRowHeight = defaultRowHeight;\n  if (Number.isNaN(actualDefaultRowHeight)) {\n    actualDefaultRowHeight = mostFrequentValue(rowHeights);\n  }\n\n  actualDefaultRowHeight += padding(-1);\n\n  let prev = -1;\n  let acc = 0;\n  let totalHeight = 0;\n  let numberOfRows = 0;\n  rowHeights.forEach((height, index) => {\n    const paddedHeight = height + padding(index);\n    totalHeight += paddedHeight;\n    numberOfRows += 1;\n    if (paddedHeight === actualDefaultRowHeight) {\n      // regular\n      return;\n    }\n    exceptionsLookup.set(index, paddedHeight);\n    const between = (index - prev - 1) * actualDefaultRowHeight;\n    prev = index;\n    const y = acc + between;\n    acc = y + paddedHeight;\n    exceptions.push(new RowHeightException(index, y, paddedHeight));\n  });\n  return {\n    exceptionsLookup,\n    exceptions,\n    totalHeight,\n    defaultRowHeight: actualDefaultRowHeight,\n    numberOfRows,\n    padding,\n  };\n}\n\n/**\n * creates a random context with the given constraints\n * @param {number} numberOfRows\n * @param {number} defaultRowHeight\n * @param {number} minRowHeight\n * @param {number} maxRowHeight\n * @param {number} ratio around ratio percent will get a non uniform height\n * @param {number} seed random seed\n * @return {IExceptionContext}\n */\nexport function randomContext(\n  numberOfRows: number,\n  defaultRowHeight: number,\n  minRowHeight = 2,\n  maxRowHeight = defaultRowHeight * 10,\n  ratio = 0.2,\n  seed = Date.now()\n): IExceptionContext {\n  let actSeed = seed;\n  const random = () => {\n    const x = Math.sin(actSeed) * 10000;\n    actSeed += 1;\n    return x - Math.floor(x);\n  };\n\n  const getter = () => {\n    const coin = random();\n    if (coin < ratio) {\n      // non uniform\n      return minRowHeight + Math.round(random() * (maxRowHeight - minRowHeight));\n    }\n    return defaultRowHeight;\n  };\n  const forEach = (callback: (height: number, index: number) => void) => {\n    for (let index = 0; index < numberOfRows; index += 1) {\n      callback(getter(), index);\n    }\n  };\n  return nonUniformContext({ forEach }, defaultRowHeight);\n}\n\nexport interface IVisibleRange {\n  /**\n   * first visible index\n   */\n  readonly first: number;\n  /**\n   * last visible index\n   */\n  readonly last: number;\n  /**\n   * position of the first visible row in pixel\n   */\n  readonly firstRowPos: number;\n  /**\n   * position of the last visible row including its size\n   */\n  readonly endPos: number;\n}\n\n/**\n * computes the visible range\n * @param {number} scrollTop top scrolling\n * @param {number} clientHeight visible height\n * @param {number} rowHeight height of a row by default\n * @param {IRowHeightException[]} heightExceptions exceptions of this default height\n * @param {number} numberOfRows the number of rows\n * @return {IVisibleRange} the computed visible range\n */\nexport function range(\n  scrollTop: number,\n  clientHeight: number,\n  rowHeight: number,\n  heightExceptions: IRowHeightException[],\n  numberOfRows: number\n): IVisibleRange {\n  if (numberOfRows === 0) {\n    return { first: 0, last: -1, firstRowPos: 0, endPos: 0 };\n  }\n  if (numberOfRows === 1) {\n    return {\n      first: 0,\n      last: 0,\n      firstRowPos: 0,\n      endPos: heightExceptions.length === 0 ? rowHeight : heightExceptions[0].y2,\n    };\n  }\n  const offset = scrollTop;\n  const offset2 = offset + clientHeight;\n\n  function indexOf(pos: number, indexShift: number) {\n    return Math.min(numberOfRows - 1, indexShift + Math.max(0, Math.floor(pos / rowHeight)));\n  }\n\n  function calc(offsetShift: number, indexShift: number) {\n    const shifted = offset - offsetShift;\n    const shifted2 = offset2 - offsetShift;\n\n    const first = indexOf(shifted, indexShift);\n    const last = indexOf(shifted2, indexShift);\n\n    const firstRowPos = offsetShift + (first - indexShift) * rowHeight;\n    const endPos = offsetShift + (last + 1 - indexShift) * rowHeight;\n\n    // if (!isGuess) {\n    //  console.log(first, '@', firstRowPos, last, '#', end, offset, offset2, firstRowPos <= offset, offset2 <= end);\n    // }\n    // console.assert(\n    //   !isGuess || !(firstRowPos > offset || (endPos < offset2 && last < numberOfRows - 1)),\n    //   'error',\n    //   isGuess,\n    //   firstRowPos,\n    //   endPos,\n    //   offset,\n    //   offset2,\n    //   indexShift,\n    //   offsetShift\n    // );\n    return { first, last, firstRowPos, endPos };\n  }\n\n  const r = calc(0, 0);\n  if (heightExceptions.length === 0) {\n    // uniform\n    return r;\n  }\n  if (r.last < heightExceptions[0].index) {\n    // console.log('before the first exception = uniform with no shift');\n    // console.log(r.first, '@', r.firstRowPos, r.last, '#', r.end, offset, offset2, r.firstRowPos <= offset, offset2 <= r.end);\n    return r;\n  }\n  if (r.last === heightExceptions[0].index && heightExceptions[0].height > rowHeight) {\n    return Object.assign(r, { endPos: heightExceptions[0].y2 });\n  }\n\n  // the position where the exceptions ends\n  const lastPos = heightExceptions[heightExceptions.length - 1];\n  if (offset >= lastPos.y) {\n    const rest = calc(lastPos.y2, lastPos.index + 1);\n    if (offset < lastPos.y2) {\n      // include me\n      return Object.assign(rest, {\n        first: lastPos.index,\n        firstRowPos: lastPos.y,\n      });\n    }\n    return rest;\n  }\n  // we have some exceptions\n  const visible: IRowHeightException[] = [];\n  let closest = heightExceptions[0]; // closest before not in range\n  for (const item of heightExceptions) {\n    const { y, y2 } = item;\n    if (y >= offset2) {\n      break;\n    }\n    if (y2 <= offset) {\n      closest = item;\n      continue;\n    }\n    visible.push(item);\n  }\n\n  if (visible.length === 0) {\n    // console.log('we are in the between some exceptions and none are visible');\n    return calc(closest.y2, closest.index + 1); // skip myself\n  }\n\n  {\n    // console.log('we show at least one exception');\n    const firstException = visible[0];\n    const lastException = visible[visible.length - 1];\n\n    const first = Math.max(0, firstException.index - Math.max(0, Math.ceil((firstException.y - offset) / rowHeight)));\n    let last = lastException.index;\n    if (offset2 >= lastException.y2) {\n      last = indexOf(offset2 - lastException.y2, lastException.index + 1);\n    }\n    const firstRowPos = firstException.y - (firstException.index - first) * rowHeight;\n    const endPos = lastException.y2 + (last - lastException.index) * rowHeight;\n\n    // console.log(first, '@', firstRowPos, last, '#', end, offset, offset2, firstRowPos <= offset, offset2 <= end);\n\n    // console.assert(\n    //   firstRowPos <= offset && (endPos >= offset2 || last === numberOfRows - 1),\n    //   'error',\n    //   firstRowPos,\n    //   endPos,\n    //   offset,\n    //   offset2,\n    //   firstException,\n    //   lastException\n    // );\n    return { first, last, firstRowPos, endPos };\n  }\n}\n\nexport function frozenDelta(\n  current: number[],\n  target: number[]\n): { added: number[]; removed: number[]; common: number } {\n  const currentLength = current.length;\n  const targetLength = target.length;\n  if (currentLength === 0) {\n    return { added: target, removed: [], common: 0 };\n  }\n  if (targetLength === 0) {\n    return { added: [], removed: current, common: 0 };\n  }\n  if (currentLength === targetLength) {\n    // since sorted and left increasing true\n    return { added: [], removed: [], common: currentLength };\n  }\n  const removed = current.slice(Math.min(targetLength, currentLength));\n  const added = target.slice(Math.min(targetLength, currentLength));\n  return { added, removed, common: currentLength - removed.length };\n}\n\nexport function updateFrozen(\n  old: number[],\n  columns: { frozen: boolean }[],\n  first: number\n): { target: number[]; added: number[]; removed: number[] } {\n  const oldLast = old.length === 0 ? 0 : old[old.length - 1] + 1;\n  const added: number[] = [];\n  const removed: number[] = [];\n\n  for (let i = old.length - 1; i >= 0; i -= 1) {\n    const index = old[i];\n    if (index >= first) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      removed.push(old.pop()!);\n    } else {\n      // can stop since sorted and it will never happen again\n      break;\n    }\n  }\n  // added\n  for (let i = oldLast; i < first; i += 1) {\n    if (columns[i].frozen) {\n      added.push(i);\n      old.push(i);\n    }\n  }\n  return { target: old, added, removed };\n}\n","import type { IExceptionContext } from '../logic';\n\n/**\n * scrolling result\n */\nexport enum EScrollResult {\n  /**\n   * nothing has changed\n   */\n  NONE,\n  /**\n   * all rows needed to be recreated\n   */\n  ALL,\n  /**\n   * unknown\n   */\n  SOME,\n  /**\n   * some rows are added at the bottom\n   */\n  SOME_BOTTOM,\n  /**\n   * some rows are added at the top\n   */\n  SOME_TOP,\n}\n\n/**\n * adapter context for mixins to avoid public fields\n */\nexport interface IMixinAdapter {\n  readonly visible: {\n    // writable\n    first: number;\n    last: number;\n    forcedFirst: number;\n    forcedLast: number;\n  };\n  readonly visibleFirstRowPos: number;\n\n  readonly context: IExceptionContext;\n  readonly scrollOffset: number;\n  readonly scrollTotal: number;\n\n  addAtBeginning(from: number, to: number, frozenShift: number): void;\n\n  addAtBottom(from: number, to: number): void;\n\n  removeFromBeginning(from: number, to: number, frozenShift: number): void;\n\n  removeFromBottom(from: number, to: number): void;\n\n  updateOffset(firstRowPos: number): void;\n\n  /**\n   * triggers to sync frozen items\n   * @param {number} first\n   * @return {number} frozenShift\n   */\n  syncFrozen?(first: number): number;\n\n  isScrollEventWaiting(): boolean;\n}\n\nexport interface IMixin {\n  onScrolled(isGoingDown: boolean, scrollResult: EScrollResult): void;\n}\n\nexport interface IMixinClass {\n  new (adapter: IMixinAdapter, options?: unknown): IMixin;\n}\n","const PREFIX = 'le';\n\n/**\n * @internal\n * @param suffix suffix to suffix\n */\nexport function cssClass(suffix?: string): string {\n  if (!suffix) {\n    return PREFIX;\n  }\n  return `${PREFIX}-${suffix}`;\n}\n\nexport const CSS_CLASS_LOADING = cssClass('loading');\nexport const CSS_CLASS_FROZEN = cssClass('frozen');\nexport const CSS_CLASS_HIDDEN = cssClass('hidden');\nexport const CSS_CLASS_MULTI = cssClass('multi');\nexport const CSS_CLASS_EVEN = cssClass('even');\nexport const CSS_CLASS_SHIFTED = cssClass('shifted');\nexport const CSS_CLASS_SCROLLBAR_TESTER = cssClass('scrollbar-tester');\n\nexport const CSS_CLASS_HEADER = cssClass('header');\nexport const CSS_CLASS_BODY = cssClass('body');\nexport const CSS_CLASS_FOOTER = cssClass('footer');\n\nexport const CSS_CLASS_THEAD = cssClass('thead');\nexport const CSS_CLASS_TBODY = cssClass('tbody');\n\nexport const CSS_CLASS_TR = cssClass('tr');\nexport const CSS_CLASS_TH = cssClass('th');\nexport const CSS_CLASS_TD = cssClass('td');\n\nexport const CSS_CLASS_SCROLLING = cssClass('scrolling');\nexport const CSS_CLASS_ROW_ANIMATION = cssClass('row-animation');\n","import { ABORTED, IAbortAblePromise, isAbortAble } from './abortAble';\nimport {\n  defaultPhases,\n  EAnimationMode,\n  IAnimationContext,\n  IAnimationItem,\n  IPhase,\n  noAnimationChange,\n} from './animation';\nimport KeyFinder from './animation/KeyFinder';\nimport { addScroll, clear, defaultMode, IDelayedMode, IScrollInfo, removeScroll } from './internal';\nimport { isScrollEventWaiting } from './internal/scroll';\nimport { IExceptionContext, range } from './logic';\nimport { EScrollResult, IMixin, IMixinAdapter, IMixinClass } from './mixin';\nimport {\n  cssClass,\n  CSS_CLASS_EVEN,\n  CSS_CLASS_FOOTER,\n  CSS_CLASS_LOADING,\n  CSS_CLASS_ROW_ANIMATION,\n  CSS_CLASS_SCROLLING,\n  CSS_CLASS_TR,\n} from './styles';\n\nexport declare type IRowRenderContext = IExceptionContext;\n\nexport function isLoadingCell(node: HTMLElement): boolean {\n  return node.classList.contains(CSS_CLASS_LOADING);\n}\n\nexport interface IRowRendererOptions {\n  /**\n   * async update on scrolling\n   * animation -> use requestAnimationFrame\n   * sync -> execute within scroll listener\n   * {number} -> execute within this delay using setTimeout\n   * @default is chrome ? animation else 0\n   */\n  async: IDelayedMode;\n\n  /**\n   * minimal number of pixel the scrollbars has to move\n   * @default 10\n   */\n  minScrollDelta: number;\n\n  /**\n   * min number of rows that should be added or removed\n   * @default 10\n   */\n  batchSize: number;\n\n  /**\n   * number of pixels the viewport is virtually larger\n   * @default 200\n   */\n  viewportOversize: number;\n\n  /**\n   * class of mixins to use for optimized rendering\n   */\n  mixins: IMixinClass[];\n\n  /**\n   * add the scrolling hint class while scrolling to give a user feedback\n   */\n  scrollingHint: boolean;\n\n  /**\n   * whether background striping should be enabled\n   */\n  striped: boolean;\n}\n\n/**\n * base class for creating a scalable table renderer based on rows\n */\nexport abstract class ARowRenderer {\n  private readonly pool: HTMLElement[] = [];\n\n  private readonly loadingPool: HTMLElement[] = [];\n\n  private readonly loading = new WeakMap<HTMLElement, IAbortAblePromise<void>>();\n\n  private readonly fragment: DocumentFragment;\n\n  /**\n   * currently visible slice\n   */\n  protected readonly visible = {\n    first: 0,\n    forcedFirst: 0,\n    last: -1,\n    forcedLast: -1,\n  };\n\n  /**\n   * position of the first visible row in pixel\n   * @type {number}\n   */\n  protected visibleFirstRowPos = 0;\n\n  private readonly adapter: IMixinAdapter;\n\n  private readonly mixins: IMixin[];\n\n  private scrollListener: ((act: IScrollInfo) => void) | null = null;\n\n  protected lastScrollInfo: IScrollInfo | null = null;\n\n  private abortAnimation: () => void = () => undefined;\n\n  protected readonly options: Readonly<IRowRendererOptions> = {\n    async: defaultMode,\n    minScrollDelta: 10,\n    mixins: [],\n    scrollingHint: false,\n    batchSize: 10,\n    striped: false,\n    viewportOversize: 200,\n  };\n\n  constructor(\n    protected readonly body: HTMLElement,\n    options: Partial<IRowRendererOptions> = {}\n  ) {\n    this.adapter = this.createAdapter();\n    Object.assign(this.options, options);\n    this.mixins = this.options.mixins.map((MixinClass) => new MixinClass(this.adapter));\n\n    this.fragment = body.ownerDocument.createDocumentFragment();\n  }\n\n  protected abstract get idPrefix(): string;\n\n  /**\n   * register another mixin to this renderer\n   * @param {IMixinClass} MixinClass the mixin class to instantiate\n   * @param options optional constructor options\n   */\n  protected addMixin(MixinClass: IMixinClass, options?: unknown): void {\n    this.mixins.push(new MixinClass(this.adapter, options));\n  }\n\n  private createAdapter(): IMixinAdapter {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n    return {\n      visible: this.visible,\n      addAtBeginning: (from, to) => this.addAtBeginning(from, to),\n      addAtBottom: this.addAtBottom.bind(this),\n      removeFromBeginning: (from, to) => this.removeFromBeginning(from, to),\n      removeFromBottom: this.removeFromBottom.bind(this),\n      updateOffset: this.updateOffset.bind(this),\n      isScrollEventWaiting: () => isScrollEventWaiting(this.bodyScroller, this.options.async),\n      get visibleFirstRowPos() {\n        return that.visibleFirstRowPos;\n      },\n      get context() {\n        return that.context;\n      },\n      get scrollOffset() {\n        return that.lastScrollInfo ? that.lastScrollInfo.top : 0;\n      },\n      get scrollTotal() {\n        return that.lastScrollInfo ? that.lastScrollInfo.height : that.bodyScroller.clientHeight;\n      },\n    };\n  }\n\n  /**\n   * get the scrolling container i.e. parent of the body element\n   * @returns {HTMLElement}\n   */\n  protected get bodyScroller(): HTMLElement {\n    return this.body.parentElement as HTMLElement;\n  }\n\n  protected get bodySizer(): HTMLElement {\n    const parent = this.bodyScroller;\n    const sizer = (Array.from(parent.children) as HTMLElement[]).find((d) => d.tagName.toLowerCase() === 'footer');\n    if (sizer) {\n      return sizer;\n    }\n    const s = parent.ownerDocument.createElement('footer');\n    s.classList.add(CSS_CLASS_FOOTER, cssClass(`footer-${this.idPrefix}`));\n    parent.insertBefore(s, parent.firstChild);\n    return s;\n  }\n\n  /**\n   * the current render context, upon change `recreate` the whole table\n   * @returns {IRowRenderContext}\n   */\n  protected abstract get context(): IRowRenderContext;\n\n  /**\n   * creates a new row\n   * @param {HTMLElement} node the node of the row\n   * @param {number} index the row index\n   * @returns {IAbortAblePromise<void> | void} either an abortable or nothing\n   */\n  protected abstract createRow(node: HTMLElement, index: number): IAbortAblePromise<void> | void;\n\n  /**\n   * updates a row\n   * @param {HTMLElement} node the node of the row\n   * @param {number} index the row index\n   * @returns {IAbortAblePromise<void> | void} either an abortable or nothing\n   */\n  protected abstract updateRow(node: HTMLElement, index: number): IAbortAblePromise<void> | void;\n\n  /**\n   * initializes the table and register the onscroll listener\n   * @returns {void} nothing\n   */\n  protected init(): void {\n    const scroller = this.bodyScroller;\n\n    let old = addScroll(\n      scroller,\n      this.options.async,\n      (this.scrollListener = (act) => {\n        this.lastScrollInfo = act;\n        if (\n          Math.abs(old.top - act.top) < this.options.minScrollDelta &&\n          Math.abs(old.height - act.height) < this.options.minScrollDelta\n        ) {\n          return;\n        }\n        const isGoingDown = act.top > old.top;\n        old = act;\n        this.onScrolledVertically(act.top, act.height, isGoingDown);\n        if (this.options.scrollingHint) {\n          this.body.classList.remove(CSS_CLASS_SCROLLING);\n        }\n      })\n    );\n    if (this.options.scrollingHint) {\n      addScroll(scroller, 'animation', () => this.body.classList.add(CSS_CLASS_SCROLLING));\n    }\n    this.recreate();\n  }\n\n  /**\n   * destroys this renderer and unregisters all event listeners\n   */\n  destroy(): void {\n    if (this.scrollListener) {\n      removeScroll(this.bodyScroller, this.scrollListener);\n    }\n    this.body.remove();\n  }\n\n  private static cleanUp(item: HTMLElement) {\n    // eslint-disable-next-line no-param-reassign\n    item.style.height = '';\n  }\n\n  private select(index: number): { item: HTMLElement; result: IAbortAblePromise<void> | void } {\n    let item: HTMLElement | undefined = this.pool.pop();\n    let result: IAbortAblePromise<void> | void;\n    if (item != null) {\n      result = this.updateRow(item, index);\n    } else {\n      item = this.loadingPool.pop();\n      if (item != null) {\n        item.classList.remove(CSS_CLASS_LOADING);\n        result = this.createRow(item, index);\n      } else {\n        item = this.body.ownerDocument.createElement('div');\n        item.classList.add(CSS_CLASS_TR, cssClass(`tr-${this.idPrefix}`));\n        result = this.createRow(item, index);\n      }\n    }\n    item.dataset.index = String(index);\n    if (this.options.striped) {\n      item.classList.toggle(CSS_CLASS_EVEN, index % 2 === 0);\n    }\n    return { item, result };\n  }\n\n  private selectProxy() {\n    let proxy = this.loadingPool.pop();\n    if (proxy == null) {\n      proxy = this.body.ownerDocument.createElement('div');\n      proxy.classList.add(CSS_CLASS_LOADING, CSS_CLASS_TR, cssClass(`tr-${this.idPrefix}`));\n    }\n    return proxy;\n  }\n\n  private recycle(item: HTMLElement) {\n    ARowRenderer.cleanUp(item);\n    // check if the original dom element is still being manipulated\n    const abort = this.loading.get(item);\n    if (abort != null) {\n      abort.abort();\n    } else {\n      this.pool.push(item);\n    }\n  }\n\n  private proxy(item: HTMLElement, result: IAbortAblePromise<void> | void) {\n    if (!isAbortAble(result)) {\n      return item;\n    }\n    const abort = result;\n    // lazy loading\n\n    const real = item;\n    const proxy = this.selectProxy();\n    // copy attributes\n    proxy.dataset.index = real.dataset.index;\n    proxy.style.height = real.style.height;\n\n    this.loading.set(proxy, abort);\n    abort.then(\n      (abortResult) => {\n        if (abortResult === ABORTED) {\n          // aborted can recycle the real one\n          ARowRenderer.cleanUp(real);\n          this.pool.push(real);\n        } else {\n          // fully loaded\n          this.body.replaceChild(real, proxy);\n        }\n        this.loading.delete(proxy);\n        ARowRenderer.cleanUp(proxy);\n        this.loadingPool.push(proxy);\n      },\n      () => {\n        // handle as aborted\n        // aborted can recycle the real one\n        ARowRenderer.cleanUp(real);\n        this.pool.push(real);\n\n        this.loading.delete(proxy);\n        ARowRenderer.cleanUp(proxy);\n        this.loadingPool.push(proxy);\n      }\n    );\n    return proxy;\n  }\n\n  private create(index: number) {\n    const { item, result } = this.select(index);\n\n    const { exceptionsLookup: ex, padding } = this.context;\n    const exceptionHeight = ex.get(index);\n    if (exceptionHeight != null) {\n      item.style.height = `${exceptionHeight - padding(index)}px`;\n    }\n\n    return this.proxy(item, result);\n  }\n\n  private removeAll(perform = true) {\n    const b = this.body;\n    if (!perform) {\n      return Array.from(b.children) as HTMLElement[];\n    }\n    const toRecycle: HTMLElement[] = [];\n    while (b.lastElementChild) {\n      const i = b.lastElementChild as HTMLElement;\n      b.removeChild(i);\n      this.recycle(i);\n      toRecycle.push(i);\n    }\n    return toRecycle;\n  }\n\n  /**\n   * triggers and visual update of all visible rows\n   */\n  protected update(): void {\n    const { first } = this.visible;\n    const { fragment } = this;\n    const items = Array.from(this.body.children) as HTMLElement[];\n    clear(this.body);\n    items.forEach((item: HTMLElement, i) => {\n      if (this.loading.has(item)) {\n        // still loading\n        fragment.appendChild(item);\n        return;\n      }\n      const abort = this.updateRow(item, i + first);\n\n      fragment.appendChild(this.proxy(item, abort));\n    });\n    this.body.appendChild(fragment);\n  }\n\n  /**\n   * utility to execute a function for each visible row\n   * @param {(row: HTMLElement, rowIndex: number) => void} callback callback to execute\n   * @param {boolean} inPlace whether the DOM changes should be performed in place instead of in a fragment\n   */\n  protected forEachRow(callback: (row: HTMLElement, rowIndex: number) => void, inPlace = false): void {\n    const rows = Array.from(this.body.children) as HTMLElement[];\n    const { fragment } = this;\n    if (!inPlace) {\n      clear(this.body);\n    }\n    rows.forEach((row: HTMLElement, index) => {\n      if (!isLoadingCell(row) && row.dataset.animation !== 'update_remove' && row.dataset.animation !== 'hide') {\n        // skip loading ones and temporary ones\n        callback(row, index + this.visible.first);\n      }\n      if (!inPlace) {\n        fragment.appendChild(row);\n      }\n    });\n    if (!inPlace) {\n      this.body.appendChild(fragment);\n    }\n  }\n\n  private removeFromBeginning(from: number, to: number, perform = true) {\n    return this.remove(from, to, true, perform);\n  }\n\n  private removeFromBottom(from: number, to: number, perform = true) {\n    return this.remove(from, to, false, perform);\n  }\n\n  private remove(from: number, to: number, fromBeginning: boolean, perform = true) {\n    if (to < from) {\n      return [];\n    }\n    const b = this.body;\n    const toRecycle: HTMLElement[] = [];\n    // console.log('remove', fromBeginning, (to - from) + 1, this.body.childElementCount - ((to - from) + 1));\n    let act = (fromBeginning ? b.firstChild : b.lastChild) as HTMLElement;\n    for (let i = from; i <= to; i += 1) {\n      const item = act;\n      act = (fromBeginning ? act.nextSibling : act.previousSibling) as HTMLElement;\n\n      if (perform) {\n        b.removeChild(item);\n        this.recycle(item);\n      }\n      toRecycle.push(item);\n    }\n    return toRecycle;\n  }\n\n  private addAtBeginning(from: number, to: number, perform = true) {\n    if (to < from) {\n      return null;\n    }\n    // console.log('add', (to - from) + 1, this.body.childElementCount + ((to - from) + 1));\n    const { fragment } = this;\n    if (from === to && perform) {\n      this.body.insertBefore(this.create(from), this.body.firstChild);\n      return null;\n    }\n    for (let i = from; i <= to; i += 1) {\n      fragment.appendChild(this.create(i));\n    }\n    if (perform) {\n      this.body.insertBefore(fragment, this.body.firstChild);\n    }\n    return fragment;\n  }\n\n  private addAtBottom(from: number, to: number, perform = true) {\n    if (to < from) {\n      return null;\n    }\n    // console.log('add_b', (to - from) + 1, this.body.childElementCount + ((to - from) + 1));\n    if (from === to && perform) {\n      this.body.appendChild(this.create(from));\n      return null;\n    }\n    const { fragment } = this;\n    for (let i = from; i <= to; i += 1) {\n      fragment.appendChild(this.create(i));\n    }\n    if (perform) {\n      this.body.appendChild(fragment);\n    }\n    return fragment;\n  }\n\n  protected updateOffset(firstRowPos: number): void {\n    this.visibleFirstRowPos = firstRowPos;\n\n    this.updateSizer(firstRowPos);\n  }\n\n  protected updateSizer(firstRowPos: number): void {\n    const { totalHeight } = this.context;\n    setTransform(this.body, 0, firstRowPos.toFixed(0));\n    setTransform(this.bodySizer, 0, Math.max(0, totalHeight - 1).toFixed(0));\n  }\n\n  /**\n   * removes all rows and recreates the table\n   * @param {IAnimationContext} ctx optional animation context to create a transition between the previous and the current tables\n   * @returns {void} nothing\n   */\n  protected recreate(ctx?: IAnimationContext): void {\n    this.abortAnimation();\n    if (ctx) {\n      return this.recreateAnimated(ctx);\n    }\n    return this.recreatePure();\n  }\n\n  private recreatePure() {\n    const { context } = this;\n\n    const scroller = this.bodyScroller;\n\n    // update first to avoid resetting scrollTop\n    this.updateOffset(0);\n\n    this.removeAll();\n    this.clearPool();\n\n    const { first, last, firstRowPos } = range(\n      scroller.scrollTop,\n      scroller.clientHeight,\n      context.defaultRowHeight,\n      context.exceptions,\n      context.numberOfRows\n    );\n\n    this.visible.first = first;\n    this.visible.forcedFirst = first;\n    this.visible.last = last;\n    this.visible.forcedLast = last;\n\n    if (first < 0) {\n      // empty\n      this.updateOffset(0);\n      return;\n    }\n    this.addAtBottom(first, last);\n    this.updateOffset(firstRowPos);\n  }\n\n  private recreateAnimated(ctx: IAnimationContext) {\n    const lookup = new Map<string, { n: HTMLElement; pos: number; i: number }>();\n    const prev = new KeyFinder(ctx.previous, ctx.previousKey);\n    const cur = new KeyFinder(this.context, ctx.currentKey);\n    const next = range(\n      this.bodyScroller.scrollTop,\n      this.bodyScroller.clientHeight,\n      cur.context.defaultRowHeight,\n      cur.context.exceptions,\n      cur.context.numberOfRows\n    );\n\n    {\n      const rows = Array.from(this.body.children) as HTMLElement[];\n      const old = { ...this.visible };\n      // store the current rows in a lookup and clear\n\n      clear(this.body);\n\n      prev.positions(old.first, Math.min(old.last, old.first + rows.length), this.visibleFirstRowPos, (i, key, pos) => {\n        const n = rows[i];\n        if (n) {\n          // shouldn't happen that it is not there\n          lookup.set(key, { n, pos, i });\n        }\n        // else {\n        //  console.error(i, key, pos, rows);\n        // }\n      });\n    }\n\n    this.visible.first = next.first;\n    this.visible.forcedFirst = next.first;\n    this.visible.last = next.last;\n    this.visible.forcedLast = next.last;\n\n    const { fragment } = this;\n    const animation: IAnimationItem[] = [];\n\n    let nodeY = next.firstRowPos;\n    cur.positions(next.first, next.last, next.firstRowPos, (i, key, pos) => {\n      let node: HTMLElement;\n      let mode: EAnimationMode = EAnimationMode.UPDATE;\n      let previous: {\n        index: number | -1;\n        y: number;\n        height: number;\n      };\n      const item = lookup.get(key);\n      if (item != null) {\n        // still visible\n        lookup.delete(key);\n\n        // update height\n\n        item.n.dataset.index = String(i);\n        node = this.proxy(item.n, this.updateRow(item.n, i));\n        previous = {\n          index: item.i,\n          y: item.pos,\n          height: prev.exceptionHeightOf(item.i, true),\n        };\n      } else {\n        // need a new row\n        const old = prev.posByKey(key);\n        // maybe not visible  before so keep in place\n        node = this.create(i);\n\n        mode = old.index < 0 ? EAnimationMode.SHOW : EAnimationMode.UPDATE_CREATE;\n        previous = {\n          index: old.index,\n          y: old.pos >= 0 ? old.pos : pos,\n          height: old.index < 0 ? cur.exceptionHeightOf(i, true) : prev.exceptionHeightOf(old.index, true),\n        };\n      }\n      animation.push({\n        node,\n        key,\n        mode,\n        previous,\n        nodeY,\n        nodeYCurrentHeight: pos,\n        current: {\n          index: i,\n          y: pos,\n          height: cur.exceptionHeightOf(i),\n        },\n      });\n      node.style.transform = `translate(0, ${nodeY - pos}px)`;\n      nodeY += previous.height + (previous.index < 0 ? cur.padding(i) : prev.padding(previous.index));\n\n      fragment.appendChild(node);\n    });\n\n    let nodeYCurrentHeight = next.endPos;\n    // items that are going to be removed\n    lookup.forEach((item, key) => {\n      // calculate their next position\n      const r = cur.posByKey(key);\n\n      // maybe not visible anymore, keep in place\n      const nextPos = r.pos >= 0 ? r.pos : item.pos;\n      const node = item.n;\n      // located at addedPos\n      // should end up at nextPos\n      // was previously at item.pos\n      node.style.transform = `translate(0, ${item.pos - nodeY}px)`;\n      fragment.appendChild(node);\n\n      const prevHeight = prev.exceptionHeightOf(item.i, true);\n\n      animation.push({\n        node: item.n,\n        key,\n        mode: r.index < 0 ? EAnimationMode.HIDE : EAnimationMode.UPDATE_REMOVE,\n        previous: {\n          index: item.i,\n          y: item.pos,\n          height: prevHeight,\n        },\n        nodeY,\n        nodeYCurrentHeight,\n        current: {\n          index: r.index,\n          y: nextPos,\n          height: r.index < 0 ? null : cur.exceptionHeightOf(r.index),\n        },\n      });\n      nodeYCurrentHeight +=\n        r.index < 0 ? cur.context.defaultRowHeight : cur.exceptionHeightOf(r.index, true) + cur.padding(r.index);\n      nodeY += prevHeight + prev.padding(item.i);\n    });\n\n    this.updateOffset(next.firstRowPos);\n\n    this.animate(animation, ctx.phases || defaultPhases, prev, cur, fragment);\n  }\n\n  private animate(\n    animation: IAnimationItem[],\n    phases: IPhase[],\n    previousFinder: KeyFinder,\n    currentFinder: KeyFinder,\n    fragment: DocumentFragment\n  ) {\n    let activeAnimation = animation;\n    if (activeAnimation.length <= 0) {\n      this.body.appendChild(fragment);\n      return;\n    }\n\n    let currentTimer = -1;\n    let actPhase = 0;\n\n    const executePhase = (phase: IPhase, items = activeAnimation) => {\n      items.forEach((anim) => phase.apply(anim, previousFinder, currentFinder));\n    };\n\n    const run = () => {\n      // dummy log for forcing dom update\n      // eslint-disable-next-line no-console\n      console.assert(activeAnimation[0].node.offsetTop >= 0, 'dummy log for forcing dom update');\n      executePhase(phases[actPhase]);\n      actPhase += 1;\n      // shifted by one since already added through ++\n      if (actPhase < phases.length) {\n        // schedule the next one\n        const next = phases[actPhase];\n        // eslint-disable-next-line no-restricted-globals\n        currentTimer = self.setTimeout(run, next.delay);\n        return;\n      }\n\n      // last one\n      const body = this.body.classList;\n      Array.from(body).forEach((v) => {\n        if (v.startsWith(cssClass()) && v.endsWith('-animation')) {\n          body.remove(v);\n        }\n      });\n      // clean up\n      activeAnimation.forEach(({ node, mode }) => {\n        if (mode !== EAnimationMode.UPDATE_REMOVE && mode !== EAnimationMode.HIDE) {\n          return;\n        }\n        node.remove();\n        // eslint-disable-next-line no-param-reassign\n        node.style.transform = '';\n        this.recycle(node);\n      });\n      this.abortAnimation = () => undefined;\n      currentTimer = -1;\n    };\n\n    // execute all phases having a delay of zero\n    while (phases[actPhase].delay === 0) {\n      executePhase(phases[actPhase]);\n      actPhase += 1;\n    }\n    // after the initial one\n    const { body } = this;\n    this.body.appendChild(fragment);\n\n    const dummyAnimation: IAnimationItem[] = [];\n    activeAnimation = activeAnimation.filter((d) => {\n      if (noAnimationChange(d, previousFinder.context.defaultRowHeight, currentFinder.context.defaultRowHeight)) {\n        dummyAnimation.push(d);\n        return false;\n      }\n      return true;\n    });\n\n    if (dummyAnimation.length > 0) {\n      // execute all phases for them\n      phases.slice(actPhase).forEach((phase) => executePhase(phase, dummyAnimation));\n    }\n\n    if (activeAnimation.length === 0) {\n      return;\n    }\n\n    body.classList.add(CSS_CLASS_ROW_ANIMATION);\n    new Set(activeAnimation.map((d) => d.mode)).forEach((mode) => {\n      // add class but map to UPDATE only\n      body.classList.add(cssClass(`${EAnimationMode[mode].toLowerCase().split('_')[0]}-animation`));\n    });\n\n    this.abortAnimation = () => {\n      if (currentTimer <= 0) {\n        return;\n      }\n      // abort by removing\n      clearTimeout(currentTimer);\n      currentTimer = -1;\n      // run the last phase\n      actPhase = phases.length - 1;\n      run();\n    };\n\n    // next tick such that DOM will be updated\n    // eslint-disable-next-line no-restricted-globals\n    currentTimer = self.setTimeout(run, phases[actPhase].delay);\n  }\n\n  /**\n   * clears the row pool used for faster creation\n   */\n  protected clearPool(): void {\n    // clear pool\n    this.pool.splice(0, this.pool.length);\n  }\n\n  /**\n   * triggers a revalidation of the current scrolling offset\n   */\n  protected revalidate(): void {\n    const scroller = this.bodyScroller;\n    this.onScrolledVertically(scroller.scrollTop, scroller.clientHeight, true);\n    this.updateOffset(this.visibleFirstRowPos);\n  }\n\n  /**\n   * scrolling vertically\n   * @param {number} scrollTop top scrolling\n   * @param {number} clientHeight visible height\n   * @param {boolean} isGoingDown hint whether the scrollTop increases\n   * @return {EScrollResult} full in case of a full rebuild or partial update\n   */\n  protected onScrolledVertically(scrollTop: number, clientHeight: number, isGoingDown: boolean): EScrollResult {\n    const shift = this.options.viewportOversize;\n\n    const shiftTop = Math.max(0, scrollTop - shift);\n\n    const scrollResult = this.onScrolledImpl(shiftTop, clientHeight + shift + (scrollTop - shiftTop));\n    for (const mixin of this.mixins) {\n      mixin.onScrolled(isGoingDown, scrollResult);\n    }\n    return scrollResult;\n  }\n\n  private shiftLast(current: number, currentDelta: number) {\n    const b = this.options.batchSize;\n    if (currentDelta >= b) {\n      return current;\n    }\n    const total = this.context.numberOfRows;\n    return Math.min(total - 1, current + (this.options.batchSize - currentDelta));\n  }\n\n  private shiftFirst(current: number, currentFirstRow: number, currentDelta: number) {\n    const b = this.options.batchSize;\n    if (currentDelta >= b || current <= 0) {\n      return { first: current, firstRowPos: currentFirstRow };\n    }\n    const first = Math.max(0, current - (this.options.batchSize - currentDelta));\n\n    const { exceptionsLookup, defaultRowHeight } = this.context;\n    let firstRowPos = currentFirstRow;\n    for (let i = first; i < current; i += 1) {\n      firstRowPos -= exceptionsLookup.get(i) ?? defaultRowHeight;\n    }\n    return { first, firstRowPos };\n  }\n\n  private onScrolledImpl(scrollTop: number, clientHeight: number): EScrollResult {\n    const { context } = this;\n    let { first, last, firstRowPos } = range(\n      scrollTop,\n      clientHeight,\n      context.defaultRowHeight,\n      context.exceptions,\n      context.numberOfRows\n    );\n\n    const { visible } = this;\n    visible.forcedFirst = first;\n    visible.forcedLast = last;\n\n    if (first - visible.first >= 0 && last - visible.last <= 0) {\n      // nothing to do\n      return EScrollResult.NONE;\n    }\n\n    let r: EScrollResult = EScrollResult.SOME;\n\n    let toRecycle: HTMLElement[] | undefined;\n    let toAdd: DocumentFragment | undefined | null;\n    let toAddBottom = false;\n\n    if (first > visible.last || last < visible.first) {\n      // no overlap, clean and draw everything\n      // console.log(`ff added: ${last - first + 1} removed: ${visibleLast - visibleFirst + 1} ${first}:${last} ${offset}`);\n      // removeRows(visibleFirst, visibleLast);\n\n      toRecycle = this.removeAll(false);\n      toAdd = this.addAtBottom(first, last, false);\n      toAddBottom = true;\n      r = EScrollResult.ALL;\n    } else if (first < visible.first) {\n      // some first rows missing and some last rows to much\n      // console.log(`up added: ${visibleFirst - first + 1} removed: ${visibleLast - last + 1} ${first}:${last} ${offset}`);\n      const toRemove = visible.last - (last + 1);\n      if (toRemove >= this.options.batchSize) {\n        toRecycle = this.removeFromBottom(last + 1, visible.last, false);\n      } else {\n        last = visible.last;\n      }\n\n      const shift = this.shiftFirst(first, firstRowPos, visible.first - 1 - first);\n      first = shift.first;\n      firstRowPos = shift.firstRowPos;\n      toAdd = this.addAtBeginning(first, visible.first - 1, false);\n      toAddBottom = false;\n      r = EScrollResult.SOME_TOP;\n    } else {\n      // console.log(`do added: ${last - visibleLast + 1} removed: ${first - visibleFirst + 1} ${first}:${last} ${offset}`);\n      // some last rows missing and some first rows to much\n      const toRemove = first - 1 - visible.first;\n      if (toRemove >= this.options.batchSize) {\n        toRecycle = this.removeFromBeginning(visible.first, first - 1, false);\n      } else {\n        first = visible.first;\n        firstRowPos = this.visibleFirstRowPos;\n      }\n\n      last = this.shiftLast(last, last - visible.last + 1);\n\n      toAdd = this.addAtBottom(visible.last + 1, last, false);\n      toAddBottom = true;\n      r = EScrollResult.SOME_BOTTOM;\n    }\n\n    visible.first = first;\n    visible.last = last;\n\n    this.updateOffset(firstRowPos);\n    this.manipulate(toRecycle, toAdd, toAddBottom);\n    return r;\n  }\n\n  private manipulate(\n    toRecycle: HTMLElement[] | undefined,\n    toAdd: DocumentFragment | undefined | null,\n    bottom: boolean\n  ) {\n    if (toRecycle) {\n      for (const item of toRecycle) {\n        item.remove();\n        this.recycle(item);\n      }\n    }\n    if (!toAdd) {\n      return;\n    }\n    if (bottom) {\n      this.body.appendChild(toAdd);\n    } else {\n      this.body.insertBefore(toAdd, this.body.firstChild);\n    }\n  }\n}\n\nexport default ARowRenderer;\n\nexport function setTransform(elem: HTMLElement, x: number | string, y: number | string): void {\n  const text = `translate(${x}px, ${y}px)`;\n  const anyElem = elem as { __transform__?: string };\n  // eslint-disable-next-line no-underscore-dangle\n  if (anyElem.__transform__ === text) {\n    return;\n  }\n  // eslint-disable-next-line no-underscore-dangle\n  anyElem.__transform__ = text;\n  // eslint-disable-next-line no-param-reassign\n  elem.style.transform = text;\n}\n","// import manually import './style.scss';\n\n/**\n * utility for custom generated CSS rules\n */\n\ninterface ICSSRule {\n  id: string;\n  selector: string;\n  style: Partial<CSSStyleDeclaration>;\n}\n\nfunction assignStyles(target: CSSStyleDeclaration, source: Record<string, unknown>) {\n  const targetObj = target as unknown as Record<string, unknown>;\n  for (const key of Object.keys(source)) {\n    const v = source[key] as string;\n\n    if (!v.endsWith(' !important')) {\n      if (targetObj[key] !== v) {\n        // eslint-disable-next-line no-param-reassign\n        targetObj[key] = v;\n      }\n      continue;\n    }\n\n    // handle special important case\n    const plain = v.slice(0, -' !important'.length);\n    if (targetObj[key] === plain) {\n      continue;\n    }\n    // eslint-disable-next-line no-param-reassign\n    targetObj[key] = plain;\n    // see https://gist.github.com/youssman/745578062609e8acac9f\n    const hyphen = key.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();\n    target.setProperty(hyphen, plain, 'important');\n  }\n}\n\nexport default class StyleManager {\n  private readonly rules: ICSSRule[] = [];\n\n  private readonly node: HTMLStyleElement;\n\n  private testVerifyTimeout = -1;\n\n  /**\n   * the parent element to append this managed style\n   * @param {HTMLElement} root\n   */\n  constructor(root: HTMLElement) {\n    this.node = root.ownerDocument.createElement('style');\n    this.node.appendChild(root.ownerDocument.createTextNode('')); // for webkit?\n    root.appendChild(this.node);\n  }\n\n  destroy(): void {\n    this.node.remove();\n  }\n\n  private verifySheet() {\n    const { sheet } = this;\n    if (!sheet) {\n      if (this.testVerifyTimeout >= 0) {\n        return;\n      }\n      // test till attached\n      // eslint-disable-next-line no-restricted-globals\n      this.testVerifyTimeout = self.setTimeout(() => {\n        this.testVerifyTimeout = -1;\n        this.verifySheet();\n      }, 20);\n      return;\n    }\n    const rules = sheet.cssRules;\n    if (\n      rules.length === this.rules.length &&\n      this.rules.every((d, i) => (rules[i] as CSSStyleRule).selectorText === d.selector)\n    ) {\n      // same\n      return;\n    }\n\n    // console.warn('invalid sheet rules detected');\n\n    const l = rules.length;\n    for (let i = l - 1; i >= 0; i -= 1) {\n      sheet.deleteRule(i);\n    }\n\n    // create all\n    for (const rule of this.rules) {\n      const index = sheet.insertRule(`${rule.selector} {}`, sheet.cssRules.length);\n      const cssRule = sheet.cssRules[index] as CSSStyleRule;\n      rule.selector = cssRule.selectorText;\n      assignStyles(cssRule.style, rule.style);\n    }\n  }\n\n  private get sheet() {\n    return this.node.sheet as CSSStyleSheet | null;\n  }\n\n  private getSheetRule(index: number) {\n    const { sheet } = this;\n    return sheet ? (sheet.cssRules[index] as CSSStyleRule) : null;\n  }\n\n  /**\n   * add a custom css rule\n   * @param {string} id unique id of the rule for later identification\n   * @param {string} selector the css selector\n   * @param {Partial<CSSStyleDeclaration>} style the style attributes\n   * @returns {string} the id again\n   */\n  addRule(id: string, selector: string, style: Partial<CSSStyleDeclaration>): string | null {\n    this.verifySheet();\n    const { sheet } = this;\n    if (!sheet) {\n      // upon next update\n      this.rules.push({ id, selector, style });\n      return null;\n    }\n    const index = sheet.insertRule(`${selector} {}`, sheet.cssRules.length);\n    const rule = sheet.cssRules[index] as CSSStyleRule;\n    this.rules.push({ id, selector: rule.selectorText, style });\n    assignStyles(rule.style, style);\n    return id;\n  }\n\n  /**\n   * updates or add a rule, see @addRule\n   * @param {string} id unique id of the rule for later identification\n   * @param {string} selector the css selector\n   * @param {Partial<CSSStyleDeclaration>} style the style attributes\n   * @returns {string} the id again\n   */\n  updateRule(id: string, selector: string, style: Partial<CSSStyleDeclaration>): string | null {\n    this.verifySheet();\n    const index = this.rules.findIndex((d) => d.id === id);\n    if (index < 0) {\n      return this.addRule(id, selector, style);\n    }\n    const stored = this.rules[index];\n    stored.selector = selector;\n    stored.style = style;\n\n    const rule = this.getSheetRule(index);\n    if (rule) {\n      if (rule.selectorText.replace(/\\s/gm, '') !== selector.replace(/\\s/gm, '')) {\n        // ignoring white space\n        rule.selectorText = selector;\n        stored.selector = rule.selectorText;\n      }\n      assignStyles(rule.style, style);\n    }\n    return id;\n  }\n\n  /**\n   * deletes the given rule by id\n   * @param {string} id the rule to delete\n   */\n  deleteRule(id: string): void {\n    this.verifySheet();\n    const index = this.rules.findIndex((d) => d.id === id);\n    if (index < 0) {\n      return;\n    }\n    this.rules.splice(index, 1);\n    const { sheet } = this;\n    if (sheet) {\n      sheet.deleteRule(index);\n    }\n  }\n\n  /**\n   * get a list of all registered rule ids\n   */\n  protected get ruleNames(): string[] {\n    return this.rules.map((d) => d.id);\n  }\n}\n","import { addScroll } from '../internal';\nimport {\n  cssClass,\n  CSS_CLASS_BODY,\n  CSS_CLASS_FOOTER,\n  CSS_CLASS_HEADER,\n  CSS_CLASS_SCROLLBAR_TESTER,\n  CSS_CLASS_SHIFTED,\n  CSS_CLASS_TBODY,\n  CSS_CLASS_THEAD,\n} from '../styles';\nimport StyleManager from './StyleManager';\n\nexport function setTemplate(root: HTMLElement, id: string): HTMLElement {\n  const cleanId = id.startsWith('#') ? id.slice(1) : id;\n  // eslint-disable-next-line no-param-reassign\n  root.innerHTML = `\n  <header id=\"header-${cleanId}\" class=\"${CSS_CLASS_HEADER} ${cssClass(`header-${cleanId}`)}\">\n    <article class=\"${CSS_CLASS_THEAD} ${cssClass(`thead-${cleanId}`)}\"></article>\n  </header>\n  <main id=\"body-${cleanId}\" class=\"${CSS_CLASS_BODY} ${cssClass(`body-${cleanId}`)}\">\n    <footer class=\"${CSS_CLASS_FOOTER}\">&nbsp;</footer>\n    <article class=\"${CSS_CLASS_TBODY} ${cssClass(`tbody-${cleanId}`)}\"></article>\n  </main>`;\n  return root;\n}\n\n/**\n * column base interface\n */\nexport interface IColumn {\n  readonly index: number;\n  readonly id: string;\n  readonly width: number;\n  /**\n   * boolean flag whether when scrolling the column should be sticky\n   */\n  readonly frozen: boolean;\n}\n\ninterface ISelectors {\n  thead: string;\n  tbody: string;\n  tr: string;\n  th: string;\n  td: string;\n}\n\n/**\n * generates the HTML Ids used for the header and body article of a table\n * @param {string} tableId base table id\n * @param {boolean} asSelector flag whether to prepend with # for CSS selector\n * @return {ISelectors} the table ids used for header and body\n */\nexport function tableIds(tableId: string): { thead: string; tbody: string; tr: string; th: string; td: string } {\n  return {\n    thead: `thead-${tableId}`,\n    tbody: `tbody-${tableId}`,\n    tr: `tr-${tableId}`,\n    th: `th-${tableId}`,\n    td: `td-${tableId}`,\n  };\n}\n\nexport function tableCSSClasses(tableId: string): { thead: string; tbody: string; tr: string; th: string; td: string } {\n  const ids = tableIds(tableId);\n  return {\n    thead: cssClass(ids.thead),\n    tbody: cssClass(ids.tbody),\n    tr: cssClass(ids.tr),\n    th: cssClass(ids.th),\n    td: cssClass(ids.td),\n  };\n}\n\n/**\n * utility for custom generated CSS rules with a focus on dynamically generated grid layouts\n */\nexport default class GridStyleManager extends StyleManager {\n  readonly id: string;\n\n  readonly ids: ISelectors;\n\n  readonly cssClasses: ISelectors;\n\n  constructor(root: HTMLElement, id: string) {\n    super(root);\n    this.id = id.startsWith('#') ? id.slice(1) : id;\n\n    this.ids = tableIds(this.id);\n    this.cssClasses = tableCSSClasses(this.id);\n\n    const headerScroller = root.getElementsByTagName('header')[0] as HTMLElement;\n    const bodyScroller = root.getElementsByTagName('main')[0] as HTMLElement;\n\n    // async since style needs to be added to dom first\n    // eslint-disable-next-line no-restricted-globals\n    self.setTimeout(() => {\n      const { width } = measureScrollbar(root);\n      this.updateRule('__scrollBarFix2', `#header-${this.id} > article:last-of-type`, {\n        borderRight: `${width}px solid transparent`,\n      });\n    }, 20);\n\n    let old = headerScroller.scrollLeft;\n\n    // update frozen and sync header with body\n    addScroll(bodyScroller, 'animation', (act) => {\n      const newValue = act.left;\n      if (old !== newValue) {\n        headerScroller.scrollLeft = newValue;\n        old = newValue;\n      }\n      root.classList.toggle(CSS_CLASS_SHIFTED, act.left > 0);\n    });\n  }\n\n  /**\n   * updates the column widths and default row height for a table\n   * @param {number} defaultRowHeight\n   * @param {IColumn[]} columns\n   * @param {number} frozenShift shift frozen columns\n   * @param {string} tableId optional tableId in case of multiple tables within the same engine\n   * @param {string} unit\n   */\n  update(\n    defaultRowHeight: number,\n    columns: IColumn[],\n    padding: (index: number) => number,\n    frozenShift: number,\n    tableId: string,\n    unit = 'px'\n  ): void {\n    const ids = tableIds(tableId);\n    const selectors = tableCSSClasses(tableId);\n\n    const total = `${columns.reduce((a, b, i) => a + b.width + padding(i), 0)}${unit}`;\n\n    this.updateRule(`__heightsRule${selectors.tr}`, `.${selectors.tr}`, {\n      height: `${defaultRowHeight}px`,\n      width: total,\n    });\n\n    this.updateRule(`__heightsRule${selectors.tbody}`, `#${ids.tbody}`, {\n      width: total,\n    });\n\n    this.updateColumns(columns, padding, selectors, frozenShift, unit);\n  }\n\n  /**\n   * removes a given tableId if not needed anymore\n   * @param {string} tableId tableId to remove\n   */\n  remove(tableId: string): void {\n    const selectors = tableCSSClasses(tableId);\n    this.deleteRule(`__heightsRule${selectors.tr}`);\n    this.deleteRule(`__heightsRule${selectors.tbody}`);\n\n    const prefix = `__col${selectors.td}_`;\n    const rules = this.ruleNames.reduce((a, b) => a + (b.startsWith(prefix) ? 1 : 0), 0);\n    // reset\n    for (let i = 0; i < rules; i += 1) {\n      this.deleteRule(`${prefix}${i}`);\n    }\n  }\n\n  private updateColumns(\n    columns: IColumn[],\n    padding: (index: number) => number,\n    cssSelectors: ISelectors,\n    frozenShift: number,\n    unit = 'px'\n  ): void {\n    const prefix = `__col${cssSelectors.td}_`;\n    const rules = new Set(this.ruleNames.filter((d) => d.startsWith(prefix)));\n\n    let acc = 0;\n    columns.forEach((c, i) => {\n      const th = `.${cssSelectors.th}[data-id=\"${c.id}\"]`;\n      const thStyles: Partial<CSSStyleDeclaration> = {\n        width: `${c.width}${unit}`,\n      };\n      const td = `.${cssSelectors.td}[data-id=\"${c.id}\"]`;\n      const tdStyles: Partial<CSSStyleDeclaration> = {\n        transform: `translateX(${acc}${unit})`,\n        width: `${c.width}${unit}`,\n      };\n\n      if (c.frozen) {\n        thStyles.left = `${acc}px`;\n\n        this.updateRule(`${prefix}${td}F`, `.${cssSelectors.td}.${CSS_CLASS_SHIFTED}[data-id=\"${c.id}\"]`, {\n          transform: `translateX(0)`,\n          left: `${acc + frozenShift}${unit}`,\n        });\n        rules.delete(`${prefix}${td}F`);\n      }\n\n      this.updateRule(`${prefix}${th}`, th, thStyles);\n      rules.delete(`${prefix}${th}`);\n      this.updateRule(`${prefix}${td}`, td, tdStyles);\n      rules.delete(`${prefix}${td}`);\n      acc += c.width + padding(i);\n    });\n\n    rules.forEach((d) => this.deleteRule(d));\n  }\n}\n/**\n * measure the width and height of the scrollbars\n * based on Slick grid implementation\n * @param root\n */\nfunction measureScrollbar(root: HTMLElement) {\n  const body = root.ownerDocument?.body;\n  if (!body) {\n    return { width: 10, height: 10 };\n  }\n  body.insertAdjacentHTML('beforeend', `<div class=\"${CSS_CLASS_SCROLLBAR_TESTER}\"><div></div></div>`);\n  const elem = body.lastElementChild as HTMLElement;\n\n  const width = elem.offsetWidth - elem.clientWidth;\n  const height = elem.offsetHeight - elem.clientHeight;\n\n  elem.remove();\n\n  return { width, height };\n}\n","import { ABORTED, IAbortAblePromise, IAsyncUpdate, isAbortAble, isAsyncUpdate } from '../../abortAble';\nimport { isLoadingCell } from '../../ARowRenderer';\nimport { clear, IScrollInfo } from '../../internal';\nimport { isScrollEventWaiting } from '../../internal/scroll';\nimport { IExceptionContext, range, updateFrozen } from '../../logic';\nimport { EScrollResult, IMixin, IMixinAdapter, IMixinClass } from '../../mixin';\nimport { IColumn } from '../../style';\nimport GridStyleManager from '../../style/GridStyleManager';\nimport {\n  cssClass,\n  CSS_CLASS_FROZEN,\n  CSS_CLASS_LOADING,\n  CSS_CLASS_SHIFTED,\n  CSS_CLASS_TD,\n  CSS_CLASS_TH,\n} from '../../styles';\n\n// const debug = false;\n\nexport interface ICellAdapterRenderContext<T extends IColumn> extends IExceptionContext {\n  readonly column: IExceptionContext;\n  readonly columns: T[];\n}\n\nexport interface IVisibleColumns {\n  frozen: number[];\n  first: number;\n  forcedFirst: number;\n  last: number;\n  forcedLast: number;\n}\n\n/**\n * @internal\n */\nexport abstract class ACellAdapter<T extends IColumn> {\n  /**\n   * pool of cells per column\n   * @type {Array}\n   */\n  private readonly cellPool: HTMLElement[][] = [];\n\n  private readonly loading = new WeakMap<HTMLElement, IAbortAblePromise<void>>();\n\n  readonly visibleColumns: IVisibleColumns = {\n    frozen: [] as number[], // column indices that are visible even tho they would be out of range\n    first: 0,\n    forcedFirst: 0,\n    last: -1,\n    forcedLast: -1,\n  };\n\n  visibleFirstColumnPos = 0;\n\n  private horizontallyShifted = false;\n\n  private readonly columnAdapter: IMixinAdapter;\n\n  private readonly columnMixins: IMixin[];\n\n  private readonly columnFragment: DocumentFragment;\n\n  constructor(\n    protected readonly header: HTMLElement,\n    protected readonly style: GridStyleManager,\n    private readonly tableId: string,\n    mixinClasses: IMixinClass[] = []\n  ) {\n    this.columnAdapter = this.createColumnAdapter();\n    this.columnMixins = mixinClasses.map((MixinClass) => new MixinClass(this.columnAdapter));\n\n    this.columnFragment = header.ownerDocument.createDocumentFragment();\n  }\n\n  leftShift(): number {\n    const ctx = this.context;\n    const frozen = this.visibleColumns.frozen.reduce((a, d) => a + ctx.columns[d].width + ctx.column.padding(d), 0);\n    return this.visibleFirstColumnPos - frozen;\n  }\n\n  protected get headerScroller(): HTMLElement {\n    return this.header.parentElement as HTMLElement;\n  }\n\n  addColumnMixin(MixinClass: IMixinClass, options?: unknown): void {\n    this.columnMixins.push(new MixinClass(this.columnAdapter, options));\n  }\n\n  private createColumnAdapter(): IMixinAdapter {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n    const r = {\n      visible: this.visibleColumns,\n      addAtBeginning: this.addColumnAtStart.bind(this),\n      addAtBottom: this.addColumnAtEnd.bind(this),\n      removeFromBeginning: this.removeColumnFromStart.bind(this),\n      removeFromBottom: this.removeColumnFromEnd.bind(this),\n      updateOffset: this.updateColumnOffset.bind(this),\n      scroller: this.headerScroller,\n      syncFrozen: this.syncFrozen.bind(this),\n      isScrollEventWaiting: () => isScrollEventWaiting(this.headerScroller, 'animation'),\n      get visibleFirstRowPos() {\n        return that.visibleFirstColumnPos;\n      },\n      get context() {\n        return that.context.column;\n      },\n      get scrollOffset() {\n        return that.lastScrollInfo ? that.lastScrollInfo.left : 0;\n      },\n      get scrollTotal() {\n        return that.lastScrollInfo ? that.lastScrollInfo.width : that.headerScroller.clientWidth;\n      },\n    };\n    return r;\n  }\n\n  init(): void {\n    const { context } = this;\n    this.style.update(\n      context.defaultRowHeight - context.padding(-1),\n      context.columns,\n      context.column.padding,\n      0,\n      this.tableId\n    );\n\n    context.columns.forEach(() => {\n      // init pool\n      this.cellPool.push([]);\n    });\n  }\n\n  onScrolledHorizontally(scrollLeft: number, clientWidth: number, isGoingRight: boolean): EScrollResult {\n    const scrollResult = this.onScrolledHorizontallyImpl(scrollLeft, clientWidth);\n    for (const mixin of this.columnMixins) {\n      mixin.onScrolled(isGoingRight, scrollResult);\n    }\n    return scrollResult;\n  }\n\n  /**\n   * the current render context, upon change `recreate` the whole table\n   * @returns {ICellRenderContext}\n   */\n  protected abstract get context(): ICellAdapterRenderContext<T>;\n\n  protected abstract get body(): HTMLElement;\n\n  protected abstract get lastScrollInfo(): IScrollInfo | null;\n\n  protected abstract createHeader(document: Document, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  protected abstract updateHeader(node: HTMLElement, column: T): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  protected abstract createCell(document: Document, index: number, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  protected abstract updateCell(\n    node: HTMLElement,\n    index: number,\n    column: T\n  ): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  protected abstract forEachRow(callback: (row: HTMLElement, rowIndex: number) => void): void;\n\n  private removeColumnFromStart(from: number, to: number, frozenShift: number = this.visibleColumns.frozen.length) {\n    this.forEachRow((row: HTMLElement) => {\n      this.removeCellFromStart(row, from, to, frozenShift);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private removeCellFromStart(row: HTMLElement, from: number, to: number, frozenShift: number) {\n    for (let i = from; i <= to; i += 1) {\n      const node = (frozenShift === 0 ? row.firstElementChild : row.children[frozenShift]) as HTMLElement;\n      node.remove();\n      this.recycleCell(node, i);\n    }\n    // if (debug) {\n    //   verifyRow(row, -1, this.context.columns);\n    // }\n  }\n\n  private removeColumnFromEnd(from: number, to: number) {\n    this.forEachRow((row: HTMLElement) => {\n      this.removeCellFromEnd(row, from, to);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private removeCellFromEnd(row: HTMLElement, from: number, to: number) {\n    for (let i = to; i >= from; i -= 1) {\n      const node = row.lastElementChild as HTMLElement;\n      node.remove();\n      this.recycleCell(node, i);\n    }\n    // if (debug) {\n    //   verifyRow(row, -1, this.context.columns);\n    // }\n  }\n\n  private removeFrozenCells(row: HTMLElement, columnIndices: number[], shift: number) {\n    for (const columnIndex of columnIndices) {\n      const node = row.children[shift] as HTMLElement;\n      node.remove();\n      this.recycleCell(node, columnIndex);\n    }\n    // if (debug) {\n    //   verifyRow(row, -1, this.context.columns);\n    // }\n  }\n\n  private removeFrozenColumns(columnIndices: number[], shift: number) {\n    this.forEachRow((row: HTMLElement) => {\n      this.removeFrozenCells(row, columnIndices, shift);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private removeAllColumns(includingFrozen: boolean) {\n    this.forEachRow((row: HTMLElement) => {\n      this.removeAllCells(row, includingFrozen);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private removeAllCells(row: HTMLElement, includingFrozen: boolean, shift = this.visibleColumns.first) {\n    const arr = Array.from(row.children) as HTMLElement[];\n    const { frozen } = this.visibleColumns;\n    clear(row);\n\n    if (includingFrozen || frozen.length === 0) {\n      for (const i of frozen) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.recycleCell(arr.shift()!, i);\n      }\n    } else {\n      // have frozen and keep them, so readd them\n      for (let i = 0; i < frozen.length; i += 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        row.appendChild(arr.shift()!);\n      }\n    }\n    arr.forEach((item, i) => {\n      this.recycleCell(item, i + shift);\n    });\n\n    // if (debug) {\n    //   verifyRow(row, -1, this.context.columns);\n    // }\n  }\n\n  private selectProxyCell(\n    row: number,\n    column: number,\n    columns: T[]\n  ): { item: HTMLElement; ready: IAbortAblePromise<void> | undefined } {\n    const pool = this.cellPool[column];\n    const columnObj = columns[column];\n\n    let item: HTMLElement;\n    let ready: IAbortAblePromise<void> | undefined = undefined;\n    const pooled = pool.pop();\n\n    const r = pooled\n      ? this.updateCell(pooled, row, columnObj) || pooled\n      : this.createCell(this.header.ownerDocument, row, columnObj);\n    if (isAsyncUpdate(r)) {\n      item = r.item;\n      ready = r.ready;\n    } else {\n      item = r;\n    }\n    if (item !== pooled) {\n      item.dataset.id = columnObj.id;\n      item.classList.add(CSS_CLASS_TD, this.style.cssClasses.td, cssClass(`td-${this.tableId}`));\n    }\n    this.updateShiftedState(item, columnObj);\n    return { item, ready };\n  }\n\n  handleCellReady(item: HTMLElement, ready: IAbortAblePromise<void>, column = -1): HTMLElement {\n    item.classList.add(CSS_CLASS_LOADING);\n    const abort = ready;\n    // lazy loading\n\n    this.loading.set(item, abort);\n    abort.then((result) => {\n      this.loading.delete(item);\n      item.classList.remove(CSS_CLASS_LOADING);\n      if (result === ABORTED && column >= 0) {\n        // aborted can recycle the real one\n        this.cellPool[column].push(item);\n      }\n    });\n    return item;\n  }\n\n  private selectCell(row: number, column: number, columns: T[]): HTMLElement {\n    const { item, ready } = this.selectProxyCell(row, column, columns);\n    if (!isAbortAble(ready)) {\n      return item;\n    }\n    return this.handleCellReady(item, ready, column);\n  }\n\n  protected updateShiftedState(node: HTMLElement, col: IColumn): void {\n    node.classList.toggle(CSS_CLASS_SHIFTED, col.frozen && this.horizontallyShifted);\n  }\n\n  recycleCell(item: HTMLElement, column = -1): void {\n    // check if the dom element is still being manipulated\n    const abort = this.loading.get(item);\n    if (abort != null) {\n      abort.abort();\n    } else if (!isLoadingCell(item) && column >= 0) {\n      this.cellPool[column].push(item);\n    }\n  }\n\n  private addColumnAtStart(from: number, to: number, frozenShift: number = this.visibleColumns.frozen.length) {\n    const { columns } = this.context;\n    this.forEachRow((row: HTMLElement, rowIndex: number) => {\n      this.addCellAtStart(row, rowIndex, from, to, frozenShift, columns);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private addCellAtStart(\n    row: HTMLElement,\n    rowIndex: number,\n    from: number,\n    to: number,\n    frozenShift: number,\n    columns: T[]\n  ) {\n    // if (debug) {\n    //   verifyRow(row, rowIndex, this.context.columns);\n    // }\n    for (let i = to; i >= from; i -= 1) {\n      const cell = this.selectCell(rowIndex, i, columns);\n      row.insertBefore(cell, frozenShift > 0 ? row.children[frozenShift] : row.firstChild);\n    }\n    // if (debug) {\n    //   verifyRow(row, rowIndex, this.context.columns);\n    // }\n  }\n\n  private insertFrozenCells(row: HTMLElement, rowIndex: number, columnIndices: number[], shift: number, columns: T[]) {\n    const before = row.children[shift];\n    for (const i of columnIndices) {\n      const cell = this.selectCell(rowIndex, i, columns);\n      if (before) {\n        row.insertBefore(cell, before);\n      } else {\n        row.appendChild(cell);\n      }\n    }\n  }\n\n  private insertFrozenColumns(columnIndices: number[], shift: number) {\n    const { columns } = this.context;\n    this.forEachRow((row: HTMLElement, rowIndex: number) => {\n      this.insertFrozenCells(row, rowIndex, columnIndices, shift, columns);\n    });\n  }\n\n  private addColumnAtEnd(from: number, to: number) {\n    const { columns } = this.context;\n    this.forEachRow((row: HTMLElement, rowIndex: number) => {\n      this.addCellAtEnd(row, rowIndex, from, to, columns);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  // private verifyRows() {\n  //   const { columns } = this.context;\n  //   this.forEachRow((row, rowIndex) => verifyRow(row, rowIndex, columns));\n  // }\n\n  private addCellAtEnd(row: HTMLElement, rowIndex: number, from: number, to: number, columns: T[]) {\n    for (let i = from; i <= to; i += 1) {\n      const cell = this.selectCell(rowIndex, i, columns);\n      row.appendChild(cell);\n    }\n    // if (debug) {\n    //   verifyRow(row, rowIndex, this.context.columns);\n    // }\n  }\n\n  updateHeaders(): void {\n    const { columns } = this.context;\n    Array.from(this.header.children).forEach((node: Element, i) => {\n      const base = node as HTMLElement;\n      const col = columns[i];\n      const r = this.updateHeader(base, col);\n      let n: HTMLElement;\n      if (isAsyncUpdate(r)) {\n        n = this.handleCellReady(r.item, r.ready, -1);\n      } else {\n        n = r || base;\n      }\n      if (n === base) {\n        return;\n      }\n      n.dataset.id = col.id;\n      n.classList.add(CSS_CLASS_TH, this.style.cssClasses.th, cssClass(`th-${this.tableId}`));\n      this.header.replaceChild(base, n);\n    });\n  }\n\n  recreate(left: number, width: number): void {\n    const { context } = this;\n\n    this.style.update(\n      context.defaultRowHeight - context.padding(-1),\n      context.columns,\n      context.column.padding,\n      0,\n      this.tableId\n    );\n\n    this.clearPool();\n    // init pool\n    for (let i = this.cellPool.length; i < context.columns.length; i += 1) {\n      this.cellPool.push([]);\n    }\n\n    // create all header columns\n    {\n      const fragment = this.columnFragment;\n      const document = fragment.ownerDocument;\n\n      // create lookup cache to reuse headers\n      const ids = new Map<string, HTMLElement>();\n      while (this.header.lastChild) {\n        const c = this.header.lastChild as HTMLElement;\n        this.header.removeChild(c);\n        ids.set(c.dataset.id ?? '', c);\n      }\n\n      context.columns.forEach((col) => {\n        const existing = ids.get(col.id);\n        const r = existing ? this.updateHeader(existing, col) || existing : this.createHeader(document, col);\n        let n: HTMLElement;\n        if (isAsyncUpdate(r)) {\n          n = this.handleCellReady(r.item, r.ready, -1);\n        } else {\n          n = r;\n        }\n        if (n !== existing) {\n          n.dataset.id = col.id;\n          n.classList.add(CSS_CLASS_TH, this.style.cssClasses.th, cssClass(`th-${this.tableId}`));\n        }\n        fragment.appendChild(n);\n      });\n      this.header.appendChild(fragment);\n    }\n\n    const { first, last, firstRowPos } = range(\n      left,\n      width,\n      context.column.defaultRowHeight,\n      context.column.exceptions,\n      context.column.numberOfRows\n    );\n\n    this.visibleColumns.first = first;\n    this.visibleColumns.forcedFirst = first;\n    this.visibleColumns.last = last;\n    this.visibleColumns.forcedLast = last;\n\n    if (context.columns.some((c) => c.frozen)) {\n      const { target } = updateFrozen([], context.columns, first);\n      this.visibleColumns.frozen = target;\n    } else {\n      this.visibleColumns.frozen = [];\n    }\n    this.updateColumnOffset(firstRowPos);\n  }\n\n  clearPool(): void {\n    this.cellPool.forEach((p) => p.splice(0, p.length));\n  }\n\n  protected updateColumnOffset(firstColumnPos: number): void {\n    const changed = firstColumnPos !== this.visibleFirstColumnPos;\n    this.visibleFirstColumnPos = firstColumnPos;\n    if (changed) {\n      const { context } = this;\n      this.style.update(\n        context.defaultRowHeight - context.padding(-1),\n        context.columns,\n        context.column.padding,\n        0,\n        this.tableId\n      );\n    }\n  }\n\n  createRow(node: HTMLElement, rowIndex: number): void {\n    const { columns } = this.context;\n    const visible = this.visibleColumns;\n\n    if (visible.frozen.length > 0) {\n      for (const i of visible.frozen) {\n        const cell = this.selectCell(rowIndex, i, columns);\n        node.appendChild(cell);\n      }\n    }\n    for (let i = visible.first; i <= visible.last; i += 1) {\n      const cell = this.selectCell(rowIndex, i, columns);\n      node.appendChild(cell);\n    }\n  }\n\n  updateRow(node: HTMLElement, rowIndex: number): void {\n    const { columns } = this.context;\n    const visible = this.visibleColumns;\n\n    // columns may not match anymore if it is a pooled item a long time ago\n\n    switch (node.childElementCount) {\n      case 0:\n        if (visible.frozen.length > 0) {\n          this.insertFrozenCells(node, rowIndex, visible.frozen, 0, columns);\n        }\n        this.addCellAtEnd(node, rowIndex, visible.first, visible.last, columns);\n        break;\n      case 1: {\n        const old = node.firstElementChild as HTMLElement;\n        const id = old.dataset.id ?? '';\n        const columnIndex = columns.findIndex((c) => c.id === id);\n        node.removeChild(old);\n        if (columnIndex >= 0) {\n          this.recycleCell(old, columnIndex);\n        }\n\n        if (visible.frozen.length > 0) {\n          this.insertFrozenCells(node, rowIndex, visible.frozen, 0, columns);\n        }\n        this.addCellAtEnd(node, rowIndex, visible.first, visible.last, columns);\n        break;\n      }\n      default:\n        this.mergeColumns(node, rowIndex);\n        break;\n    }\n  }\n\n  private mergeColumns(node: HTMLElement, rowIndex: number) {\n    const { columns } = this.context;\n    const visible = this.visibleColumns;\n    const ids = new Map<string, HTMLElement>();\n\n    while (node.lastChild) {\n      const c = node.lastChild as HTMLElement;\n      node.removeChild(c);\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      ids.set(c.dataset.id!, c);\n    }\n\n    const updateImpl = (i: number) => {\n      const col = columns[i];\n      const existing = ids.get(col.id);\n      if (!existing) {\n        const cell = this.selectCell(rowIndex, i, columns);\n        node.appendChild(cell);\n        return;\n      }\n      ids.delete(col.id);\n      const r = this.updateCell(existing, rowIndex, col) || existing;\n      let cell: HTMLElement;\n      if (isAsyncUpdate(r)) {\n        cell = this.handleCellReady(r.item, r.ready, i);\n      } else {\n        cell = r;\n      }\n      if (cell && cell !== existing) {\n        cell.dataset.id = col.id;\n        cell.classList.add(CSS_CLASS_TD, this.style.cssClasses.td, cssClass(`td-${this.tableId}`));\n      }\n      this.updateShiftedState(cell, col);\n      node.appendChild(cell);\n    };\n\n    for (const frozen of visible.frozen) {\n      updateImpl(frozen);\n    }\n    for (let i = visible.first; i <= visible.last; i += 1) {\n      updateImpl(i);\n    }\n\n    if (ids.size === 0) {\n      return;\n    }\n\n    // recycle\n    const byId = new Map(columns.map((d, i) => [d.id, i]));\n    ids.forEach((idNode, key) => {\n      const index = byId.get(key);\n      if (index != null && index >= 0) {\n        this.recycleCell(idNode, index);\n      }\n    });\n  }\n\n  private updateShiftedStates() {\n    if (!this.context.columns.some((d) => d.frozen)) {\n      return;\n    }\n    const shifted = this.horizontallyShifted;\n    const clazz = CSS_CLASS_SHIFTED;\n    if (shifted) {\n      const headers = Array.from(this.header.querySelectorAll(`.${CSS_CLASS_FROZEN}:not(.${clazz})`));\n      const bodies = Array.from(this.body.querySelectorAll(`.${CSS_CLASS_FROZEN}:not(.${clazz})`));\n      for (const item of headers) {\n        item.classList.add(clazz);\n      }\n      for (const item of bodies) {\n        item.classList.add(clazz);\n      }\n    } else {\n      const headers = Array.from(this.header.querySelectorAll(`.${CSS_CLASS_FROZEN}.${clazz}`));\n      const bodies = Array.from(this.body.querySelectorAll(`.${CSS_CLASS_FROZEN}.${clazz}`));\n      for (const item of headers) {\n        item.classList.remove(clazz);\n      }\n      for (const item of bodies) {\n        item.classList.remove(clazz);\n      }\n    }\n  }\n\n  private syncFrozen(first: number) {\n    const { columns } = this.context;\n    const visible = this.visibleColumns;\n\n    if (!columns.some((d) => d.frozen)) {\n      return 0;\n    }\n    if (first === 0) {\n      if (visible.frozen.length > 0) {\n        this.removeFrozenColumns(visible.frozen, 0);\n        visible.frozen = [];\n      }\n      return 0;\n    }\n    const old = visible.frozen.length;\n    const { target, added, removed } = updateFrozen(visible.frozen, columns, first);\n    if (removed.length > 0) {\n      this.removeFrozenColumns(removed, old - removed.length);\n    }\n    if (added.length > 0) {\n      this.insertFrozenColumns(added, old - removed.length);\n    }\n    visible.frozen = target;\n    return target.length;\n  }\n\n  private onScrolledHorizontallyImpl(scrollLeft: number, clientWidth: number): EScrollResult {\n    const shiftingChanged = this.horizontallyShifted !== scrollLeft > 0;\n    this.horizontallyShifted = scrollLeft > 0;\n\n    const { column } = this.context;\n    const { first, last, firstRowPos } = range(\n      scrollLeft,\n      clientWidth,\n      column.defaultRowHeight,\n      column.exceptions,\n      column.numberOfRows\n    );\n\n    const visible = this.visibleColumns;\n    visible.forcedFirst = first;\n    visible.forcedLast = last;\n\n    if (first - visible.first >= 0 && last - visible.last <= 0) {\n      // nothing to do\n      if (shiftingChanged) {\n        this.updateShiftedStates();\n      }\n      return EScrollResult.NONE;\n    }\n\n    let r: EScrollResult = EScrollResult.SOME;\n\n    const frozenShift = this.syncFrozen(first);\n\n    if (first > visible.last || last < visible.first) {\n      // no overlap, clean and draw everything\n      // console.log(\n      //   `ff added: ${last - first + 1} removed: ${visible.last - visible.first + 1} ${first}:${last} ${frozenShift}`\n      // );\n      // removeRows(visibleFirst, visibleLast);\n      this.removeAllColumns(false);\n      // this.updateShiftedStates();\n      this.addColumnAtEnd(first, last);\n      r = EScrollResult.ALL;\n    } else if (first < visible.first) {\n      // some first rows missing and some last rows to much\n      // console.log(\n      //   `up added: ${visible.first - first + 1} removed: ${visible.last - last + 1} ${first}:${last} ${frozenShift}`\n      // );\n      this.removeColumnFromEnd(last + 1, visible.last);\n      this.updateShiftedStates();\n      this.addColumnAtStart(first, visible.first - 1, frozenShift);\n      r = EScrollResult.SOME_TOP;\n    } else {\n      // console.log(\n      //   `do added: ${last - visible.last + 1} removed: ${first - visible.first + 1} ${first}:${last} ${frozenShift}`\n      // );\n      // some last rows missing and some first rows to much\n      this.removeColumnFromStart(visible.first, first - 1, frozenShift);\n      this.updateShiftedStates();\n      this.addColumnAtEnd(visible.last + 1, last);\n      r = EScrollResult.SOME_BOTTOM;\n    }\n\n    visible.first = first;\n    visible.last = last;\n\n    this.updateColumnOffset(firstRowPos);\n\n    return r;\n  }\n}\n\n/**\n * @internal\n */\nexport default ACellAdapter;\n\n// function verifyRow(row: HTMLElement, index: number, columns: IColumn[]) {\n//   const cols = Array.from(row.children) as HTMLElement[];\n//   // sort incrementally\n//   if (cols.length <= 1) {\n//     return;\n//   }\n//   const colObjs = cols.map((c) => columns.find((d) => d.id === c.dataset.id));\n//   console.assert(\n//     colObjs.every((d) => Boolean(d)),\n//     'all columns must exist',\n//     index\n//   );\n//   console.assert(\n//     colObjs.every((d, i) => i === 0 || d.index >= colObjs[i - 1]!.index),\n//     'all columns in ascending order',\n//     index\n//   );\n//   console.assert(new Set(colObjs).size === colObjs.length, 'unique columns', colObjs);\n// }\n","/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { IAbortAblePromise, IAsyncUpdate } from './abortAble';\nimport { IAnimationContext } from './animation';\nimport { ARowRenderer, IRowRendererOptions, setTransform } from './ARowRenderer';\nimport { addScroll } from './internal';\nimport { EScrollResult, IMixinClass } from './mixin';\nimport { GridStyleManager, IColumn, setTemplate } from './style';\nimport { cssClass } from './styles';\nimport { ACellAdapter, ICellAdapterRenderContext, IVisibleColumns } from './table/internal/ACellAdapter';\n\nexport declare type ICellRenderContext<T extends IColumn> = ICellAdapterRenderContext<T>;\n\n/**\n * a @see ARowRenderer which manages multiple columns per row\n */\nexport abstract class ACellRenderer<T extends IColumn> extends ARowRenderer {\n  protected readonly style: GridStyleManager;\n\n  private readonly cell: ACellAdapter<T>;\n\n  constructor(\n    protected readonly root: HTMLElement,\n    htmlId: string,\n    options: Partial<IRowRendererOptions> = {}\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    super(setTemplate(root, htmlId).querySelector<HTMLElement>('main > article')!, options);\n    root.classList.add(cssClass(), 'lineup-engine');\n\n    this.style = new GridStyleManager(this.root, htmlId);\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n\n    class LocalCell extends ACellAdapter<T> {\n      protected get context(): ICellAdapterRenderContext<T> {\n        return that.context;\n      }\n\n      protected get body() {\n        return that.body;\n      }\n\n      protected get lastScrollInfo() {\n        return that.lastScrollInfo;\n      }\n\n      protected createHeader(document: Document, column: T) {\n        return that.createHeader(document, column);\n      }\n\n      protected updateHeader(node: HTMLElement, column: T) {\n        return that.updateHeader(node, column);\n      }\n\n      protected createCell(document: Document, index: number, column: T) {\n        return that.createCell(document, index, column);\n      }\n\n      protected updateCell(node: HTMLElement, index: number, column: T) {\n        return that.updateCell(node, index, column);\n      }\n\n      protected updateColumnOffset(firstColumnPos: number) {\n        super.updateColumnOffset(firstColumnPos);\n        that.updateOffset(that.visibleFirstRowPos);\n      }\n\n      protected forEachRow(callback: (row: HTMLElement, rowIndex: number) => void) {\n        return that.forEachRow(callback);\n      }\n    }\n\n    this.cell = new LocalCell(this.header, this.style, this.style.id, options.mixins || []);\n  }\n\n  protected get idPrefix(): string {\n    return this.style.id;\n  }\n\n  /**\n   * get the header root element\n   */\n  protected get header(): HTMLElement {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.root.querySelector<HTMLElement>('header > article')!;\n  }\n\n  /**\n   * get the header scrolling element, i.e its parent\n   */\n  protected get headerScroller(): HTMLElement {\n    return this.root.getElementsByTagName('header')[0] as HTMLElement;\n  }\n\n  protected get visibleColumns(): IVisibleColumns {\n    return this.cell.visibleColumns;\n  }\n\n  protected get visibleFirstColumnPos(): number {\n    return this.cell.visibleFirstColumnPos;\n  }\n\n  /**\n   * add another column mixin\n   * @param {IMixinClass} mixinClass mixing class to instantiate\n   * @param options optional options\n   */\n  protected addColumnMixin(mixinClass: IMixinClass, options?: unknown): void {\n    this.cell.addColumnMixin(mixinClass, options);\n  }\n\n  /**\n   * initialized this renderer\n   */\n  protected init(): void {\n    this.cell.init();\n\n    const scroller = this.body.parentElement as HTMLElement;\n\n    let old = addScroll(scroller, this.options.async, (act) => {\n      if (\n        Math.abs(old.left - act.left) < this.options.minScrollDelta &&\n        Math.abs(old.width - act.width) < this.options.minScrollDelta\n      ) {\n        return;\n      }\n      const isGoingRight = act.left > old.left;\n      old = act;\n      this.onScrolledHorizontally(act.left, act.width, isGoingRight);\n    });\n\n    super.init();\n  }\n\n  destroy(): void {\n    super.destroy();\n    this.root.remove();\n  }\n\n  /**\n   * will be called when scrolled horizontally\n   * @param {number} scrollLeft\n   * @param {number} clientWidth\n   * @param {boolean} isGoingRight\n   * @returns {EScrollResult}\n   */\n  protected onScrolledHorizontally(scrollLeft: number, clientWidth: number, isGoingRight: boolean): EScrollResult {\n    return this.cell.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);\n  }\n\n  /**\n   * the current render context, upon change `recreate` the whole table\n   * @returns {ICellRenderContext}\n   */\n  protected abstract get context(): ICellRenderContext<T>;\n\n  /**\n   * create a new header node for the given column\n   * @param {Document} document document to create nodes of\n   * @param {T} column the column to create the header for\n   * @returns {HTMLElement} the node representing the header\n   */\n  protected abstract createHeader(document: Document, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  /**\n   * updates the given header node with the given column\n   * @param {HTMLElement} node node to update\n   * @param {T} column the column to represents\n   * @returns {HTMLElement | void} an optional new replacement node for the header\n   */\n  protected abstract updateHeader(node: HTMLElement, column: T): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  /**\n   * create a new cell node fo the given row index and column\n   * @param {Document} document document the create nodes of\n   * @param {number} index the current row index\n   * @param {T} column the current column\n   * @returns {HTMLElement} the node representing the cell\n   */\n  protected abstract createCell(document: Document, index: number, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  /**\n   * updates the given cell node with the given row index and column\n   * @param {HTMLElement} node node to update\n   * @param {number} index row index to use\n   * @param {T} column column to use\n   * @returns {HTMLElement | void} an optional new replacement node for the header\n   */\n  protected abstract updateCell(\n    node: HTMLElement,\n    index: number,\n    column: T\n  ): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  /**\n   * trigger to update all headers\n   */\n  protected updateHeaders(): void {\n    this.cell.updateHeaders();\n  }\n\n  protected handleCellReady(item: HTMLElement, ready: IAbortAblePromise<void>, column = -1): HTMLElement {\n    return this.cell.handleCellReady(item, ready, column);\n  }\n\n  protected recycleCell(item: HTMLElement, column = -1): void {\n    this.cell.recycleCell(item, column);\n  }\n\n  /**\n   * triggers to update all column widths\n   */\n  protected updateColumnWidths(): void {\n    const { context } = this;\n    this.style.update(\n      context.defaultRowHeight - context.padding(-1),\n      context.columns,\n      context.column.padding,\n      0,\n      this.idPrefix\n    );\n  }\n\n  protected updateSizer(firstRowPos: number): void {\n    const ctx = this.context;\n    const { totalHeight } = ctx;\n    const totalWidth = ctx.column.totalHeight;\n\n    this.updateShifts(firstRowPos, this.cell.leftShift());\n    this.bodySizer.style.transform = `translate(${Math.max(0, totalWidth - 1).toFixed(0)}px, ${Math.max(\n      0,\n      totalHeight - 1\n    ).toFixed(0)}px)`;\n  }\n\n  protected updateShifts(top: number, _left: number): void {\n    setTransform(this.body, 0 /* left.toFixed(0) */, top.toFixed(0));\n  }\n\n  /**\n   * triggers to recreate the whole table\n   * @param {IAnimationContext} ctx optional animation context\n   */\n  protected recreate(ctx?: IAnimationContext): void {\n    const scroller = this.bodyScroller;\n    const oldLeft = scroller.scrollLeft;\n    this.cell.recreate(oldLeft, scroller.clientWidth);\n\n    super.recreate(ctx);\n    // restore left\n    scroller.scrollLeft = oldLeft;\n  }\n\n  protected clearPool(): void {\n    super.clearPool();\n    this.cell.clearPool();\n  }\n\n  protected createRow(node: HTMLElement, rowIndex: number): void {\n    this.cell.createRow(node, rowIndex);\n  }\n\n  protected updateRow(node: HTMLElement, rowIndex: number): void {\n    this.cell.updateRow(node, rowIndex);\n  }\n}\n\nexport default ACellRenderer;\n","import { range } from '../logic';\nimport { EScrollResult, IMixin, IMixinAdapter } from './IMixin';\n\nexport interface IPrefetchRendererOptions {\n  /**\n   * number of rows to prefetch\n   * @default 20\n   */\n  readonly prefetchRows: number;\n  /**\n   * number of rows extra before cleaning them up\n   * @default 10\n   */\n  readonly cleanUpRows: number;\n  /**\n   * delay to trigger a prefetch or clean up\n   * @default 200ms\n   */\n  readonly delay: number;\n}\n\n/**\n * mixin that prefetches rows depending on the scrolling direction for faster rendering\n */\nexport default class PrefetchMixin implements IMixin {\n  private prefetchTimeout = -1;\n\n  private cleanupTimeout = -1;\n\n  private readonly options: IPrefetchRendererOptions = {\n    prefetchRows: 20,\n    cleanUpRows: 10,\n    delay: 200,\n  };\n\n  constructor(\n    private readonly adapter: IMixinAdapter,\n    options?: Partial<IPrefetchRendererOptions>\n  ) {\n    Object.assign(this.options, options);\n    return this;\n  }\n\n  private prefetchDown() {\n    this.prefetchTimeout = -1;\n    if (this.adapter.isScrollEventWaiting()) {\n      return;\n    }\n    const { context } = this.adapter;\n    const nextLast = Math.min(this.adapter.visible.forcedLast + this.options.prefetchRows, context.numberOfRows - 1);\n    // add some rows in advance\n    if (\n      this.adapter.visible.last === nextLast &&\n      this.adapter.visible.last >= this.adapter.visible.forcedLast + this.options.prefetchRows\n    ) {\n      return;\n    }\n\n    this.adapter.addAtBottom(this.adapter.visible.last + 1, nextLast);\n    // console.log('prefetch', visibleFirst, visibleLast + 1, '=>', nextLast, ranking.children.length);\n    this.adapter.visible.last = nextLast;\n  }\n\n  private prefetchUp() {\n    this.prefetchTimeout = -1;\n    if (\n      this.adapter.isScrollEventWaiting() ||\n      this.adapter.visible.first <= this.adapter.visible.forcedFirst - this.options.prefetchRows\n    ) {\n      return;\n    }\n    const { context } = this.adapter;\n    const fakeOffset = Math.max(this.adapter.scrollOffset - this.options.prefetchRows * context.defaultRowHeight, 0);\n    const height = this.adapter.scrollTotal;\n    const { first, firstRowPos } = range(\n      fakeOffset,\n      height,\n      context.defaultRowHeight,\n      context.exceptions,\n      context.numberOfRows\n    );\n\n    if (first === this.adapter.visible.first) {\n      return;\n    }\n\n    const frozenShift = this.adapter.syncFrozen ? this.adapter.syncFrozen(first) : 0;\n\n    this.adapter.addAtBeginning(first, this.adapter.visible.first - 1, frozenShift);\n    // console.log('prefetch up ', visibleFirst, '=>', first, visibleLast, ranking.children.length);\n    this.adapter.visible.first = first;\n\n    this.adapter.updateOffset(firstRowPos);\n  }\n\n  private triggerPrefetch(isGoingDown: boolean) {\n    if (this.prefetchTimeout >= 0) {\n      clearTimeout(this.prefetchTimeout);\n    }\n\n    const prefetchDownPossible =\n      this.adapter.visible.last < this.adapter.visible.forcedLast + this.options.prefetchRows;\n    const prefetchUpPossible =\n      this.adapter.visible.first > this.adapter.visible.forcedFirst - this.options.prefetchRows;\n\n    const isLast = this.adapter.visible.last === this.adapter.context.numberOfRows;\n    const isFirst = this.adapter.visible.first === 0;\n\n    if ((isGoingDown && !prefetchDownPossible && !isLast) || (!isGoingDown && !prefetchUpPossible && !isFirst)) {\n      return;\n    }\n\n    // go down if we are already at the top, too\n    const op = isGoingDown || isFirst ? this.prefetchDown.bind(this) : this.prefetchUp.bind(this);\n\n    // eslint-disable-next-line no-restricted-globals\n    this.prefetchTimeout = self.setTimeout(op, this.options.delay);\n  }\n\n  private cleanUpTop(first: number) {\n    this.cleanupTimeout = -1;\n    if (this.adapter.isScrollEventWaiting()) {\n      return;\n    }\n    const newFirst = Math.max(0, first - this.options.cleanUpRows);\n\n    if (newFirst <= this.adapter.visible.first) {\n      return;\n    }\n\n    // console.log('cleanup top');\n    const frozenShift = this.adapter.syncFrozen ? this.adapter.syncFrozen(newFirst) : 0;\n\n    this.adapter.removeFromBeginning(this.adapter.visible.first, newFirst - 1, frozenShift);\n    const { context } = this.adapter;\n    // console.log('cleanup up ', visibleFirst, '=>', newFirst, visibleLast, ranking.children.length);\n    let shift = (newFirst - this.adapter.visible.first) * context.defaultRowHeight;\n    if (context.exceptions.length > 0) {\n      for (let i = this.adapter.visible.first; i < newFirst; i += 1) {\n        const ex = context.exceptionsLookup.get(i);\n        if (ex != null) {\n          shift += ex - context.defaultRowHeight;\n        }\n      }\n    }\n    this.adapter.visible.first = newFirst;\n    this.adapter.updateOffset(this.adapter.visibleFirstRowPos + shift);\n\n    this.prefetchDown();\n  }\n\n  private cleanUpBottom(last: number) {\n    this.cleanupTimeout = -1;\n    const newLast = last + this.options.cleanUpRows;\n    if (this.adapter.visible.last <= newLast) {\n      return;\n    }\n    // console.log('cleanup bottom');\n    this.adapter.removeFromBottom(newLast + 1, this.adapter.visible.last);\n    this.adapter.visible.last = newLast;\n\n    this.prefetchUp();\n  }\n\n  private triggerCleanUp(first: number, last: number, isGoingDown: boolean) {\n    if (this.cleanupTimeout >= 0) {\n      clearTimeout(this.cleanupTimeout);\n    }\n    if (\n      (isGoingDown && first - this.options.cleanUpRows <= this.adapter.visible.first) ||\n      (!isGoingDown && this.adapter.visible.last <= last + this.options.cleanUpRows)\n    ) {\n      return;\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    this.cleanupTimeout = self.setTimeout(\n      isGoingDown ? this.cleanUpTop.bind(this) : this.cleanUpBottom.bind(this),\n      this.options.delay,\n      isGoingDown ? first : last\n    );\n  }\n\n  onScrolled(isGoingDown: boolean, scrollResult: EScrollResult): void {\n    if (this.adapter.isScrollEventWaiting()) {\n      return;\n    }\n    if (scrollResult !== EScrollResult.ALL && this.options.cleanUpRows > 0) {\n      this.triggerCleanUp(this.adapter.visible.forcedFirst, this.adapter.visible.forcedLast, isGoingDown);\n    }\n    if (scrollResult !== EScrollResult.NONE && this.options.prefetchRows > 0) {\n      this.triggerPrefetch(isGoingDown);\n    }\n  }\n}\n","/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { IAbortAblePromise, IAsyncUpdate } from '../abortAble';\nimport { IAnimationContext } from '../animation';\nimport { ARowRenderer, IRowRendererOptions, setTransform } from '../ARowRenderer';\nimport { EScrollResult, IMixinClass } from '../mixin';\nimport { IColumn } from '../style';\nimport GridStyleManager from '../style/GridStyleManager';\nimport { CSS_CLASS_HIDDEN, CSS_CLASS_LOADING } from '../styles';\nimport { ACellAdapter, ICellAdapterRenderContext, IVisibleColumns } from './internal/ACellAdapter';\nimport { ITableSection } from './MultiTableRowRenderer';\n\nexport declare type ITableCellRenderContext<T extends IColumn> = ICellAdapterRenderContext<T>;\n\n/**\n * base class for a cell renderer as table section\n */\nexport abstract class ACellTableSection<T extends IColumn> extends ARowRenderer implements ITableSection {\n  private readonly cell: ACellAdapter<T>;\n\n  constructor(\n    public readonly header: HTMLElement,\n    public readonly body: HTMLElement,\n    protected readonly tableId: string,\n    protected readonly style: GridStyleManager,\n    options: Partial<IRowRendererOptions> = {}\n  ) {\n    super(body, options);\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n\n    class LocalCell extends ACellAdapter<T> {\n      protected get context(): ICellAdapterRenderContext<T> {\n        return that.context;\n      }\n\n      protected get body() {\n        return that.body;\n      }\n\n      protected get lastScrollInfo() {\n        return that.lastScrollInfo;\n      }\n\n      protected createHeader(document: Document, column: T) {\n        return that.createHeader(document, column);\n      }\n\n      protected updateHeader(node: HTMLElement, column: T) {\n        return that.updateHeader(node, column);\n      }\n\n      protected createCell(document: Document, index: number, column: T) {\n        return that.createCell(document, index, column);\n      }\n\n      protected updateColumnOffset(firstColumnPos: number) {\n        super.updateColumnOffset(firstColumnPos);\n        that.updateOffset(that.visibleFirstRowPos);\n      }\n\n      protected updateCell(node: HTMLElement, index: number, column: T) {\n        return that.updateCell(node, index, column);\n      }\n\n      protected forEachRow(callback: (row: HTMLElement, rowIndex: number) => void) {\n        return that.forEachRow(callback);\n      }\n    }\n\n    this.cell = new LocalCell(this.header, this.style, tableId, options.mixins || []);\n  }\n\n  protected addColumnMixin(mixinClass: IMixinClass, options?: unknown): void {\n    this.cell.addColumnMixin(mixinClass, options);\n  }\n\n  protected get idPrefix(): string {\n    return this.tableId;\n  }\n\n  abstract get id(): string;\n\n  get width(): number {\n    return this.context.column.totalHeight;\n  }\n\n  protected get visibleColumns(): IVisibleColumns {\n    return this.cell.visibleColumns;\n  }\n\n  protected get visibleFirstColumnPos(): number {\n    return this.cell.visibleFirstColumnPos;\n  }\n\n  get height(): number {\n    return this.context.totalHeight;\n  }\n\n  get hidden(): boolean {\n    return this.header.classList.contains(CSS_CLASS_LOADING);\n  }\n\n  set hidden(value: boolean) {\n    const old = this.hidden;\n    if (old === value) {\n      return;\n    }\n    this.header.classList.toggle(CSS_CLASS_LOADING, value);\n    this.body.classList.toggle(CSS_CLASS_LOADING, value);\n    this.header.classList.toggle(CSS_CLASS_HIDDEN, value);\n    this.body.classList.toggle(CSS_CLASS_HIDDEN, value);\n    this.onVisibilityChanged(!value);\n  }\n\n  protected updateSizer(firstRowPos: number): void {\n    this.updateShifts(firstRowPos, this.cell.leftShift());\n    // no sizer update since centrally managed\n  }\n\n  protected updateShifts(top: number, _left: number): void {\n    setTransform(this.body, 0 /* left.toFixed(0) */, top.toFixed(0));\n  }\n\n  /**\n   * hook when the visibility changes\n   * @param {boolean} _visible current visibility\n   */\n  protected onVisibilityChanged(_visible: boolean): void {\n    // hook\n  }\n\n  hide(): void {\n    this.hidden = true;\n  }\n\n  show(scrollLeft: number, clientWidth: number, isGoingRight: boolean): void {\n    const wasHidden = this.hidden;\n    this.hidden = false;\n    if (wasHidden) {\n      // full update\n      this.revalidate();\n    } else {\n      this.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);\n    }\n  }\n\n  init(): void {\n    this.hide(); // hide by default\n    this.cell.init();\n    super.init();\n  }\n\n  destroy(): void {\n    super.destroy();\n    this.header.remove();\n    this.style.remove(this.tableId);\n  }\n\n  protected onScrolledVertically(scrollTop: number, clientHeight: number, isGoingDown: boolean): EScrollResult {\n    if (this.hidden) {\n      return EScrollResult.NONE;\n    }\n    return super.onScrolledVertically(scrollTop, clientHeight, isGoingDown);\n  }\n\n  protected onScrolledHorizontally(scrollLeft: number, clientWidth: number, isGoingRight: boolean): EScrollResult {\n    const r = this.cell.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);\n    this.updateSizer(this.visibleFirstRowPos);\n    return r;\n  }\n\n  /**\n   * the current render context, upon change `recreate` the whole table\n   * @returns {ITableCellRenderContext}\n   */\n  protected abstract get context(): ITableCellRenderContext<T>;\n\n  /**\n   * create a new header node for the given column\n   * @param {Document} document document to create nodes of\n   * @param {T} column the column to create the header for\n   * @returns {HTMLElement} the node representing the header\n   */\n  protected abstract createHeader(document: Document, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  /**\n   * updates the given header node with the given column\n   * @param {HTMLElement} node node to update\n   * @param {T} column the column to represents\n   * @returns {HTMLElement | void} an optional new replacement node for the header\n   */\n  protected abstract updateHeader(node: HTMLElement, column: T): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  /**\n   * create a new cell node fo the given row index and column\n   * @param {Document} document document the create nodes of\n   * @param {number} index the current row index\n   * @param {T} column the current column\n   * @returns {HTMLElement} the node representing the cell\n   */\n  protected abstract createCell(document: Document, index: number, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  /**\n   * updates the given cell node with the given row index and column\n   * @param {HTMLElement} node node to update\n   * @param {number} index row index to use\n   * @param {T} column column to use\n   * @returns {HTMLElement | void} an optional new replacement node for the header\n   */\n  protected abstract updateCell(\n    node: HTMLElement,\n    index: number,\n    column: T\n  ): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  /**\n   * triggers updating the header\n   */\n  protected updateHeaders(): void {\n    this.cell.updateHeaders();\n  }\n\n  protected handleCellReady(item: HTMLElement, ready: IAbortAblePromise<void>, column = -1): HTMLElement {\n    return this.cell.handleCellReady(item, ready, column);\n  }\n\n  protected recycleCell(item: HTMLElement, column = -1): void {\n    this.cell.recycleCell(item, column);\n  }\n\n  /**\n   * trigger an update all all column widths\n   */\n  protected updateColumnWidths(): void {\n    const { context } = this;\n    this.style.update(\n      context.defaultRowHeight - context.padding(-1),\n      context.columns,\n      context.column.padding,\n      0,\n      this.tableId\n    );\n  }\n\n  protected recreate(ctx?: IAnimationContext): void {\n    const scroller = this.bodyScroller;\n    const oldLeft = scroller.scrollLeft;\n    this.cell.recreate(oldLeft, scroller.clientWidth);\n\n    super.recreate(ctx);\n    // restore left\n    scroller.scrollLeft = oldLeft;\n  }\n\n  protected clearPool(): void {\n    super.clearPool();\n    this.cell.clearPool();\n  }\n\n  protected createRow(node: HTMLElement, rowIndex: number): void {\n    this.cell.createRow(node, rowIndex);\n    node.classList.add(this.style.cssClasses.tr);\n  }\n\n  protected updateRow(node: HTMLElement, rowIndex: number): void {\n    this.cell.updateRow(node, rowIndex);\n  }\n}\n\nexport default ACellTableSection;\n","import { setTransform } from '../ARowRenderer';\nimport { addScroll, defaultMode, IDelayedMode } from '../internal';\nimport { GridStyleManager, tableCSSClasses, tableIds } from '../style';\nimport {\n  cssClass,\n  CSS_CLASS_BODY,\n  CSS_CLASS_FOOTER,\n  CSS_CLASS_HEADER,\n  CSS_CLASS_MULTI,\n  CSS_CLASS_TBODY,\n  CSS_CLASS_THEAD,\n} from '../styles';\n\n/**\n * basic interface of a table section\n */\nexport interface ITableSection {\n  readonly id: string;\n  readonly width: number;\n  readonly height: number;\n  readonly header: HTMLElement;\n  readonly body: HTMLElement;\n\n  init(): void;\n\n  /**\n   * show the section\n   * @param {number} left visible left margin\n   * @param {number} width visible width\n   * @param {boolean} isGoingRight whether it was a shift to the right\n   */\n  show(left: number, width: number, isGoingRight: boolean): void;\n\n  hide(): void;\n\n  destroy(): void;\n}\n\nexport interface ITableFactory<T extends ITableSection> {\n  (header: HTMLElement, body: HTMLElement, tableId: string, style: GridStyleManager, ...extras: unknown[]): T;\n}\n\nexport interface ISeparatorFactory<T extends ITableSection> {\n  (header: HTMLElement, body: HTMLElement, style: GridStyleManager, ...extras: unknown[]): T;\n}\n\nexport interface IMultiTableRowRendererOptions {\n  /**\n   * column padding to use between columns\n   * @default 0\n   */\n  columnPadding: number;\n  /**\n   * async update on scrolling\n   * animation -> use requestAnimationFrame\n   * sync -> execute within scroll listener\n   * {number} -> execute within this delay using setTimeout\n   * @default is chrome ? animation else 0\n   */\n  async: IDelayedMode;\n\n  /**\n   * minimal number of pixel the scrollbars has to move\n   * @default 30\n   */\n  minScrollDelta: number;\n}\n\n/**\n * manager of multiple columns separated by separators each an own row renderer\n */\nexport default class MultiTableRowRenderer {\n  readonly style: GridStyleManager;\n\n  private tableId = 0;\n\n  private readonly sections: ITableSection[] = [];\n\n  private readonly options: Readonly<IMultiTableRowRendererOptions> = {\n    columnPadding: 0,\n    async: defaultMode,\n    minScrollDelta: 30,\n  };\n\n  constructor(\n    public readonly node: HTMLElement,\n    htmlId: string,\n    options: Partial<IMultiTableRowRendererOptions> = {}\n  ) {\n    Object.assign(this.options, options);\n    const cleanHTMLId = htmlId.startsWith('#') ? htmlId.slice(1) : htmlId;\n    // eslint-disable-next-line no-param-reassign\n    node.id = cleanHTMLId;\n    // eslint-disable-next-line no-param-reassign\n    node.innerHTML = `<header id=\"header-${cleanHTMLId}\" class=\"${CSS_CLASS_HEADER} ${cssClass(\n      `header-${cleanHTMLId}`\n    )}\">\n      <footer class=\"${CSS_CLASS_FOOTER} ${cssClass(`footer-${cleanHTMLId}`)}\">&nbsp;</footer>\n    </header>\n    <main id=\"body-${cleanHTMLId}\" class=\"${CSS_CLASS_BODY} ${cssClass(`body-${cleanHTMLId}`)}\">\n      <footer class=\"${CSS_CLASS_FOOTER}\">&nbsp;</footer>\n    </main>`;\n    node.classList.add(cssClass(), CSS_CLASS_MULTI, 'lineup-engine');\n\n    this.style = new GridStyleManager(this.node, cleanHTMLId);\n\n    let old = addScroll(this.main, this.options.async, (act) => {\n      if (\n        Math.abs(old.left - act.left) < this.options.minScrollDelta &&\n        Math.abs(old.width - act.width) < this.options.minScrollDelta\n      ) {\n        return;\n      }\n      const isGoingRight = act.left > old.left;\n      old = act;\n      this.onScrolledHorizontally(act.left, act.width, isGoingRight);\n    });\n  }\n\n  private update() {\n    this.onScrolledHorizontally(this.main.scrollLeft, this.main.clientWidth, false);\n\n    let offset = 0;\n    this.sections.forEach((s) => {\n      // eslint-disable-next-line no-param-reassign\n      s.body.style.left = `${offset}px`;\n      // eslint-disable-next-line no-param-reassign\n      s.header.style.left = `${offset}px`;\n      offset += s.width + this.options.columnPadding;\n    });\n  }\n\n  private onScrolledHorizontally(scrollLeft: number, clientWidth: number, isGoingRight: boolean) {\n    let offset = 0;\n    const scrollEnd = scrollLeft + clientWidth;\n    this.sections.forEach((s) => {\n      const end = offset + s.width;\n      if (end < scrollLeft || offset > scrollEnd) {\n        s.hide();\n      } else {\n        s.show(Math.max(0, scrollLeft - offset), Math.min(scrollEnd - offset, s.width), isGoingRight);\n      }\n\n      offset = end + this.options.columnPadding;\n    });\n\n    this.updateOffset();\n  }\n\n  private updateOffset() {\n    const headerFooter = this.header.getElementsByTagName('footer')[0];\n    const bodyFooter = this.main.getElementsByTagName('footer')[0];\n\n    const maxHeight = this.sections.reduce((acc, d) => Math.max(acc, d.height), 0);\n    const total = this.sections.reduce((a, c) => a + c.width + this.options.columnPadding, 0);\n\n    setTransform(headerFooter, total, 0);\n    setTransform(bodyFooter, total, maxHeight);\n  }\n\n  destroy(): void {\n    this.sections.forEach((d) => d.destroy());\n    this.node.remove();\n  }\n\n  private get doc(): Document {\n    return this.node.ownerDocument;\n  }\n\n  private get header() {\n    return this.node.getElementsByTagName('header')[0] as HTMLElement;\n  }\n\n  private get main() {\n    return this.node.getElementsByTagName('main')[0] as HTMLElement;\n  }\n\n  /**\n   * push another table to this instance\n   * @param {ITableFactory<T extends ITableSection>} factory factory for the table\n   * @param extras additional arguments to provide for the factory\n   * @returns {T} the table instance\n   */\n  pushTable<T extends ITableSection>(factory: ITableFactory<T>, ...extras: unknown[]): T {\n    const header = this.doc.createElement('article');\n    const body = this.doc.createElement('article');\n\n    const tableId = `${this.node.id}T${this.tableId}`;\n    this.tableId += 1;\n    const ids = tableIds(tableId);\n    const cssClasses = tableCSSClasses(tableId);\n\n    header.id = ids.thead;\n    header.classList.add(CSS_CLASS_THEAD, cssClasses.thead);\n    body.id = ids.tbody;\n    body.classList.add(CSS_CLASS_TBODY, cssClasses.tbody);\n    this.header.insertBefore(header, this.header.lastElementChild); // before the footer\n    this.main.appendChild(body);\n\n    const table = factory.call(this, header, body, tableId, this.style, ...extras);\n    table.init();\n    this.sections.push(table);\n    this.update();\n    return table;\n  }\n\n  /**\n   * push another separator to the manager\n   * @param {ISeparatorFactory<T extends ITableSection>} factory the factory to create the separator\n   * @param extras optional additional arguments\n   * @returns {T} the new created separator\n   */\n  pushSeparator<T extends ITableSection>(factory: ISeparatorFactory<T>, ...extras: unknown[]): T {\n    const header = this.doc.createElement('section');\n    const body = this.doc.createElement('section');\n    header.classList.add(cssClass('header-separator'));\n    body.classList.add(cssClass('separator'));\n    this.header.insertBefore(header, this.header.lastElementChild); // before the footer\n    this.main.appendChild(body);\n\n    const separator = factory.call(this, header, body, this.style, ...extras);\n    separator.init();\n    this.sections.push(separator);\n    this.update();\n    return separator;\n  }\n\n  /**\n   * removes a given table section\n   * @param {ITableSection} section section to remove\n   * @returns {boolean} successful flag\n   */\n  remove(section: ITableSection): boolean {\n    const index = this.sections.indexOf(section);\n    if (index < 0) {\n      return false;\n    }\n    this.sections.splice(index, 1);\n    section.destroy();\n    this.update();\n    return true;\n  }\n\n  clear(): void {\n    this.sections.splice(0, this.sections.length).forEach((s) => s.destroy());\n    this.update();\n  }\n\n  /**\n   * triggers and update because of a change in width of one or more table sections\n   */\n  widthChanged(): void {\n    this.update();\n  }\n}\n","import './style.scss';\n\nexport * from '.';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle\ndeclare const __VERSION__: string;\n// eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle\ndeclare const __BUILD_ID__: string;\n\nexport const version = __VERSION__;\nexport const buildId = __BUILD_ID__;\n"],"names":["root","factory","exports","module","define","amd","globalThis","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isPromiseLike","p","then","ABORTED","thenFactory","loader","isAborted","abort","onfulfilled","_onrejected","loaded","loadedOrAborted","res","r","abortAble","aborted","aborter","Promise","resolve","race","abortAbleFetch","input","init","controller","AbortController","reject","fetch","signal","catch","error","DOMException","bind","abortAbleAll","values","all","v","isAbortAble","candidate","isAsyncUpdate","update","ready","abortAbleResolveNow","KeyFinder","constructor","context","cache","lastFilled","key2index","Map","this","exceptions","forEach","e","index","y","set","findValidStart","before","i","undefined","posByKey","pos","fillCacheTillKey","length","defaultRowHeight","cached","start","fillCache","heightOf","first","last","offset","callback","exceptionsLookup","exceptionHeightOf","returnDefault","padding","entry","target","numberOfRows","c","positions","EAnimationMode","NO_CHANGE_DELTA","noAnimationChange","previous","mode","nodeY","current","previousHeight","currentHeight","prev","height","curr","UPDATE","Math","abs","defaultPhases","delay","apply","node","actNode","dataset","animation","toLowerCase","style","transform","SHOW","opacity","HIDE","UPDATE_REMOVE","defaultMode","ScrollHandler","asInfo","sync","handler","timer","numbers","handleAnimationImpl","handle","addEventListener","handleAnimation","handleTimeouts","passive","info","left","top","s","requestAnimationFrame","size","n","self","setTimeout","scrollLeft","scrollTop","width","clientWidth","clientHeight","push","remove","concat","Array","from","some","d","indexOf","splice","isWaiting","addScroll","scrollElement","__le_scroller__","isScrollEventWaiting","scroller","clear","lastChild","removeChild","RowHeightException","y2","uniformContext","rowHeight","rowPadding","currentRowHeight","keys","has","totalHeight","nonUniformContext","rowHeights","Number","NaN","actualDefaultRowHeight","isNaN","lookup","sorted","sort","a","b","mostFrequent","mostFrequentValue","acc","paddedHeight","between","randomContext","minRowHeight","maxRowHeight","ratio","seed","Date","now","actSeed","random","x","sin","floor","round","range","heightExceptions","firstRowPos","endPos","offset2","indexShift","min","max","calc","offsetShift","shifted2","assign","lastPos","rest","visible","closest","item","firstException","lastException","ceil","frozenDelta","currentLength","targetLength","added","removed","common","slice","updateFrozen","old","columns","oldLast","pop","frozen","EScrollResult","PREFIX","cssClass","suffix","CSS_CLASS_LOADING","CSS_CLASS_FROZEN","CSS_CLASS_HIDDEN","CSS_CLASS_MULTI","CSS_CLASS_EVEN","CSS_CLASS_SHIFTED","CSS_CLASS_SCROLLBAR_TESTER","CSS_CLASS_HEADER","CSS_CLASS_BODY","CSS_CLASS_FOOTER","CSS_CLASS_THEAD","CSS_CLASS_TBODY","CSS_CLASS_TR","CSS_CLASS_TH","CSS_CLASS_TD","CSS_CLASS_SCROLLING","CSS_CLASS_ROW_ANIMATION","isLoadingCell","classList","contains","ARowRenderer","body","options","pool","loadingPool","loading","WeakMap","forcedFirst","forcedLast","visibleFirstRowPos","scrollListener","lastScrollInfo","abortAnimation","async","minScrollDelta","mixins","scrollingHint","batchSize","striped","viewportOversize","adapter","createAdapter","map","MixinClass","fragment","ownerDocument","createDocumentFragment","addMixin","that","addAtBeginning","to","addAtBottom","removeFromBeginning","removeFromBottom","updateOffset","bodyScroller","scrollOffset","scrollTotal","parentElement","bodySizer","parent","sizer","children","find","tagName","createElement","add","idPrefix","insertBefore","firstChild","act","isGoingDown","onScrolledVertically","recreate","destroy","removeScroll","cleanUp","select","result","updateRow","createRow","String","toggle","selectProxy","proxy","recycle","real","abortResult","replaceChild","delete","create","ex","exceptionHeight","removeAll","perform","toRecycle","lastElementChild","items","appendChild","forEachRow","inPlace","rows","row","fromBeginning","nextSibling","previousSibling","updateSizer","setTransform","toFixed","ctx","recreateAnimated","recreatePure","clearPool","previousKey","cur","currentKey","next","UPDATE_CREATE","nodeYCurrentHeight","nextPos","prevHeight","animate","phases","previousFinder","currentFinder","activeAnimation","currentTimer","actPhase","executePhase","phase","anim","run","console","assert","offsetTop","startsWith","endsWith","dummyAnimation","filter","Set","split","clearTimeout","revalidate","shift","shiftTop","scrollResult","onScrolledImpl","mixin","onScrolled","shiftLast","currentDelta","total","shiftFirst","currentFirstRow","NONE","toAdd","SOME","toAddBottom","ALL","SOME_TOP","SOME_BOTTOM","manipulate","bottom","elem","text","anyElem","__transform__","assignStyles","source","targetObj","plain","hyphen","replace","setProperty","StyleManager","rules","testVerifyTimeout","createTextNode","verifySheet","sheet","cssRules","every","selectorText","selector","deleteRule","rule","insertRule","cssRule","getSheetRule","addRule","id","updateRule","findIndex","stored","ruleNames","setTemplate","cleanId","innerHTML","tableIds","tableId","thead","tbody","tr","th","td","tableCSSClasses","ids","GridStyleManager","super","cssClasses","headerScroller","getElementsByTagName","insertAdjacentHTML","offsetWidth","offsetHeight","measureScrollbar","borderRight","newValue","frozenShift","unit","selectors","reduce","updateColumns","prefix","cssSelectors","thStyles","tdStyles","ACellAdapter","header","mixinClasses","cellPool","visibleColumns","visibleFirstColumnPos","horizontallyShifted","columnAdapter","createColumnAdapter","columnMixins","columnFragment","leftShift","column","addColumnMixin","addColumnAtStart","addColumnAtEnd","removeColumnFromStart","removeColumnFromEnd","updateColumnOffset","syncFrozen","onScrolledHorizontally","isGoingRight","onScrolledHorizontallyImpl","removeCellFromStart","firstElementChild","recycleCell","removeCellFromEnd","removeFrozenCells","columnIndices","columnIndex","removeFrozenColumns","removeAllColumns","includingFrozen","removeAllCells","arr","selectProxyCell","columnObj","pooled","updateCell","createCell","updateShiftedState","handleCellReady","selectCell","col","rowIndex","addCellAtStart","cell","insertFrozenCells","insertFrozenColumns","addCellAtEnd","updateHeaders","base","updateHeader","document","existing","createHeader","firstColumnPos","changed","childElementCount","mergeColumns","updateImpl","byId","idNode","updateShiftedStates","shifted","clazz","headers","querySelectorAll","bodies","shiftingChanged","ACellRenderer","htmlId","querySelector","mixinClass","updateColumnWidths","totalWidth","updateShifts","_left","oldLeft","PrefetchMixin","prefetchTimeout","cleanupTimeout","prefetchRows","cleanUpRows","prefetchDown","nextLast","prefetchUp","fakeOffset","triggerPrefetch","prefetchDownPossible","prefetchUpPossible","isLast","isFirst","op","cleanUpTop","newFirst","cleanUpBottom","newLast","triggerCleanUp","ACellTableSection","hidden","onVisibilityChanged","_visible","hide","show","wasHidden","MultiTableRowRenderer","sections","columnPadding","cleanHTMLId","main","scrollEnd","end","headerFooter","bodyFooter","maxHeight","doc","pushTable","extras","table","pushSeparator","separator","section","widthChanged","version","buildId"],"sourceRoot":""}