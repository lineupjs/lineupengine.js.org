{"version":3,"sources":["webpack://lineupengine/webpack/universalModuleDefinition","webpack://lineupengine/webpack/bootstrap","webpack://lineupengine/webpack/runtime/define property getters","webpack://lineupengine/webpack/runtime/hasOwnProperty shorthand","webpack://lineupengine/webpack/runtime/make namespace object","webpack://lineupengine/./src/abortAble.ts","webpack://lineupengine/./src/animation/KeyFinder.ts","webpack://lineupengine/./src/animation/index.ts","webpack://lineupengine/./src/internal/index.ts","webpack://lineupengine/./src/internal/scroll.ts","webpack://lineupengine/./src/logic.ts","webpack://lineupengine/./src/mixin/IMixin.ts","webpack://lineupengine/./src/styles/index.ts","webpack://lineupengine/./src/ARowRenderer.ts","webpack://lineupengine/./src/style/StyleManager.ts","webpack://lineupengine/./src/style/GridStyleManager.ts","webpack://lineupengine/./src/table/internal/ACellAdapter.ts","webpack://lineupengine/./src/ACellRenderer.ts","webpack://lineupengine/./src/mixin/PrefetchMixin.ts","webpack://lineupengine/./src/table/ACellTableSection.ts","webpack://lineupengine/./src/table/MultiTableRowRenderer.ts","webpack://lineupengine/./src/bundle.ts"],"names":["root","factory","exports","module","define","amd","globalThis","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isPromiseLike","p","then","ABORTED","thenFactory","loader","isAborted","abort","onfulfilled","_onrejected","loaded","loadedOrAborted","res","r","abortAble","aborted","aborter","Promise","resolve","race","abortAbleFetch","input","init","controller","AbortController","reject","fetch","signal","catch","error","DOMException","bind","abortAbleAll","values","all","v","isAbortAble","candidate","isAsyncUpdate","update","ready","abortAbleResolveNow","context","cache","lastFilled","key2index","Map","this","exceptions","forEach","e","index","y","set","findValidStart","before","i","undefined","posByKey","pos","fillCacheTillKey","length","defaultRowHeight","cached","start","fillCache","heightOf","first","last","offset","callback","exceptionsLookup","exceptionHeightOf","returnDefault","padding","entry","target","numberOfRows","c","positions","EAnimationMode","noAnimationChange","previousHeight","currentHeight","previous","mode","nodeY","current","prev","height","curr","UPDATE","Math","abs","defaultPhases","delay","apply","actNode","dataset","animation","toLowerCase","style","transform","SHOW","opacity","HIDE","UPDATE_REMOVE","clear","node","lastChild","removeChild","defaultMode","sync","handler","timer","numbers","handleAnimationImpl","handle","addEventListener","handleAnimation","handleTimeouts","passive","asInfo","info","left","top","s","requestAnimationFrame","size","n","self","setTimeout","scrollLeft","scrollTop","width","clientWidth","clientHeight","push","remove","concat","Array","from","some","d","indexOf","splice","isWaiting","addScroll","scrollElement","__le_scroller__","ScrollHandler","isScrollEventWaiting","scroller","EScrollResult","uniformContext","rowHeight","rowPadding","currentRowHeight","keys","has","totalHeight","nonUniformContext","rowHeights","Number","NaN","actualDefaultRowHeight","isNaN","lookup","sorted","sort","a","b","mostFrequent","mostFrequentValue","acc","paddedHeight","between","RowHeightException","randomContext","minRowHeight","maxRowHeight","ratio","seed","Date","now","actSeed","random","x","sin","floor","round","range","heightExceptions","firstRowPos","endPos","y2","offset2","indexShift","min","max","calc","offsetShift","shifted2","assign","lastPos","rest","visible","closest","item","firstException","lastException","ceil","frozenDelta","currentLength","targetLength","added","removed","common","slice","updateFrozen","old","columns","oldLast","pop","frozen","cssClass","suffix","PREFIX","CSS_CLASS_LOADING","CSS_CLASS_FROZEN","CSS_CLASS_HIDDEN","CSS_CLASS_MULTI","CSS_CLASS_EVEN","CSS_CLASS_SHIFTED","CSS_CLASS_SCROLLBAR_TESTER","CSS_CLASS_HEADER","CSS_CLASS_BODY","CSS_CLASS_FOOTER","CSS_CLASS_THEAD","CSS_CLASS_TBODY","CSS_CLASS_TR","CSS_CLASS_TH","CSS_CLASS_TD","CSS_CLASS_SCROLLING","CSS_CLASS_ROW_ANIMATION","isLoadingCell","classList","contains","body","options","pool","loadingPool","loading","WeakMap","forcedFirst","forcedLast","visibleFirstRowPos","scrollListener","lastScrollInfo","abortAnimation","async","minScrollDelta","mixins","scrollingHint","batchSize","striped","viewportOversize","adapter","createAdapter","map","MixinClass","fragment","ownerDocument","createDocumentFragment","addMixin","that","addAtBeginning","to","addAtBottom","removeFromBeginning","removeFromBottom","updateOffset","bodyScroller","parentElement","parent","sizer","children","find","tagName","createElement","add","idPrefix","insertBefore","firstChild","act","isGoingDown","onScrolledVertically","recreate","destroy","cleanUp","select","result","updateRow","createRow","String","toggle","selectProxy","proxy","recycle","ARowRenderer","real","abortResult","replaceChild","delete","create","ex","exceptionHeight","removeAll","perform","toRecycle","lastElementChild","items","appendChild","forEachRow","inPlace","rows","row","fromBeginning","nextSibling","previousSibling","updateSizer","setTransform","toFixed","bodySizer","ctx","recreateAnimated","recreatePure","clearPool","previousKey","cur","currentKey","next","UPDATE_CREATE","nodeYCurrentHeight","nextPos","prevHeight","animate","phases","previousFinder","currentFinder","activeAnimation","currentTimer","actPhase","executePhase","phase","anim","run","console","assert","offsetTop","startsWith","endsWith","dummyAnimation","filter","Set","split","clearTimeout","revalidate","shift","shiftTop","scrollResult","onScrolledImpl","onScrolled","shiftLast","currentDelta","total","shiftFirst","currentFirstRow","NONE","toAdd","SOME","toAddBottom","ALL","SOME_TOP","SOME_BOTTOM","manipulate","bottom","elem","text","anyElem","__transform__","assignStyles","source","plain","hyphen","replace","setProperty","rules","testVerifyTimeout","createTextNode","verifySheet","sheet","cssRules","every","selectorText","selector","l","deleteRule","rule","insertRule","cssRule","getSheetRule","addRule","id","updateRule","findIndex","stored","setTemplate","cleanId","innerHTML","tableIds","tableId","thead","tbody","tr","th","td","tableCSSClasses","ids","cssClasses","headerScroller","getElementsByTagName","insertAdjacentHTML","offsetWidth","offsetHeight","measureScrollbar","borderRight","newValue","frozenShift","unit","selectors","reduce","updateColumns","prefix","ruleNames","cssSelectors","thStyles","tdStyles","header","mixinClasses","cellPool","visibleColumns","visibleFirstColumnPos","horizontallyShifted","columnAdapter","createColumnAdapter","columnMixins","columnFragment","leftShift","column","addColumnMixin","addColumnAtStart","addColumnAtEnd","removeColumnFromStart","removeColumnFromEnd","updateColumnOffset","syncFrozen","onScrolledHorizontally","isGoingRight","onScrolledHorizontallyImpl","removeCellFromStart","firstElementChild","recycleCell","removeCellFromEnd","removeFrozenCells","columnIndices","columnIndex","removeFrozenColumns","removeAllColumns","includingFrozen","removeAllCells","arr","selectProxyCell","columnObj","pooled","updateCell","createCell","updateShiftedState","handleCellReady","selectCell","col","rowIndex","addCellAtStart","cell","insertFrozenCells","insertFrozenColumns","addCellAtEnd","updateHeaders","base","updateHeader","existing","createHeader","firstColumnPos","changed","childElementCount","mergeColumns","updateImpl","byId","idNode","updateShiftedStates","shifted","clazz","headers","querySelectorAll","bodies","shiftingChanged","htmlId","querySelector","document","ACellAdapter","LocalCell","mixinClass","updateColumnWidths","totalWidth","updateShifts","_left","oldLeft","prefetchTimeout","cleanupTimeout","prefetchRows","cleanUpRows","prefetchDown","nextLast","prefetchUp","scrollOffset","scrollTotal","triggerPrefetch","prefetchDownPossible","prefetchUpPossible","isLast","isFirst","op","cleanUpTop","newFirst","cleanUpBottom","newLast","triggerCleanUp","hidden","onVisibilityChanged","_visible","hide","show","wasHidden","sections","columnPadding","cleanHTMLId","main","scrollEnd","end","headerFooter","bodyFooter","maxHeight","pushTable","doc","table","extras","pushSeparator","separator","section","widthChanged","version","buildId"],"mappings":"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","file":"lineupengine.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lineupengine\"] = factory();\n\telse\n\t\troot[\"lineupengine\"] = factory();\n})(globalThis, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export function isPromiseLike(p: PromiseLike<unknown> | unknown): p is PromiseLike<unknown> {\n  return p != null && p && typeof (p as PromiseLike<unknown>).then === 'function';\n}\n\n/**\n * a promise like object that has an abort method\n */\nexport interface IAbortAblePromiseBase<T> extends PromiseLike<T> {\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): IAbortAblePromiseBase<TResult1 | TResult2>;\n  /**\n   * abort the promise when possible\n   */\n  abort(): void;\n  /**\n   * whether this promise was aborted\n   */\n  isAborted(): boolean;\n}\n\n/**\n * a promise like object that has an abort method and return the ABORTED symbol in case it was\n */\nexport declare type IAbortAblePromise<T> = IAbortAblePromiseBase<T | symbol>;\nexport declare type IAAP<T> = IAbortAblePromise<T>;\n\n/**\n * an update result with an item and a promise when the update has been done\n */\nexport interface IAsyncUpdate<T> {\n  item: T;\n  ready: IAbortAblePromise<void>;\n}\n\n/**\n * the symbol returned when the promise was aborted\n */\nexport const ABORTED = Symbol('aborted');\n\nfunction thenFactory<T>(loader: PromiseLike<T | symbol>, isAborted: () => boolean, abort: () => void) {\n  function then<TResult1 = T | symbol, TResult2 = never>(\n    onfulfilled?: ((value: T | symbol) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    _onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): IAbortAblePromiseBase<TResult1 | TResult2> {\n    const fullfiller = loader.then((loaded) => {\n      const loadedOrAborted = isAborted() ? ABORTED : loaded;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const res = onfulfilled ? onfulfilled(loadedOrAborted) : ((loadedOrAborted as unknown) as any);\n\n      if (isPromiseLike(res)) {\n        return res.then((r) => {\n          return isAborted() ? ABORTED : r;\n        });\n      }\n      return isAborted() ? ABORTED : res;\n    });\n    return {\n      then: thenFactory(fullfiller, isAborted, abort),\n      abort,\n      isAborted,\n    };\n  }\n  return then;\n}\n\n/**\n * abort able Promise wrapper, returns a promise which can be aborted, and trying to avoid executing therefore the wrapped promise\n * @param {Promise<T>} loader\n * @returns {any}\n */\nexport default function abortAble<T>(loader: PromiseLike<T>): IAAP<T> {\n  let aborted: ((v: symbol) => void) | null = null;\n  const isAborted = () => aborted === null;\n  const aborter = new Promise<symbol>((resolve) => {\n    aborted = resolve;\n  });\n  const abort = () => {\n    if (aborted == null) {\n      return;\n    }\n    aborted(ABORTED);\n    aborted = null;\n  };\n\n  const race = Promise.race<T | symbol>([aborter, loader]);\n\n  return {\n    then: thenFactory(race, isAborted, abort),\n    abort,\n    isAborted,\n  };\n}\n\nexport function abortAbleFetch(input: RequestInfo, init?: RequestInit): IAAP<Response> {\n  const controller = new AbortController();\n\n  const race = new Promise<Response | symbol>((resolve, reject) => {\n    const r = fetch(input, { signal: controller.signal, ...(init || {}) });\n    r.then(resolve);\n    r.catch((error) => {\n      if (error instanceof DOMException) {\n        resolve(ABORTED);\n      } else {\n        reject(error);\n      }\n    });\n  });\n\n  const abort = controller.abort.bind(controller);\n  const isAborted = () => controller.signal.aborted;\n\n  return {\n    then: thenFactory(race, isAborted, abort),\n    abort,\n    isAborted,\n  };\n}\n\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n  values: [\n    T1 | IAAP<T1>,\n    T2 | IAAP<T2>,\n    T3 | IAAP<T3>,\n    T4 | IAAP<T4>,\n    T5 | IAAP<T5>,\n    T6 | IAAP<T6>,\n    T7 | IAAP<T7>,\n    T8 | IAAP<T8>,\n    T9 | IAAP<T9>,\n    T10 | IAAP<T10>\n  ]\n): IAAP<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n  values: [\n    T1 | IAAP<T1>,\n    T2 | IAAP<T2>,\n    T3 | IAAP<T3>,\n    T4 | IAAP<T4>,\n    T5 | IAAP<T5>,\n    T6 | IAAP<T6>,\n    T7 | IAAP<T7>,\n    T8 | IAAP<T8>,\n    T9 | IAAP<T9>\n  ]\n): IAAP<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6, T7, T8>(\n  values: [\n    T1 | IAAP<T1>,\n    T2 | IAAP<T2>,\n    T3 | IAAP<T3>,\n    T4 | IAAP<T4>,\n    T5 | IAAP<T5>,\n    T6 | IAAP<T6>,\n    T7 | IAAP<T7>,\n    T8 | IAAP<T8>\n  ]\n): IAAP<[T1, T2, T3, T4, T5, T6, T7, T8]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6, T7>(\n  values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>, T4 | IAAP<T4>, T5 | IAAP<T5>, T6 | IAAP<T6>, T7 | IAAP<T7>]\n): IAAP<[T1, T2, T3, T4, T5, T6, T7]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5, T6>(\n  values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>, T4 | IAAP<T4>, T5 | IAAP<T5>, T6 | IAAP<T6>]\n): IAAP<[T1, T2, T3, T4, T5, T6]>;\nexport function abortAbleAll<T1, T2, T3, T4, T5>(\n  values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>, T4 | IAAP<T4>, T5 | IAAP<T5>]\n): IAAP<[T1, T2, T3, T4, T5]>;\nexport function abortAbleAll<T1, T2, T3, T4>(\n  values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>, T4 | IAAP<T4>]\n): IAAP<[T1, T2, T3, T4]>;\nexport function abortAbleAll<T1, T2, T3>(values: [T1 | IAAP<T1>, T2 | IAAP<T2>, T3 | IAAP<T3>]): IAAP<[T1, T2, T3]>;\nexport function abortAbleAll<T1, T2>(values: [T1 | IAAP<T1>, T2 | IAAP<T2>]): IAAP<[T1, T2]>;\nexport function abortAbleAll<T>(values: (T | IAAP<T>)[]): IAAP<T[]>;\n\n/**\n * similar to Promise.all but for abortAble\n */\nexport function abortAbleAll(values: unknown[]): IAAP<unknown[]> {\n  const loader = Promise.all(values);\n  let aborted: ((v: symbol) => void) | null = null;\n  const isAborted = () => aborted === null;\n  const aborter = new Promise<symbol>((resolve) => {\n    aborted = resolve;\n  });\n  const abort = () => {\n    if (aborted == null) {\n      return;\n    }\n    aborted(ABORTED);\n    for (const v of values) {\n      if (isAbortAble(v)) {\n        v.abort();\n      }\n    }\n    aborted = null;\n  };\n  const race = Promise.race<unknown | symbol>([aborter, loader]);\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    then: thenFactory(race, isAborted, abort) as any,\n    abort,\n    isAborted,\n  };\n}\n\n/**\n * checked whether the given argument is an abortable Promise\n * @param {IAbortAblePromise<any> | any} candidate\n * @returns {boolean}\n */\nexport function isAbortAble<T = unknown>(candidate: IAbortAblePromise<T> | T): candidate is IAbortAblePromise<T> {\n  return (\n    candidate != null &&\n    candidate &&\n    typeof (candidate as IAbortAblePromise<unknown>).then === 'function' &&\n    typeof (candidate as IAbortAblePromise<unknown>).abort === 'function'\n  );\n}\n\nexport function isAsyncUpdate<T>(update: T | void | undefined | null | IAsyncUpdate<T>): update is IAsyncUpdate<T> {\n  return update !== undefined && update !== null && update && isAbortAble((update as IAsyncUpdate<T>).ready);\n}\n\n/**\n * similar to Promise.resolve\n */\nexport function abortAbleResolveNow<T>(value: T): IAAP<T> {\n  function then<TResult1 = T | symbol, TResult2 = never>(\n    onfulfilled?: ((value: T | symbol) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    _onrejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): IAbortAblePromiseBase<TResult1 | TResult2> {\n    const res = onfulfilled ? onfulfilled(value) : (value as unknown);\n    if (isAbortAble(res)) {\n      return (res as unknown) as IAbortAblePromiseBase<TResult1 | TResult2>;\n    }\n    if (isPromiseLike(res)) {\n      return (abortAble(res) as unknown) as IAbortAblePromiseBase<TResult1 | TResult2>;\n    }\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      then: abortAbleResolveNow(res as TResult1) as any,\n      abort: () => undefined,\n      isAborted: () => false,\n    };\n  }\n  return {\n    then,\n    abort: () => undefined,\n    isAborted: () => false,\n  };\n}\n","import { IExceptionContext } from '../logic';\n\n/**\n * utility class for optimized row context access\n */\nexport default class KeyFinder {\n  private readonly cache: number[] = [];\n\n  private lastFilled = 0;\n\n  private readonly key2index = new Map<string, number>();\n\n  /**\n   * constructor for fast key based row access\n   * @param {IExceptionContext} context context to use\n   * @param {(rowIndex: number) => string} key key function\n   */\n  constructor(public readonly context: IExceptionContext, public readonly key: (rowIndex: number) => string) {\n    this.context.exceptions.forEach((e) => {\n      this.cache[e.index] = e.y;\n      this.key2index.set(key(e.index), e.index);\n    });\n  }\n\n  private findValidStart(before: number) {\n    for (let i = before - 1; i >= 0; i -= 1) {\n      if (this.cache[i] !== undefined) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * returns the position of the given given or -1 if not found\n   * @param {string} key\n   */\n  posByKey(key: string): { index: number; pos: number } {\n    const index = this.key2index.get(key);\n    if (index != null) {\n      return { index, pos: this.pos(index) };\n    }\n    return this.fillCacheTillKey(key);\n  }\n\n  /**\n   * returns the position of the given index\n   * @param {number} index index to look for\n   */\n  pos(index: number): number {\n    if (this.context.exceptions.length === 0) {\n      // fast pass\n      return index * this.context.defaultRowHeight;\n    }\n    const cached = this.cache[index];\n    if (cached !== undefined) {\n      return cached;\n    }\n    // need to compute it\n    // find the starting point where to start counting\n    const start = this.findValidStart(index);\n    if (start < 0) {\n      this.fillCache(0, index, 0);\n    } else {\n      this.fillCache(start + 1, index, this.cache[start] + this.heightOf(start));\n    }\n    return this.cache[index];\n  }\n\n  private fillCache(\n    first: number,\n    last: number,\n    offset: number,\n    callback?: (index: number, key: string, pos: number) => void\n  ) {\n    if (last <= this.lastFilled) {\n      // everything already there\n      if (!callback) {\n        return;\n      }\n      for (let i = first; i <= last; i += 1) {\n        callback(i, this.key(i), this.cache[i]);\n      }\n      return;\n    }\n    let pos = offset;\n    for (let i = first; i <= last; i += 1) {\n      this.cache[i] = pos;\n      const key = this.key(i);\n      this.key2index.set(key, i);\n      if (callback) {\n        callback(i, key, pos);\n      }\n      pos += this.heightOf(i);\n    }\n  }\n\n  /**\n   * returns the height of the row identified by index\n   * @param {number} index\n   */\n  heightOf(index: number): number {\n    const lookup = this.context.exceptionsLookup;\n    return lookup.get(index) ?? this.context.defaultRowHeight;\n  }\n\n  /**\n   * see heightOf but ignores padding and optional null in case of default height\n   * @param {number} index row index\n   * @param {boolean} returnDefault return null if default height\n   * @returns {number}\n   */\n  exceptionHeightOf(index: number, returnDefault = false): number | null {\n    const padding = this.context.padding(index);\n    const lookup = this.context.exceptionsLookup;\n    const entry = lookup.get(index);\n    if (entry != null) {\n      return entry - padding;\n    }\n    return returnDefault ? this.context.defaultRowHeight - padding : null;\n  }\n\n  /**\n   * padding of the given index\n   * @param {number} index\n   * @returns {number}\n   */\n  padding(index: number): number {\n    return this.context.padding(index);\n  }\n\n  private fillCacheTillKey(target: string) {\n    let pos = 0;\n    for (let i = this.lastFilled; i < this.context.numberOfRows; i += 1, this.lastFilled += 1) {\n      const c = this.cache[i];\n      if (c !== undefined) {\n        pos = c + this.heightOf(i);\n        continue;\n      }\n      // new one fill up\n      const key = this.key(i);\n      this.cache[i] = pos;\n      this.key2index.set(key, i);\n      if (key === target) {\n        return { index: i, pos };\n      }\n      pos += this.heightOf(i);\n    }\n    return { index: -1, pos: -1 };\n  }\n\n  /**\n   * computes the positions and keys for a range of given indices\n   * @param {number} first first row index\n   * @param {number} last last row index\n   * @param {number} offset pos offset for the first row index\n   * @param {(index: number, key: string, pos: number) => void} callback callback for each identified index\n   */\n  positions(\n    first: number,\n    last: number,\n    offset: number,\n    callback?: (index: number, key: string, pos: number) => void\n  ): void {\n    this.fillCache(first, last, offset, callback);\n  }\n}\n","import { IExceptionContext } from '../logic';\nimport KeyFinder from './KeyFinder';\n\nexport { default as KeyFinder } from './KeyFinder';\n\n/**\n * different row animation modes\n */\nexport enum EAnimationMode {\n  /**\n   * plain update existed both before and after\n   */\n  UPDATE,\n  /**\n   * exists both before and after but wasn't visible yet thus was created\n   */\n  UPDATE_CREATE,\n  /**\n   * exists both before and after is visible but not needed anymore and thus removed\n   */\n  UPDATE_REMOVE,\n  /**\n   * row appears\n   */\n  SHOW,\n  /**\n   * row disappears\n   */\n  HIDE,\n}\n\n/**\n * animated row item\n */\nexport interface IAnimationItem {\n  mode: EAnimationMode;\n  node: HTMLElement;\n  key: string;\n\n  /**\n   * previous context information\n   */\n  previous: {\n    index: number | -1;\n    y: number;\n    height: number | null;\n  };\n\n  /**\n   * position of the added node considering the previous height\n   */\n  nodeY: number;\n  /**\n   * position of the added node considering the current height\n   */\n  nodeYCurrentHeight: number;\n\n  /**\n   * current position\n   */\n  current: {\n    index: number | -1;\n    y: number;\n    height: number | null;\n  };\n}\n\nconst NO_CHANGE_DELTA = 1;\n\nexport function noAnimationChange(\n  { previous, mode, nodeY, current }: IAnimationItem,\n  previousHeight: number,\n  currentHeight: number\n): boolean {\n  // sounds like the same\n  const prev = previous.height == null ? previousHeight : previous.height;\n  const curr = current.height == null ? currentHeight : current.height;\n  return (\n    mode === EAnimationMode.UPDATE &&\n    Math.abs(previous.y - nodeY) <= NO_CHANGE_DELTA &&\n    Math.abs(prev - curr) <= NO_CHANGE_DELTA\n  );\n}\n\nexport interface IPhase {\n  readonly delay: number;\n\n  apply(item: Readonly<IAnimationItem>, previousFinder: KeyFinder, currentFinder: KeyFinder): void;\n}\n\nexport interface IAnimationContext {\n  readonly previous: IExceptionContext;\n\n  previousKey(previousRowIndex: number): string;\n\n  currentKey(currentRowIndex: number): string;\n\n  phases?: IPhase[];\n}\n\n/**\n * maximal duration of all animations + extra waiting before e.g. rows are really removed\n * @type {number}\n */\nconst MAX_ANIMATION_TIME = 1100;\n\nexport const defaultPhases = [\n  {\n    delay: 0, // before\n    apply({ mode, previous, nodeY, current, node }: Readonly<IAnimationItem>): void {\n      const actNode = node;\n      actNode.dataset.animation = EAnimationMode[mode].toLowerCase();\n      actNode.style.transform = `translate(0, ${previous.y - nodeY}px)`;\n      if (mode === EAnimationMode.SHOW) {\n        // already target height\n        actNode.style.height = current.height !== null ? `${current.height}px` : null;\n      } else {\n        // always set previous height for default height changes\n        actNode.style.height = `${previous.height}px`;\n      }\n      if (mode === EAnimationMode.SHOW) {\n        actNode.style.opacity = '0';\n      } else if (mode === EAnimationMode.HIDE) {\n        actNode.style.opacity = '1';\n      } else {\n        actNode.style.opacity = null;\n      }\n    },\n  },\n  {\n    delay: 10, // after some delay for the before phase have been applied visually\n    apply({ mode, current, nodeY, node }: Readonly<IAnimationItem>): void {\n      const actNode = node;\n      // null for added/update since already at the right position\n      actNode.style.transform =\n        mode === EAnimationMode.HIDE || mode === EAnimationMode.UPDATE_REMOVE\n          ? `translate(0, ${current.y - nodeY}px)`\n          : '';\n      if (mode !== EAnimationMode.HIDE) {\n        // keep height for removal\n        actNode.style.height = current.height !== null ? `${current.height}px` : null;\n      }\n      if (mode === EAnimationMode.SHOW) {\n        actNode.style.opacity = '1';\n      } else if (mode === EAnimationMode.HIDE) {\n        actNode.style.opacity = '0';\n      } else {\n        actNode.style.opacity = null;\n      }\n    },\n  },\n  {\n    delay: MAX_ANIMATION_TIME, // cleanup\n    apply({ node }: Readonly<IAnimationItem>): void {\n      const actNode = node;\n      delete actNode.dataset.animation;\n      actNode.style.opacity = null;\n      actNode.style.transform = '';\n    },\n  },\n];\n","export * from './scroll';\n\n/**\n * clear node clearing\n * @param node\n * @internal\n */\nexport function clear<T extends Node>(node: T): T {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n","/* eslint-disable no-underscore-dangle */\nexport declare type IDelayedMode = number | 'animation' | 'sync';\n\nexport const defaultMode: IDelayedMode = 'animation'; // Boolean((<any>window).chrome) ? 'animation' : 0, // animation frame on chrome;\n\nexport interface IScrollInfo {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n}\n\ninterface IScrollHandler {\n  timer: number;\n  prev: IScrollInfo | null;\n  handler: ((act: IScrollInfo) => void)[];\n}\n\nfunction dummy(): IScrollHandler {\n  return {\n    handler: [],\n    prev: null,\n    timer: -1,\n  };\n}\n\nclass ScrollHandler {\n  private readonly sync = dummy();\n\n  private readonly animation = dummy();\n\n  private readonly numbers = new Map<number, IScrollHandler>();\n\n  // current: IScrollInfo;\n  // private prev: IScrollInfo | null = null;\n\n  get current() {\n    return this.asInfo();\n  }\n\n  constructor(private readonly node: HTMLElement) {\n    // this.current = this.asInfo();\n\n    node.addEventListener(\n      'scroll',\n      () => {\n        // this.current = this.asInfo();\n\n        // if (this.prev && (Math.abs(this.current.left - this.prev.left) + Math.abs(this.current.top - this.prev.top)) < 4) {\n        //   return;\n        // }\n        // this.prev = this.current;\n\n        if (this.sync.handler.length > 0) {\n          this.handle(this.sync);\n        }\n        this.handleAnimation();\n        this.handleTimeouts();\n      },\n      {\n        passive: true,\n      }\n    );\n  }\n\n  private handle(handler: IScrollHandler) {\n    const info = this.current;\n    if (handler.prev && Math.abs(info.left - handler.prev.left) + Math.abs(info.top - handler.prev.top) < 4) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    handler.prev = info;\n    for (const s of handler.handler) {\n      s(info);\n    }\n  }\n\n  private handleAnimation() {\n    if (this.animation.timer !== -1 || this.animation.handler.length === 0) {\n      return;\n    }\n    this.animation.timer = 1;\n    requestAnimationFrame(this.handleAnimationImpl);\n  }\n\n  private readonly handleAnimationImpl = () => {\n    if (this.animation.timer !== 1) {\n      return;\n    }\n    this.handle(this.animation);\n    this.animation.timer = -1;\n  };\n\n  private handleTimeouts() {\n    if (this.numbers.size === 0) {\n      return;\n    }\n\n    this.numbers.forEach((handler, n) => {\n      if (handler.handler.length === 0) {\n        return;\n      }\n      // eslint-disable-next-line no-param-reassign, no-restricted-globals\n      handler.timer = self.setTimeout(() => {\n        this.handle(handler);\n        // eslint-disable-next-line no-param-reassign\n        handler.timer = -1;\n      }, n);\n    });\n  }\n\n  asInfo(): IScrollInfo {\n    return {\n      left: this.node.scrollLeft,\n      top: this.node.scrollTop,\n      width: this.node.clientWidth,\n      height: this.node.clientHeight,\n    };\n  }\n\n  push(mode: IDelayedMode, handler: (act: IScrollInfo) => void) {\n    if (typeof mode === 'number') {\n      const entry = this.numbers.get(mode) ?? dummy();\n      entry.handler.push(handler);\n      this.numbers.set(mode, entry);\n    }\n\n    switch (mode) {\n      case 'sync':\n        this.sync.handler.push(handler);\n        break;\n      case 'animation':\n        this.animation.handler.push(handler);\n        break;\n    }\n  }\n\n  remove(handler: (act: IScrollInfo) => void) {\n    const test = [this.sync, this.animation].concat(Array.from(this.numbers.values()));\n\n    return test.some((d) => {\n      const index = d.handler.indexOf(handler);\n      if (index >= 0) {\n        d.handler.splice(index, 1);\n      }\n      return index >= 0;\n    });\n  }\n\n  isWaiting(mode: IDelayedMode) {\n    switch (mode) {\n      case 'animation':\n        return this.animation.timer >= 0;\n      case 'sync':\n        return false;\n      default:\n        return this.numbers.get(mode)?.timer >= 0 ?? false;\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function addScroll(\n  scrollElement: HTMLElement,\n  mode: IDelayedMode,\n  handler: (act: IScrollInfo) => void\n): IScrollInfo {\n  // hide in element to have just one real listener\n  const c = scrollElement as HTMLElement & { __le_scroller__?: ScrollHandler };\n  if (!c.__le_scroller__) {\n    c.__le_scroller__ = new ScrollHandler(scrollElement);\n  }\n  const s: ScrollHandler = c.__le_scroller__;\n  s.push(mode, handler);\n  return s.asInfo();\n}\n\n/**\n * @internal\n */\nexport function isScrollEventWaiting(scroller: HTMLElement, mode: IDelayedMode): boolean {\n  const c = scroller as HTMLElement & { __le_scroller__?: ScrollHandler };\n  if (!c.__le_scroller__) {\n    return false;\n  }\n  const s: ScrollHandler = c.__le_scroller__;\n  return s.isWaiting(mode);\n}\n\n/**\n * @internal\n */\nexport function removeScroll(scroller: HTMLElement, handler: (act: IScrollInfo) => void): void {\n  const c = scroller as HTMLElement & { __le_scroller__?: ScrollHandler };\n  if (c.__le_scroller__) {\n    c.__le_scroller__.remove(handler);\n  }\n}\n","/**\n * generic exception of a uniform space\n */\nexport interface IRowHeightException {\n  /**\n   * reference index\n   */\n  readonly index: number;\n  /**\n   * height of the element\n   */\n  readonly height: number;\n  /**\n   * starting y\n   */\n  readonly y: number;\n  /**\n   * ending y\n   */\n  readonly y2: number;\n}\n\nclass RowHeightException implements IRowHeightException {\n  constructor(public readonly index: number, public readonly y: number, public readonly height: number) {}\n\n  get y2() {\n    return this.y + this.height;\n  }\n}\n\n/**\n * similar to a map\n */\nexport interface IRowHeightExceptionLookup {\n  keys(): IterableIterator<number>;\n\n  get(index: number): number | undefined;\n\n  has(index: number): boolean;\n\n  readonly size: number;\n}\n\n/**\n * exception context for optimized non uniform height exceptions\n */\nexport interface IExceptionContext {\n  /**\n   * height exceptions as a list\n   */\n  readonly exceptions: IRowHeightException[];\n  /**\n   * lookup for the height of a given index, if not part of this map it has the default height\n   */\n  readonly exceptionsLookup: IRowHeightExceptionLookup;\n  /**\n   * number of rows\n   */\n  readonly numberOfRows: number;\n  /**\n   * default height of rows\n   */\n  readonly defaultRowHeight: number;\n  /**\n   * total height\n   */\n  readonly totalHeight: number;\n\n  /**\n   * padding between rows, however already included in all heights to have the precise numbers\n   */\n  readonly padding: (index: number) => number;\n}\n\n/**\n * creates a uniform exception context, i.e no exceptions all rows are of the same height\n * @param {number} numberOfRows\n * @param {number} currentRowHeight\n * @param {number} rowPadding padding between rows\n * @return {IExceptionContext}\n */\nexport function uniformContext(numberOfRows: number, rowHeight: number, rowPadding = 0): IExceptionContext {\n  const currentRowHeight = rowHeight + rowPadding;\n  const exceptionsLookup = {\n    keys: () => [].values(),\n    get: () => currentRowHeight,\n    has: () => false,\n    size: 0,\n  };\n  return {\n    exceptions: [],\n    exceptionsLookup,\n    totalHeight: numberOfRows * currentRowHeight,\n    numberOfRows,\n    defaultRowHeight: currentRowHeight,\n    padding: () => rowPadding,\n  };\n}\n\n/**\n * computes the most frequent value in a given array like\n * @param {} values\n * @return {number}\n */\nfunction mostFrequentValue(values: { forEach: (callback: (height: number, index: number) => void) => void }): number {\n  const lookup = new Map<number, number>();\n  values.forEach((value) => {\n    lookup.set(value, (lookup.get(value) || 0) + 1);\n  });\n  if (lookup.size === 0) {\n    return 20; // default value since it doesn't matter\n  }\n  // sort desc take first key and asc by the second in case of tie, it is optimized to have exceptions for higher rows less for big rows\n  const sorted = Array.from(lookup).sort((a, b) => {\n    if (a[1] !== b[1]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  const mostFrequent = sorted[0][0];\n  if (mostFrequent === 0) {\n    // corner case\n    return sorted.length > 1 ? sorted[1][0] : 20; // all empty\n  }\n  return mostFrequent;\n}\n\n/**\n * creates a non uniform context based on the given array like heights\n * @param rowHeights array like to get the heights\n * @param {number} defaultRowHeight if not given the most frequent value will be used\n * @param {number} rowPadding padding between rows\n * @return {IExceptionContext}\n */\nexport function nonUniformContext(\n  rowHeights: {\n    forEach: (callback: (height: number, index: number) => void) => void;\n  },\n  defaultRowHeight = Number.NaN,\n  rowPadding: number | ((index: number) => number) = 0\n): IExceptionContext {\n  const exceptionsLookup = new Map<number, number>();\n  const exceptions: IRowHeightException[] = [];\n\n  const padding = typeof rowPadding === 'function' ? rowPadding : () => rowPadding as number;\n\n  let actualDefaultRowHeight = defaultRowHeight;\n  if (Number.isNaN(actualDefaultRowHeight)) {\n    actualDefaultRowHeight = mostFrequentValue(rowHeights);\n  }\n\n  actualDefaultRowHeight += padding(-1);\n\n  let prev = -1;\n  let acc = 0;\n  let totalHeight = 0;\n  let numberOfRows = 0;\n  rowHeights.forEach((height, index) => {\n    const paddedHeight = height + padding(index);\n    totalHeight += paddedHeight;\n    numberOfRows += 1;\n    if (paddedHeight === actualDefaultRowHeight) {\n      // regular\n      return;\n    }\n    exceptionsLookup.set(index, paddedHeight);\n    const between = (index - prev - 1) * actualDefaultRowHeight;\n    prev = index;\n    const y = acc + between;\n    acc = y + paddedHeight;\n    exceptions.push(new RowHeightException(index, y, paddedHeight));\n  });\n  return {\n    exceptionsLookup,\n    exceptions,\n    totalHeight,\n    defaultRowHeight: actualDefaultRowHeight,\n    numberOfRows,\n    padding,\n  };\n}\n\n/**\n * creates a random context with the given constraints\n * @param {number} numberOfRows\n * @param {number} defaultRowHeight\n * @param {number} minRowHeight\n * @param {number} maxRowHeight\n * @param {number} ratio around ratio percent will get a non uniform height\n * @param {number} seed random seed\n * @return {IExceptionContext}\n */\nexport function randomContext(\n  numberOfRows: number,\n  defaultRowHeight: number,\n  minRowHeight = 2,\n  maxRowHeight = defaultRowHeight * 10,\n  ratio = 0.2,\n  seed = Date.now()\n): IExceptionContext {\n  let actSeed = seed;\n  const random = () => {\n    const x = Math.sin(actSeed) * 10000;\n    actSeed += 1;\n    return x - Math.floor(x);\n  };\n\n  const getter = () => {\n    const coin = random();\n    if (coin < ratio) {\n      // non uniform\n      return minRowHeight + Math.round(random() * (maxRowHeight - minRowHeight));\n    }\n    return defaultRowHeight;\n  };\n  const forEach = (callback: (height: number, index: number) => void) => {\n    for (let index = 0; index < numberOfRows; index += 1) {\n      callback(getter(), index);\n    }\n  };\n  return nonUniformContext({ forEach }, defaultRowHeight);\n}\n\nexport interface IVisibleRange {\n  /**\n   * first visible index\n   */\n  readonly first: number;\n  /**\n   * last visible index\n   */\n  readonly last: number;\n  /**\n   * position of the first visible row in pixel\n   */\n  readonly firstRowPos: number;\n  /**\n   * position of the last visible row including its size\n   */\n  readonly endPos: number;\n}\n\n/**\n * computes the visible range\n * @param {number} scrollTop top scrolling\n * @param {number} clientHeight visible height\n * @param {number} rowHeight height of a row by default\n * @param {IRowHeightException[]} heightExceptions exceptions of this default height\n * @param {number} numberOfRows the number of rows\n * @return {IVisibleRange} the computed visible range\n */\nexport function range(\n  scrollTop: number,\n  clientHeight: number,\n  rowHeight: number,\n  heightExceptions: IRowHeightException[],\n  numberOfRows: number\n): IVisibleRange {\n  if (numberOfRows === 0) {\n    return { first: 0, last: -1, firstRowPos: 0, endPos: 0 };\n  }\n  if (numberOfRows === 1) {\n    return {\n      first: 0,\n      last: 0,\n      firstRowPos: 0,\n      endPos: heightExceptions.length === 0 ? rowHeight : heightExceptions[0].y2,\n    };\n  }\n  const offset = scrollTop;\n  const offset2 = offset + clientHeight;\n\n  function indexOf(pos: number, indexShift: number) {\n    return Math.min(numberOfRows - 1, indexShift + Math.max(0, Math.floor(pos / rowHeight)));\n  }\n\n  function calc(offsetShift: number, indexShift: number) {\n    const shifted = offset - offsetShift;\n    const shifted2 = offset2 - offsetShift;\n\n    const first = indexOf(shifted, indexShift);\n    const last = indexOf(shifted2, indexShift);\n\n    const firstRowPos = offsetShift + (first - indexShift) * rowHeight;\n    const endPos = offsetShift + (last + 1 - indexShift) * rowHeight;\n\n    // if (!isGuess) {\n    //  console.log(first, '@', firstRowPos, last, '#', end, offset, offset2, firstRowPos <= offset, offset2 <= end);\n    // }\n    // console.assert(\n    //   !isGuess || !(firstRowPos > offset || (endPos < offset2 && last < numberOfRows - 1)),\n    //   'error',\n    //   isGuess,\n    //   firstRowPos,\n    //   endPos,\n    //   offset,\n    //   offset2,\n    //   indexShift,\n    //   offsetShift\n    // );\n    return { first, last, firstRowPos, endPos };\n  }\n\n  const r = calc(0, 0);\n  if (heightExceptions.length === 0) {\n    // uniform\n    return r;\n  }\n  if (r.last < heightExceptions[0].index) {\n    // console.log('before the first exception = uniform with no shift');\n    // console.log(r.first, '@', r.firstRowPos, r.last, '#', r.end, offset, offset2, r.firstRowPos <= offset, offset2 <= r.end);\n    return r;\n  }\n  if (r.last === heightExceptions[0].index && heightExceptions[0].height > rowHeight) {\n    return Object.assign(r, { endPos: heightExceptions[0].y2 });\n  }\n\n  // the position where the exceptions ends\n  const lastPos = heightExceptions[heightExceptions.length - 1];\n  if (offset >= lastPos.y) {\n    const rest = calc(lastPos.y2, lastPos.index + 1);\n    if (offset < lastPos.y2) {\n      // include me\n      return Object.assign(rest, {\n        first: lastPos.index,\n        firstRowPos: lastPos.y,\n      });\n    }\n    return rest;\n  }\n  // we have some exceptions\n  const visible: IRowHeightException[] = [];\n  let closest = heightExceptions[0]; // closest before not in range\n  for (const item of heightExceptions) {\n    const { y, y2 } = item;\n    if (y >= offset2) {\n      break;\n    }\n    if (y2 <= offset) {\n      closest = item;\n      continue;\n    }\n    visible.push(item);\n  }\n\n  if (visible.length === 0) {\n    // console.log('we are in the between some exceptions and none are visible');\n    return calc(closest.y2, closest.index + 1); // skip myself\n  }\n\n  {\n    // console.log('we show at least one exception');\n    const firstException = visible[0];\n    const lastException = visible[visible.length - 1];\n\n    const first = Math.max(0, firstException.index - Math.max(0, Math.ceil((firstException.y - offset) / rowHeight)));\n    let last = lastException.index;\n    if (offset2 >= lastException.y2) {\n      last = indexOf(offset2 - lastException.y2, lastException.index + 1);\n    }\n    const firstRowPos = firstException.y - (firstException.index - first) * rowHeight;\n    const endPos = lastException.y2 + (last - lastException.index) * rowHeight;\n\n    // console.log(first, '@', firstRowPos, last, '#', end, offset, offset2, firstRowPos <= offset, offset2 <= end);\n\n    // console.assert(\n    //   firstRowPos <= offset && (endPos >= offset2 || last === numberOfRows - 1),\n    //   'error',\n    //   firstRowPos,\n    //   endPos,\n    //   offset,\n    //   offset2,\n    //   firstException,\n    //   lastException\n    // );\n    return { first, last, firstRowPos, endPos };\n  }\n}\n\nexport function frozenDelta(\n  current: number[],\n  target: number[]\n): { added: number[]; removed: number[]; common: number } {\n  const currentLength = current.length;\n  const targetLength = target.length;\n  if (currentLength === 0) {\n    return { added: target, removed: [], common: 0 };\n  }\n  if (targetLength === 0) {\n    return { added: [], removed: current, common: 0 };\n  }\n  if (currentLength === targetLength) {\n    // since sorted and left increasing true\n    return { added: [], removed: [], common: currentLength };\n  }\n  const removed = current.slice(Math.min(targetLength, currentLength));\n  const added = target.slice(Math.min(targetLength, currentLength));\n  return { added, removed, common: currentLength - removed.length };\n}\n\nexport function updateFrozen(\n  old: number[],\n  columns: { frozen: boolean }[],\n  first: number\n): { target: number[]; added: number[]; removed: number[] } {\n  const oldLast = old.length === 0 ? 0 : old[old.length - 1] + 1;\n  const added: number[] = [];\n  const removed: number[] = [];\n\n  for (let i = old.length - 1; i >= 0; i -= 1) {\n    const index = old[i];\n    if (index >= first) {\n      removed.push(old.pop());\n    } else {\n      // can stop since sorted and it will never happen again\n      break;\n    }\n  }\n  // added\n  for (let i = oldLast; i < first; i += 1) {\n    if (columns[i].frozen) {\n      added.push(i);\n      old.push(i);\n    }\n  }\n  return { target: old, added, removed };\n}\n","import { IExceptionContext } from '../logic';\n\n/**\n * scrolling result\n */\nexport enum EScrollResult {\n  /**\n   * nothing has changed\n   */\n  NONE,\n  /**\n   * all rows needed to be recreated\n   */\n  ALL,\n  /**\n   * unknown\n   */\n  SOME,\n  /**\n   * some rows are added at the bottom\n   */\n  SOME_BOTTOM,\n  /**\n   * some rows are added at the top\n   */\n  SOME_TOP,\n}\n\n/**\n * adapter context for mixins to avoid public fields\n */\nexport interface IMixinAdapter {\n  readonly visible: {\n    // writable\n    first: number;\n    last: number;\n    forcedFirst: number;\n    forcedLast: number;\n  };\n  readonly visibleFirstRowPos: number;\n\n  readonly context: IExceptionContext;\n  readonly scrollOffset: number;\n  readonly scrollTotal: number;\n\n  addAtBeginning(from: number, to: number, frozenShift: number): void;\n\n  addAtBottom(from: number, to: number): void;\n\n  removeFromBeginning(from: number, to: number, frozenShift: number): void;\n\n  removeFromBottom(from: number, to: number): void;\n\n  updateOffset(firstRowPos: number): void;\n\n  /**\n   * triggers to sync frozen items\n   * @param {number} first\n   * @return {number} frozenShift\n   */\n  syncFrozen?(first: number): number;\n\n  isScrollEventWaiting(): boolean;\n}\n\nexport interface IMixin {\n  onScrolled(isGoingDown: boolean, scrollResult: EScrollResult): void;\n}\n\nexport interface IMixinClass {\n  new (adapter: IMixinAdapter, options?: unknown): IMixin;\n}\n","const PREFIX = 'le';\n\n/**\n * @internal\n * @param suffix suffix to suffix\n */\nexport function cssClass(suffix?: string): string {\n  if (!suffix) {\n    return PREFIX;\n  }\n  return `${PREFIX}-${suffix}`;\n}\n\nexport const CSS_CLASS_LOADING = cssClass('loading');\nexport const CSS_CLASS_FROZEN = cssClass('frozen');\nexport const CSS_CLASS_HIDDEN = cssClass('hidden');\nexport const CSS_CLASS_MULTI = cssClass('multi');\nexport const CSS_CLASS_EVEN = cssClass('even');\nexport const CSS_CLASS_SHIFTED = cssClass('shifted');\nexport const CSS_CLASS_SCROLLBAR_TESTER = cssClass('scrollbar-tester');\n\nexport const CSS_CLASS_HEADER = cssClass('header');\nexport const CSS_CLASS_BODY = cssClass('body');\nexport const CSS_CLASS_FOOTER = cssClass('footer');\n\nexport const CSS_CLASS_THEAD = cssClass('thead');\nexport const CSS_CLASS_TBODY = cssClass('tbody');\n\nexport const CSS_CLASS_TR = cssClass('tr');\nexport const CSS_CLASS_TH = cssClass('th');\nexport const CSS_CLASS_TD = cssClass('td');\n\nexport const CSS_CLASS_SCROLLING = cssClass('scrolling');\nexport const CSS_CLASS_ROW_ANIMATION = cssClass('row-animation');\n","import { ABORTED, IAbortAblePromise, isAbortAble } from './abortAble';\nimport {\n  defaultPhases,\n  EAnimationMode,\n  IAnimationContext,\n  IAnimationItem,\n  IPhase,\n  noAnimationChange,\n} from './animation';\nimport KeyFinder from './animation/KeyFinder';\nimport { addScroll, clear, defaultMode, IDelayedMode, IScrollInfo, removeScroll } from './internal';\nimport { isScrollEventWaiting } from './internal/scroll';\nimport { IExceptionContext, range } from './logic';\nimport { EScrollResult, IMixin, IMixinAdapter, IMixinClass } from './mixin';\nimport {\n  cssClass,\n  CSS_CLASS_EVEN,\n  CSS_CLASS_FOOTER,\n  CSS_CLASS_LOADING,\n  CSS_CLASS_ROW_ANIMATION,\n  CSS_CLASS_SCROLLING,\n  CSS_CLASS_TR,\n} from './styles';\n\nexport declare type IRowRenderContext = IExceptionContext;\n\nexport function isLoadingCell(node: HTMLElement): boolean {\n  return node.classList.contains(CSS_CLASS_LOADING);\n}\n\nexport interface IRowRendererOptions {\n  /**\n   * async update on scrolling\n   * animation -> use requestAnimationFrame\n   * sync -> execute within scroll listener\n   * {number} -> execute within this delay using setTimeout\n   * @default is chrome ? animation else 0\n   */\n  async: IDelayedMode;\n\n  /**\n   * minimal number of pixel the scrollbars has to move\n   * @default 10\n   */\n  minScrollDelta: number;\n\n  /**\n   * min number of rows that should be added or removed\n   * @default 10\n   */\n  batchSize: number;\n\n  /**\n   * number of pixels the viewport is virtually larger\n   * @default 200\n   */\n  viewportOversize: number;\n\n  /**\n   * class of mixins to use for optimized rendering\n   */\n  mixins: IMixinClass[];\n\n  /**\n   * add the scrolling hint class while scrolling to give a user feedback\n   */\n  scrollingHint: boolean;\n\n  /**\n   * whether background striping should be enabled\n   */\n  striped: boolean;\n}\n\n/**\n * base class for creating a scalable table renderer based on rows\n */\nexport abstract class ARowRenderer {\n  private readonly pool: HTMLElement[] = [];\n\n  private readonly loadingPool: HTMLElement[] = [];\n\n  private readonly loading = new WeakMap<HTMLElement, IAbortAblePromise<void>>();\n\n  private readonly fragment: DocumentFragment;\n\n  /**\n   * currently visible slice\n   */\n  protected readonly visible = {\n    first: 0,\n    forcedFirst: 0,\n    last: -1,\n    forcedLast: -1,\n  };\n\n  /**\n   * position of the first visible row in pixel\n   * @type {number}\n   */\n  protected visibleFirstRowPos = 0;\n\n  private readonly adapter: IMixinAdapter;\n\n  private readonly mixins: IMixin[];\n\n  private scrollListener: ((act: IScrollInfo) => void) | null = null;\n\n  protected lastScrollInfo: IScrollInfo | null = null;\n\n  private abortAnimation: () => void = () => undefined;\n\n  protected readonly options: Readonly<IRowRendererOptions> = {\n    async: defaultMode,\n    minScrollDelta: 10,\n    mixins: [],\n    scrollingHint: false,\n    batchSize: 10,\n    striped: false,\n    viewportOversize: 200,\n  };\n\n  constructor(protected readonly body: HTMLElement, options: Partial<IRowRendererOptions> = {}) {\n    this.adapter = this.createAdapter();\n    Object.assign(this.options, options);\n    this.mixins = this.options.mixins.map((MixinClass) => new MixinClass(this.adapter));\n\n    this.fragment = body.ownerDocument.createDocumentFragment();\n  }\n\n  protected abstract get idPrefix(): string;\n\n  /**\n   * register another mixin to this renderer\n   * @param {IMixinClass} MixinClass the mixin class to instantiate\n   * @param options optional constructor options\n   */\n  protected addMixin(MixinClass: IMixinClass, options?: unknown): void {\n    this.mixins.push(new MixinClass(this.adapter, options));\n  }\n\n  private createAdapter(): IMixinAdapter {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n    return {\n      visible: this.visible,\n      addAtBeginning: (from, to) => this.addAtBeginning(from, to),\n      addAtBottom: this.addAtBottom.bind(this),\n      removeFromBeginning: (from, to) => this.removeFromBeginning(from, to),\n      removeFromBottom: this.removeFromBottom.bind(this),\n      updateOffset: this.updateOffset.bind(this),\n      isScrollEventWaiting: () => isScrollEventWaiting(this.bodyScroller, this.options.async),\n      get visibleFirstRowPos() {\n        return that.visibleFirstRowPos;\n      },\n      get context() {\n        return that.context;\n      },\n      get scrollOffset() {\n        return that.lastScrollInfo ? that.lastScrollInfo.top : 0;\n      },\n      get scrollTotal() {\n        return this.lastScrollInfo ? this.lastScrollInfo.height : this.bodyScroller.clientHeight;\n      },\n    };\n  }\n\n  /**\n   * get the scrolling container i.e. parent of the body element\n   * @returns {HTMLElement}\n   */\n  protected get bodyScroller(): HTMLElement {\n    return this.body.parentElement as HTMLElement;\n  }\n\n  protected get bodySizer(): HTMLElement {\n    const parent = this.bodyScroller;\n    const sizer = (Array.from(parent.children) as HTMLElement[]).find((d) => d.tagName.toLowerCase() === 'footer');\n    if (sizer) {\n      return sizer;\n    }\n    const s = parent.ownerDocument.createElement('footer');\n    s.classList.add(CSS_CLASS_FOOTER, cssClass(`footer-${this.idPrefix}`));\n    parent.insertBefore(s, parent.firstChild);\n    return s;\n  }\n\n  /**\n   * the current render context, upon change `recreate` the whole table\n   * @returns {IRowRenderContext}\n   */\n  protected abstract get context(): IRowRenderContext;\n\n  /**\n   * creates a new row\n   * @param {HTMLElement} node the node of the row\n   * @param {number} index the row index\n   * @returns {IAbortAblePromise<void> | void} either an abortable or nothing\n   */\n  protected abstract createRow(node: HTMLElement, index: number): IAbortAblePromise<void> | void;\n\n  /**\n   * updates a row\n   * @param {HTMLElement} node the node of the row\n   * @param {number} index the row index\n   * @returns {IAbortAblePromise<void> | void} either an abortable or nothing\n   */\n  protected abstract updateRow(node: HTMLElement, index: number): IAbortAblePromise<void> | void;\n\n  /**\n   * initializes the table and register the onscroll listener\n   * @returns {void} nothing\n   */\n  protected init(): void {\n    const scroller = this.bodyScroller;\n\n    let old = addScroll(\n      scroller,\n      this.options.async,\n      (this.scrollListener = (act) => {\n        this.lastScrollInfo = act;\n        if (\n          Math.abs(old.top - act.top) < this.options.minScrollDelta &&\n          Math.abs(old.height - act.height) < this.options.minScrollDelta\n        ) {\n          return;\n        }\n        const isGoingDown = act.top > old.top;\n        old = act;\n        this.onScrolledVertically(act.top, act.height, isGoingDown);\n        if (this.options.scrollingHint) {\n          this.body.classList.remove(CSS_CLASS_SCROLLING);\n        }\n      })\n    );\n    if (this.options.scrollingHint) {\n      addScroll(scroller, 'animation', () => this.body.classList.add(CSS_CLASS_SCROLLING));\n    }\n    this.recreate();\n  }\n\n  /**\n   * destroys this renderer and unregisters all event listeners\n   */\n  destroy(): void {\n    removeScroll(this.bodyScroller, this.scrollListener);\n    this.body.remove();\n  }\n\n  private static cleanUp(item: HTMLElement) {\n    // eslint-disable-next-line no-param-reassign\n    item.style.height = null;\n  }\n\n  private select(index: number): { item: HTMLElement; result: IAbortAblePromise<void> | void } {\n    let item: HTMLElement = this.pool.pop();\n    let result: IAbortAblePromise<void> | void;\n    if (item != null) {\n      result = this.updateRow(item, index);\n    } else {\n      item = this.loadingPool.pop();\n      if (item != null) {\n        item.classList.remove(CSS_CLASS_LOADING);\n        result = this.createRow(item, index);\n      } else {\n        item = this.body.ownerDocument.createElement('div');\n        item.classList.add(CSS_CLASS_TR, cssClass(`tr-${this.idPrefix}`));\n        result = this.createRow(item, index);\n      }\n    }\n    item.dataset.index = String(index);\n    if (this.options.striped) {\n      item.classList.toggle(CSS_CLASS_EVEN, index % 2 === 0);\n    }\n    return { item, result };\n  }\n\n  private selectProxy() {\n    let proxy = this.loadingPool.pop();\n    if (proxy == null) {\n      proxy = this.body.ownerDocument.createElement('div');\n      proxy.classList.add(CSS_CLASS_LOADING, CSS_CLASS_TR, cssClass(`tr-${this.idPrefix}`));\n    }\n    return proxy;\n  }\n\n  private recycle(item: HTMLElement) {\n    ARowRenderer.cleanUp(item);\n    // check if the original dom element is still being manipulated\n    const abort = this.loading.get(item);\n    if (abort != null) {\n      abort.abort();\n    } else {\n      this.pool.push(item);\n    }\n  }\n\n  private proxy(item: HTMLElement, result: IAbortAblePromise<void> | void) {\n    if (!isAbortAble(result)) {\n      return item;\n    }\n    const abort = result;\n    // lazy loading\n\n    const real = item;\n    const proxy = this.selectProxy();\n    // copy attributes\n    proxy.dataset.index = real.dataset.index;\n    proxy.style.height = real.style.height;\n\n    this.loading.set(proxy, abort);\n    abort.then(\n      (abortResult) => {\n        if (abortResult === ABORTED) {\n          // aborted can recycle the real one\n          ARowRenderer.cleanUp(real);\n          this.pool.push(real);\n        } else {\n          // fully loaded\n          this.body.replaceChild(real, proxy);\n        }\n        this.loading.delete(proxy);\n        ARowRenderer.cleanUp(proxy);\n        this.loadingPool.push(proxy);\n      },\n      () => {\n        // handle as aborted\n        // aborted can recycle the real one\n        ARowRenderer.cleanUp(real);\n        this.pool.push(real);\n\n        this.loading.delete(proxy);\n        ARowRenderer.cleanUp(proxy);\n        this.loadingPool.push(proxy);\n      }\n    );\n    return proxy;\n  }\n\n  private create(index: number) {\n    const { item, result } = this.select(index);\n\n    const { exceptionsLookup: ex, padding } = this.context;\n    const exceptionHeight = ex.get(index);\n    if (exceptionHeight != null) {\n      item.style.height = `${exceptionHeight - padding(index)}px`;\n    }\n\n    return this.proxy(item, result);\n  }\n\n  private removeAll(perform = true) {\n    const b = this.body;\n    if (!perform) {\n      return Array.from(b.children) as HTMLElement[];\n    }\n    const toRecycle: HTMLElement[] = [];\n    while (b.lastElementChild) {\n      const i = b.lastElementChild as HTMLElement;\n      b.removeChild(i);\n      this.recycle(i);\n      toRecycle.push(i);\n    }\n    return toRecycle;\n  }\n\n  /**\n   * triggers and visual update of all visible rows\n   */\n  protected update(): void {\n    const { first } = this.visible;\n    const { fragment } = this;\n    const items = Array.from(this.body.children) as HTMLElement[];\n    clear(this.body);\n    items.forEach((item: HTMLElement, i) => {\n      if (this.loading.has(item)) {\n        // still loading\n        fragment.appendChild(item);\n        return;\n      }\n      const abort = this.updateRow(item, i + first);\n\n      fragment.appendChild(this.proxy(item, abort));\n    });\n    this.body.appendChild(fragment);\n  }\n\n  /**\n   * utility to execute a function for each visible row\n   * @param {(row: HTMLElement, rowIndex: number) => void} callback callback to execute\n   * @param {boolean} inPlace whether the DOM changes should be performed in place instead of in a fragment\n   */\n  protected forEachRow(callback: (row: HTMLElement, rowIndex: number) => void, inPlace = false): void {\n    const rows = Array.from(this.body.children) as HTMLElement[];\n    const { fragment } = this;\n    if (!inPlace) {\n      clear(this.body);\n    }\n    rows.forEach((row: HTMLElement, index) => {\n      if (!isLoadingCell(row) && row.dataset.animation !== 'update_remove' && row.dataset.animation !== 'hide') {\n        // skip loading ones and temporary ones\n        callback(row, index + this.visible.first);\n      }\n      if (!inPlace) {\n        fragment.appendChild(row);\n      }\n    });\n    if (!inPlace) {\n      this.body.appendChild(fragment);\n    }\n  }\n\n  private removeFromBeginning(from: number, to: number, perform = true) {\n    return this.remove(from, to, true, perform);\n  }\n\n  private removeFromBottom(from: number, to: number, perform = true) {\n    return this.remove(from, to, false, perform);\n  }\n\n  private remove(from: number, to: number, fromBeginning: boolean, perform = true) {\n    if (to < from) {\n      return [];\n    }\n    const b = this.body;\n    const toRecycle: HTMLElement[] = [];\n    // console.log('remove', fromBeginning, (to - from) + 1, this.body.childElementCount - ((to - from) + 1));\n    let act = (fromBeginning ? b.firstChild : b.lastChild) as HTMLElement;\n    for (let i = from; i <= to; i += 1) {\n      const item = act;\n      act = (fromBeginning ? act.nextSibling : act.previousSibling) as HTMLElement;\n\n      if (perform) {\n        b.removeChild(item);\n        this.recycle(item);\n      }\n      toRecycle.push(item);\n    }\n    return toRecycle;\n  }\n\n  private addAtBeginning(from: number, to: number, perform = true) {\n    if (to < from) {\n      return null;\n    }\n    // console.log('add', (to - from) + 1, this.body.childElementCount + ((to - from) + 1));\n    const { fragment } = this;\n    if (from === to && perform) {\n      this.body.insertBefore(this.create(from), this.body.firstChild);\n      return null;\n    }\n    for (let i = from; i <= to; i += 1) {\n      fragment.appendChild(this.create(i));\n    }\n    if (perform) {\n      this.body.insertBefore(fragment, this.body.firstChild);\n    }\n    return fragment;\n  }\n\n  private addAtBottom(from: number, to: number, perform = true) {\n    if (to < from) {\n      return null;\n    }\n    // console.log('add_b', (to - from) + 1, this.body.childElementCount + ((to - from) + 1));\n    if (from === to && perform) {\n      this.body.appendChild(this.create(from));\n      return null;\n    }\n    const { fragment } = this;\n    for (let i = from; i <= to; i += 1) {\n      fragment.appendChild(this.create(i));\n    }\n    if (perform) {\n      this.body.appendChild(fragment);\n    }\n    return fragment;\n  }\n\n  protected updateOffset(firstRowPos: number): void {\n    this.visibleFirstRowPos = firstRowPos;\n\n    this.updateSizer(firstRowPos);\n  }\n\n  protected updateSizer(firstRowPos: number): void {\n    const { totalHeight } = this.context;\n    setTransform(this.body, 0, firstRowPos.toFixed(0));\n    setTransform(this.bodySizer, 0, Math.max(0, totalHeight - 1).toFixed(0));\n  }\n\n  /**\n   * removes all rows and recreates the table\n   * @param {IAnimationContext} ctx optional animation context to create a transition between the previous and the current tables\n   * @returns {void} nothing\n   */\n  protected recreate(ctx?: IAnimationContext): void {\n    this.abortAnimation();\n    if (ctx) {\n      return this.recreateAnimated(ctx);\n    }\n    return this.recreatePure();\n  }\n\n  private recreatePure() {\n    const { context } = this;\n\n    const scroller = this.bodyScroller;\n\n    // update first to avoid resetting scrollTop\n    this.updateOffset(0);\n\n    this.removeAll();\n    this.clearPool();\n\n    const { first, last, firstRowPos } = range(\n      scroller.scrollTop,\n      scroller.clientHeight,\n      context.defaultRowHeight,\n      context.exceptions,\n      context.numberOfRows\n    );\n\n    this.visible.first = first;\n    this.visible.forcedFirst = first;\n    this.visible.last = last;\n    this.visible.forcedLast = last;\n\n    if (first < 0) {\n      // empty\n      this.updateOffset(0);\n      return;\n    }\n    this.addAtBottom(first, last);\n    this.updateOffset(firstRowPos);\n  }\n\n  private recreateAnimated(ctx: IAnimationContext) {\n    const lookup = new Map<string, { n: HTMLElement; pos: number; i: number }>();\n    const prev = new KeyFinder(ctx.previous, ctx.previousKey);\n    const cur = new KeyFinder(this.context, ctx.currentKey);\n    const next = range(\n      this.bodyScroller.scrollTop,\n      this.bodyScroller.clientHeight,\n      cur.context.defaultRowHeight,\n      cur.context.exceptions,\n      cur.context.numberOfRows\n    );\n\n    {\n      const rows = Array.from(this.body.children) as HTMLElement[];\n      const old = { ...this.visible };\n      // store the current rows in a lookup and clear\n\n      clear(this.body);\n\n      prev.positions(old.first, Math.min(old.last, old.first + rows.length), this.visibleFirstRowPos, (i, key, pos) => {\n        const n = rows[i];\n        if (n) {\n          // shouldn't happen that it is not there\n          lookup.set(key, { n, pos, i });\n        }\n        // else {\n        //  console.error(i, key, pos, rows);\n        // }\n      });\n    }\n\n    this.visible.first = next.first;\n    this.visible.forcedFirst = next.first;\n    this.visible.last = next.last;\n    this.visible.forcedLast = next.last;\n\n    const { fragment } = this;\n    const animation: IAnimationItem[] = [];\n\n    let nodeY = next.firstRowPos;\n    cur.positions(next.first, next.last, next.firstRowPos, (i, key, pos) => {\n      let node: HTMLElement;\n      let mode: EAnimationMode = EAnimationMode.UPDATE;\n      let previous: {\n        index: number | -1;\n        y: number;\n        height: number | null;\n      };\n      const item = lookup.get(key);\n      if (item != null) {\n        // still visible\n        lookup.delete(key);\n\n        // update height\n\n        item.n.dataset.index = String(i);\n        node = this.proxy(item.n, this.updateRow(item.n, i));\n        previous = {\n          index: item.i,\n          y: item.pos,\n          height: prev.exceptionHeightOf(item.i, true),\n        };\n      } else {\n        // need a new row\n        const old = prev.posByKey(key);\n        // maybe not visible  before so keep in place\n        node = this.create(i);\n\n        mode = old.index < 0 ? EAnimationMode.SHOW : EAnimationMode.UPDATE_CREATE;\n        previous = {\n          index: old.index,\n          y: old.pos >= 0 ? old.pos : pos,\n          height: old.index < 0 ? cur.exceptionHeightOf(i, true) : prev.exceptionHeightOf(old.index, true),\n        };\n      }\n      animation.push({\n        node,\n        key,\n        mode,\n        previous,\n        nodeY,\n        nodeYCurrentHeight: pos,\n        current: {\n          index: i,\n          y: pos,\n          height: cur.exceptionHeightOf(i),\n        },\n      });\n      node.style.transform = `translate(0, ${nodeY - pos}px)`;\n      nodeY += previous.height + (previous.index < 0 ? cur.padding(i) : prev.padding(previous.index));\n\n      fragment.appendChild(node);\n    });\n\n    let nodeYCurrentHeight = next.endPos;\n    // items that are going to be removed\n    lookup.forEach((item, key) => {\n      // calculate their next position\n      const r = cur.posByKey(key);\n\n      // maybe not visible anymore, keep in place\n      const nextPos = r.pos >= 0 ? r.pos : item.pos;\n      const node = item.n;\n      // located at addedPos\n      // should end up at nextPos\n      // was previously at item.pos\n      node.style.transform = `translate(0, ${item.pos - nodeY}px)`;\n      fragment.appendChild(node);\n\n      const prevHeight = prev.exceptionHeightOf(item.i, true);\n\n      animation.push({\n        node: item.n,\n        key,\n        mode: r.index < 0 ? EAnimationMode.HIDE : EAnimationMode.UPDATE_REMOVE,\n        previous: {\n          index: item.i,\n          y: item.pos,\n          height: prevHeight,\n        },\n        nodeY,\n        nodeYCurrentHeight,\n        current: {\n          index: r.index,\n          y: nextPos,\n          height: r.index < 0 ? null : cur.exceptionHeightOf(r.index),\n        },\n      });\n      nodeYCurrentHeight +=\n        r.index < 0 ? cur.context.defaultRowHeight : cur.exceptionHeightOf(r.index, true) + cur.padding(r.index);\n      nodeY += prevHeight + prev.padding(item.i);\n    });\n\n    this.updateOffset(next.firstRowPos);\n\n    this.animate(animation, ctx.phases || defaultPhases, prev, cur, fragment);\n  }\n\n  private animate(\n    animation: IAnimationItem[],\n    phases: IPhase[],\n    previousFinder: KeyFinder,\n    currentFinder: KeyFinder,\n    fragment: DocumentFragment\n  ) {\n    let activeAnimation = animation;\n    if (activeAnimation.length <= 0) {\n      this.body.appendChild(fragment);\n      return;\n    }\n\n    let currentTimer = -1;\n    let actPhase = 0;\n\n    const executePhase = (phase: IPhase, items = activeAnimation) => {\n      items.forEach((anim) => phase.apply(anim, previousFinder, currentFinder));\n    };\n\n    const run = () => {\n      // dummy log for forcing dom update\n      // eslint-disable-next-line no-console\n      console.assert(activeAnimation[0].node.offsetTop >= 0, 'dummy log for forcing dom update');\n      executePhase(phases[actPhase]);\n      actPhase += 1;\n      // shifted by one since already added through ++\n      if (actPhase < phases.length) {\n        // schedule the next one\n        const next = phases[actPhase];\n        // eslint-disable-next-line no-restricted-globals\n        currentTimer = self.setTimeout(run, next.delay);\n        return;\n      }\n\n      // last one\n      const body = this.body.classList;\n      Array.from(body).forEach((v) => {\n        if (v.startsWith(cssClass()) && v.endsWith('-animation')) {\n          body.remove(v);\n        }\n      });\n      // clean up\n      activeAnimation.forEach(({ node, mode }) => {\n        if (mode !== EAnimationMode.UPDATE_REMOVE && mode !== EAnimationMode.HIDE) {\n          return;\n        }\n        node.remove();\n        // eslint-disable-next-line no-param-reassign\n        node.style.transform = '';\n        this.recycle(node);\n      });\n      this.abortAnimation = () => undefined;\n      currentTimer = -1;\n    };\n\n    // execute all phases having a delay of zero\n    while (phases[actPhase].delay === 0) {\n      executePhase(phases[actPhase]);\n      actPhase += 1;\n    }\n    // after the initial one\n    const { body } = this;\n    this.body.appendChild(fragment);\n\n    const dummyAnimation: IAnimationItem[] = [];\n    activeAnimation = activeAnimation.filter((d) => {\n      if (noAnimationChange(d, previousFinder.context.defaultRowHeight, currentFinder.context.defaultRowHeight)) {\n        dummyAnimation.push(d);\n        return false;\n      }\n      return true;\n    });\n\n    if (dummyAnimation.length > 0) {\n      // execute all phases for them\n      phases.slice(actPhase).forEach((phase) => executePhase(phase, dummyAnimation));\n    }\n\n    if (activeAnimation.length === 0) {\n      return;\n    }\n\n    body.classList.add(CSS_CLASS_ROW_ANIMATION);\n    new Set(activeAnimation.map((d) => d.mode)).forEach((mode) => {\n      // add class but map to UPDATE only\n      body.classList.add(cssClass(`${EAnimationMode[mode].toLowerCase().split('_')[0]}-animation`));\n    });\n\n    this.abortAnimation = () => {\n      if (currentTimer <= 0) {\n        return;\n      }\n      // abort by removing\n      clearTimeout(currentTimer);\n      currentTimer = -1;\n      // run the last phase\n      actPhase = phases.length - 1;\n      run();\n    };\n\n    // next tick such that DOM will be updated\n    // eslint-disable-next-line no-restricted-globals\n    currentTimer = self.setTimeout(run, phases[actPhase].delay);\n  }\n\n  /**\n   * clears the row pool used for faster creation\n   */\n  protected clearPool(): void {\n    // clear pool\n    this.pool.splice(0, this.pool.length);\n  }\n\n  /**\n   * triggers a revalidation of the current scrolling offset\n   */\n  protected revalidate(): void {\n    const scroller = this.bodyScroller;\n    this.onScrolledVertically(scroller.scrollTop, scroller.clientHeight, true);\n    this.updateOffset(this.visibleFirstRowPos);\n  }\n\n  /**\n   * scrolling vertically\n   * @param {number} scrollTop top scrolling\n   * @param {number} clientHeight visible height\n   * @param {boolean} isGoingDown hint whether the scrollTop increases\n   * @return {EScrollResult} full in case of a full rebuild or partial update\n   */\n  protected onScrolledVertically(scrollTop: number, clientHeight: number, isGoingDown: boolean): EScrollResult {\n    const shift = this.options.viewportOversize;\n\n    const shiftTop = Math.max(0, scrollTop - shift);\n\n    const scrollResult = this.onScrolledImpl(shiftTop, clientHeight + shift + (scrollTop - shiftTop));\n    for (const mixin of this.mixins) {\n      mixin.onScrolled(isGoingDown, scrollResult);\n    }\n    return scrollResult;\n  }\n\n  private shiftLast(current: number, currentDelta: number) {\n    const b = this.options.batchSize;\n    if (currentDelta >= b) {\n      return current;\n    }\n    const total = this.context.numberOfRows;\n    return Math.min(total - 1, current + (this.options.batchSize - currentDelta));\n  }\n\n  private shiftFirst(current: number, currentFirstRow: number, currentDelta: number) {\n    const b = this.options.batchSize;\n    if (currentDelta >= b || current <= 0) {\n      return { first: current, firstRowPos: currentFirstRow };\n    }\n    const first = Math.max(0, current - (this.options.batchSize - currentDelta));\n\n    const { exceptionsLookup, defaultRowHeight } = this.context;\n    let firstRowPos = currentFirstRow;\n    for (let i = first; i < current; i += 1) {\n      firstRowPos -= exceptionsLookup.get(i) ?? defaultRowHeight;\n    }\n    return { first, firstRowPos };\n  }\n\n  private onScrolledImpl(scrollTop: number, clientHeight: number): EScrollResult {\n    const { context } = this;\n    let { first, last, firstRowPos } = range(\n      scrollTop,\n      clientHeight,\n      context.defaultRowHeight,\n      context.exceptions,\n      context.numberOfRows\n    );\n\n    const { visible } = this;\n    visible.forcedFirst = first;\n    visible.forcedLast = last;\n\n    if (first - visible.first >= 0 && last - visible.last <= 0) {\n      // nothing to do\n      return EScrollResult.NONE;\n    }\n\n    let r: EScrollResult = EScrollResult.SOME;\n\n    let toRecycle: HTMLElement[] | undefined;\n    let toAdd: DocumentFragment | undefined;\n    let toAddBottom = false;\n\n    if (first > visible.last || last < visible.first) {\n      // no overlap, clean and draw everything\n      // console.log(`ff added: ${last - first + 1} removed: ${visibleLast - visibleFirst + 1} ${first}:${last} ${offset}`);\n      // removeRows(visibleFirst, visibleLast);\n\n      toRecycle = this.removeAll(false);\n      toAdd = this.addAtBottom(first, last, false);\n      toAddBottom = true;\n      r = EScrollResult.ALL;\n    } else if (first < visible.first) {\n      // some first rows missing and some last rows to much\n      // console.log(`up added: ${visibleFirst - first + 1} removed: ${visibleLast - last + 1} ${first}:${last} ${offset}`);\n      const toRemove = visible.last - (last + 1);\n      if (toRemove >= this.options.batchSize) {\n        toRecycle = this.removeFromBottom(last + 1, visible.last, false);\n      } else {\n        last = visible.last;\n      }\n\n      const shift = this.shiftFirst(first, firstRowPos, visible.first - 1 - first);\n      first = shift.first;\n      firstRowPos = shift.firstRowPos;\n      toAdd = this.addAtBeginning(first, visible.first - 1, false);\n      toAddBottom = false;\n      r = EScrollResult.SOME_TOP;\n    } else {\n      // console.log(`do added: ${last - visibleLast + 1} removed: ${first - visibleFirst + 1} ${first}:${last} ${offset}`);\n      // some last rows missing and some first rows to much\n      const toRemove = first - 1 - visible.first;\n      if (toRemove >= this.options.batchSize) {\n        toRecycle = this.removeFromBeginning(visible.first, first - 1, false);\n      } else {\n        first = visible.first;\n        firstRowPos = this.visibleFirstRowPos;\n      }\n\n      last = this.shiftLast(last, last - visible.last + 1);\n\n      toAdd = this.addAtBottom(visible.last + 1, last, false);\n      toAddBottom = true;\n      r = EScrollResult.SOME_BOTTOM;\n    }\n\n    visible.first = first;\n    visible.last = last;\n\n    this.updateOffset(firstRowPos);\n    this.manipulate(toRecycle, toAdd, toAddBottom);\n    return r;\n  }\n\n  private manipulate(toRecycle: HTMLElement[] | undefined, toAdd: DocumentFragment | undefined, bottom: boolean) {\n    if (toRecycle) {\n      for (const item of toRecycle) {\n        item.remove();\n        this.recycle(item);\n      }\n    }\n    if (!toAdd) {\n      return;\n    }\n    if (bottom) {\n      this.body.appendChild(toAdd);\n    } else {\n      this.body.insertBefore(toAdd, this.body.firstChild);\n    }\n  }\n}\n\nexport default ARowRenderer;\n\nexport function setTransform(elem: HTMLElement, x: number | string, y: number | string): void {\n  const text = `translate(${x}px, ${y}px)`;\n  const anyElem = elem as { __transform__?: string };\n  // eslint-disable-next-line no-underscore-dangle\n  if (anyElem.__transform__ === text) {\n    return;\n  }\n  // eslint-disable-next-line no-underscore-dangle\n  anyElem.__transform__ = text;\n  // eslint-disable-next-line no-param-reassign\n  elem.style.transform = text;\n}\n","// import manually import './style.scss';\n\n/**\n * utility for custom generated CSS rules\n */\n\ninterface ICSSRule {\n  id: string;\n  selector: string;\n  style: Partial<CSSStyleDeclaration>;\n}\n\nfunction assignStyles(target: CSSStyleDeclaration, source: Record<string, unknown>) {\n  for (const key of Object.keys(source)) {\n    const v = source[key] as string;\n\n    if (!v.endsWith(' !important')) {\n      if (target[key] !== v) {\n        // eslint-disable-next-line no-param-reassign\n        target[key] = v;\n      }\n      continue;\n    }\n\n    // handle special important case\n    const plain = v.slice(0, -' !important'.length);\n    if (target[key] === plain) {\n      continue;\n    }\n    // eslint-disable-next-line no-param-reassign\n    target[key] = plain;\n    // see https://gist.github.com/youssman/745578062609e8acac9f\n    const hyphen = key.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();\n    target.setProperty(hyphen, plain, 'important');\n  }\n}\n\nexport default class StyleManager {\n  private readonly rules: ICSSRule[] = [];\n\n  private readonly node: HTMLStyleElement;\n\n  private testVerifyTimeout = -1;\n\n  /**\n   * the parent element to append this managed style\n   * @param {HTMLElement} root\n   */\n  constructor(root: HTMLElement) {\n    this.node = root.ownerDocument.createElement('style');\n    this.node.appendChild(root.ownerDocument.createTextNode('')); // for webkit?\n    root.appendChild(this.node);\n  }\n\n  destroy(): void {\n    this.node.remove();\n  }\n\n  private verifySheet() {\n    const { sheet } = this;\n    if (!sheet) {\n      if (this.testVerifyTimeout >= 0) {\n        return;\n      }\n      // test till attached\n      // eslint-disable-next-line no-restricted-globals\n      this.testVerifyTimeout = self.setTimeout(() => {\n        this.testVerifyTimeout = -1;\n        this.verifySheet();\n      }, 20);\n      return;\n    }\n    const rules = sheet.cssRules;\n    if (\n      rules.length === this.rules.length &&\n      this.rules.every((d, i) => (rules[i] as CSSStyleRule).selectorText === d.selector)\n    ) {\n      // same\n      return;\n    }\n\n    // console.warn('invalid sheet rules detected');\n\n    const l = rules.length;\n    for (let i = 0; i < l; i += 1) {\n      sheet.deleteRule(i);\n    }\n\n    // create all\n    for (const rule of this.rules) {\n      const index = sheet.insertRule(`${rule.selector} {}`, sheet.cssRules.length);\n      const cssRule = sheet.cssRules[index] as CSSStyleRule;\n      rule.selector = cssRule.selectorText;\n      assignStyles(cssRule.style, rule.style);\n    }\n  }\n\n  private get sheet() {\n    return this.node.sheet as CSSStyleSheet | null;\n  }\n\n  private getSheetRule(index: number) {\n    const { sheet } = this;\n    return sheet ? (sheet.cssRules[index] as CSSStyleRule) : null;\n  }\n\n  /**\n   * add a custom css rule\n   * @param {string} id unique id of the rule for later identification\n   * @param {string} selector the css selector\n   * @param {Partial<CSSStyleDeclaration>} style the style attributes\n   * @returns {string} the id again\n   */\n  addRule(id: string, selector: string, style: Partial<CSSStyleDeclaration>): string {\n    this.verifySheet();\n    const { sheet } = this;\n    if (!sheet) {\n      // upon next update\n      this.rules.push({ id, selector, style });\n      return null;\n    }\n    const index = sheet.insertRule(`${selector} {}`, sheet.cssRules.length);\n    const rule = sheet.cssRules[index] as CSSStyleRule;\n    this.rules.push({ id, selector: rule.selectorText, style });\n    assignStyles(rule.style, style);\n    return id;\n  }\n\n  /**\n   * updates or add a rule, see @addRule\n   * @param {string} id unique id of the rule for later identification\n   * @param {string} selector the css selector\n   * @param {Partial<CSSStyleDeclaration>} style the style attributes\n   * @returns {string} the id again\n   */\n  updateRule(id: string, selector: string, style: Partial<CSSStyleDeclaration>): string {\n    this.verifySheet();\n    const index = this.rules.findIndex((d) => d.id === id);\n    if (index < 0) {\n      return this.addRule(id, selector, style);\n    }\n    const stored = this.rules[index];\n    stored.selector = selector;\n    stored.style = style;\n\n    const rule = this.getSheetRule(index);\n    if (rule) {\n      if (rule.selectorText.replace(/\\s/gm, '') !== selector.replace(/\\s/gm, '')) {\n        // ignoring white space\n        rule.selectorText = selector;\n        stored.selector = rule.selectorText;\n      }\n      assignStyles(rule.style, style);\n    }\n    return id;\n  }\n\n  /**\n   * deletes the given rule by id\n   * @param {string} id the rule to delete\n   */\n  deleteRule(id: string): void {\n    this.verifySheet();\n    const index = this.rules.findIndex((d) => d.id === id);\n    if (index < 0) {\n      return;\n    }\n    this.rules.splice(index, 1);\n    const { sheet } = this;\n    if (sheet) {\n      sheet.deleteRule(index);\n    }\n  }\n\n  /**\n   * get a list of all registered rule ids\n   */\n  protected get ruleNames(): string[] {\n    return this.rules.map((d) => d.id);\n  }\n}\n","import { addScroll } from '../internal';\nimport {\n  cssClass,\n  CSS_CLASS_BODY,\n  CSS_CLASS_FOOTER,\n  CSS_CLASS_HEADER,\n  CSS_CLASS_SCROLLBAR_TESTER,\n  CSS_CLASS_SHIFTED,\n  CSS_CLASS_TBODY,\n  CSS_CLASS_THEAD,\n} from '../styles';\nimport StyleManager from './StyleManager';\n\nexport function setTemplate(root: HTMLElement, id: string): HTMLElement {\n  const cleanId = id.startsWith('#') ? id.slice(1) : id;\n  // eslint-disable-next-line no-param-reassign\n  root.innerHTML = `\n  <header id=\"header-${cleanId}\" class=\"${CSS_CLASS_HEADER} ${cssClass(`header-${cleanId}`)}\">\n    <article class=\"${CSS_CLASS_THEAD} ${cssClass(`thead-${cleanId}`)}\"></article>\n  </header>\n  <main id=\"body-${cleanId}\" class=\"${CSS_CLASS_BODY} ${cssClass(`body-${cleanId}`)}\">\n    <footer class=\"${CSS_CLASS_FOOTER}\">&nbsp;</footer>\n    <article class=\"${CSS_CLASS_TBODY} ${cssClass(`tbody-${cleanId}`)}\"></article>\n  </main>`;\n  return root;\n}\n\n/**\n * column base interface\n */\nexport interface IColumn {\n  readonly index: number;\n  readonly id: string;\n  readonly width: number;\n  /**\n   * boolean flag whether when scrolling the column should be sticky\n   */\n  readonly frozen: boolean;\n}\n\ninterface ISelectors {\n  thead: string;\n  tbody: string;\n  tr: string;\n  th: string;\n  td: string;\n}\n\n/**\n * generates the HTML Ids used for the header and body article of a table\n * @param {string} tableId base table id\n * @param {boolean} asSelector flag whether to prepend with # for CSS selector\n * @return {ISelectors} the table ids used for header and body\n */\nexport function tableIds(tableId: string): { thead: string; tbody: string; tr: string; th: string; td: string } {\n  return {\n    thead: `thead-${tableId}`,\n    tbody: `tbody-${tableId}`,\n    tr: `tr-${tableId}`,\n    th: `th-${tableId}`,\n    td: `td-${tableId}`,\n  };\n}\n\nexport function tableCSSClasses(tableId: string): { thead: string; tbody: string; tr: string; th: string; td: string } {\n  const ids = tableIds(tableId);\n  return {\n    thead: cssClass(ids.thead),\n    tbody: cssClass(ids.tbody),\n    tr: cssClass(ids.tr),\n    th: cssClass(ids.th),\n    td: cssClass(ids.td),\n  };\n}\n\n/**\n * utility for custom generated CSS rules with a focus on dynamically generated grid layouts\n */\nexport default class GridStyleManager extends StyleManager {\n  readonly id: string;\n\n  readonly ids: ISelectors;\n\n  readonly cssClasses: ISelectors;\n\n  constructor(root: HTMLElement, id: string) {\n    super(root);\n    this.id = id.startsWith('#') ? id.slice(1) : id;\n\n    this.ids = tableIds(this.id);\n    this.cssClasses = tableCSSClasses(this.id);\n\n    const headerScroller = root.getElementsByTagName('header')[0] as HTMLElement;\n    const bodyScroller = root.getElementsByTagName('main')[0] as HTMLElement;\n\n    // async since style needs to be added to dom first\n    // eslint-disable-next-line no-restricted-globals\n    self.setTimeout(() => {\n      const { width } = measureScrollbar(root);\n      this.updateRule('__scrollBarFix2', `#header-${this.id} > article:last-of-type`, {\n        borderRight: `${width}px solid transparent`,\n      });\n    }, 20);\n\n    let old = headerScroller.scrollLeft;\n\n    // update frozen and sync header with body\n    addScroll(bodyScroller, 'animation', (act) => {\n      const newValue = act.left;\n      if (old !== newValue) {\n        headerScroller.scrollLeft = newValue;\n        old = newValue;\n      }\n      root.classList.toggle(CSS_CLASS_SHIFTED, act.left > 0);\n    });\n  }\n\n  /**\n   * updates the column widths and default row height for a table\n   * @param {number} defaultRowHeight\n   * @param {IColumn[]} columns\n   * @param {number} frozenShift shift frozen columns\n   * @param {string} tableId optional tableId in case of multiple tables within the same engine\n   * @param {string} unit\n   */\n  update(\n    defaultRowHeight: number,\n    columns: IColumn[],\n    padding: (index: number) => number,\n    frozenShift: number,\n    tableId: string,\n    unit = 'px'\n  ): void {\n    const ids = tableIds(tableId);\n    const selectors = tableCSSClasses(tableId);\n\n    const total = `${columns.reduce((a, b, i) => a + b.width + padding(i), 0)}${unit}`;\n\n    this.updateRule(`__heightsRule${selectors.tr}`, `.${selectors.tr}`, {\n      height: `${defaultRowHeight}px`,\n      width: total,\n    });\n\n    this.updateRule(`__heightsRule${selectors.tbody}`, `#${ids.tbody}`, {\n      width: total,\n    });\n\n    this.updateColumns(columns, padding, selectors, frozenShift, unit);\n  }\n\n  /**\n   * removes a given tableId if not needed anymore\n   * @param {string} tableId tableId to remove\n   */\n  remove(tableId: string): void {\n    const selectors = tableCSSClasses(tableId);\n    this.deleteRule(`__heightsRule${selectors.tr}`);\n    this.deleteRule(`__heightsRule${selectors.tbody}`);\n\n    const prefix = `__col${selectors.td}_`;\n    const rules = this.ruleNames.reduce((a, b) => a + (b.startsWith(prefix) ? 1 : 0), 0);\n    // reset\n    for (let i = 0; i < rules; i += 1) {\n      this.deleteRule(`${prefix}${i}`);\n    }\n  }\n\n  private updateColumns(\n    columns: IColumn[],\n    padding: (index: number) => number,\n    cssSelectors: ISelectors,\n    frozenShift: number,\n    unit = 'px'\n  ): void {\n    const prefix = `__col${cssSelectors.td}_`;\n    const rules = new Set(this.ruleNames.filter((d) => d.startsWith(prefix)));\n\n    let acc = 0;\n    columns.forEach((c, i) => {\n      const th = `.${cssSelectors.th}[data-id=\"${c.id}\"]`;\n      const thStyles: Partial<CSSStyleDeclaration> = {\n        width: `${c.width}${unit}`,\n      };\n      const td = `.${cssSelectors.td}[data-id=\"${c.id}\"]`;\n      const tdStyles: Partial<CSSStyleDeclaration> = {\n        transform: `translateX(${acc}${unit})`,\n        width: `${c.width}${unit}`,\n      };\n\n      if (c.frozen) {\n        thStyles.left = `${acc}px`;\n\n        this.updateRule(`${prefix}${td}F`, `.${cssSelectors.td}.${CSS_CLASS_SHIFTED}[data-id=\"${c.id}\"]`, {\n          transform: `translateX(0)`,\n          left: `${acc + frozenShift}${unit}`,\n        });\n        rules.delete(`${prefix}${td}F`);\n      }\n\n      this.updateRule(`${prefix}${th}`, th, thStyles);\n      rules.delete(`${prefix}${th}`);\n      this.updateRule(`${prefix}${td}`, td, tdStyles);\n      rules.delete(`${prefix}${td}`);\n      acc += c.width + padding(i);\n    });\n\n    rules.forEach((d) => this.deleteRule(d));\n  }\n}\n/**\n * measure the width and height of the scrollbars\n * based on Slick grid implementation\n * @param root\n */\nfunction measureScrollbar(root: HTMLElement) {\n  const body = root.ownerDocument?.body;\n  if (!body) {\n    return { width: 10, height: 10 };\n  }\n  body.insertAdjacentHTML('beforeend', `<div class=\"${CSS_CLASS_SCROLLBAR_TESTER}\"><div></div></div>`);\n  const elem = body.lastElementChild as HTMLElement;\n\n  const width = elem.offsetWidth - elem.clientWidth;\n  const height = elem.offsetHeight - elem.clientHeight;\n\n  elem.remove();\n\n  return { width, height };\n}\n","import { ABORTED, IAbortAblePromise, IAsyncUpdate, isAbortAble, isAsyncUpdate } from '../../abortAble';\nimport { isLoadingCell } from '../../ARowRenderer';\nimport { clear, IScrollInfo } from '../../internal';\nimport { isScrollEventWaiting } from '../../internal/scroll';\nimport { IExceptionContext, range, updateFrozen } from '../../logic';\nimport { EScrollResult, IMixin, IMixinAdapter, IMixinClass } from '../../mixin';\nimport { IColumn } from '../../style';\nimport GridStyleManager from '../../style/GridStyleManager';\nimport {\n  cssClass,\n  CSS_CLASS_FROZEN,\n  CSS_CLASS_LOADING,\n  CSS_CLASS_SHIFTED,\n  CSS_CLASS_TD,\n  CSS_CLASS_TH,\n} from '../../styles';\n\n// const debug = false;\n\nexport interface ICellAdapterRenderContext<T extends IColumn> extends IExceptionContext {\n  readonly column: IExceptionContext;\n  readonly columns: T[];\n}\n\nexport interface IVisibleColumns {\n  frozen: number[];\n  first: number;\n  forcedFirst: number;\n  last: number;\n  forcedLast: number;\n}\n\n/**\n * @internal\n */\nexport abstract class ACellAdapter<T extends IColumn> {\n  /**\n   * pool of cells per column\n   * @type {Array}\n   */\n  private readonly cellPool: HTMLElement[][] = [];\n\n  private readonly loading = new WeakMap<HTMLElement, IAbortAblePromise<void>>();\n\n  readonly visibleColumns: IVisibleColumns = {\n    frozen: [] as number[], // column indices that are visible even tho they would be out of range\n    first: 0,\n    forcedFirst: 0,\n    last: -1,\n    forcedLast: -1,\n  };\n\n  visibleFirstColumnPos = 0;\n\n  private horizontallyShifted = false;\n\n  private readonly columnAdapter: IMixinAdapter;\n\n  private readonly columnMixins: IMixin[];\n\n  private readonly columnFragment: DocumentFragment;\n\n  constructor(\n    protected readonly header: HTMLElement,\n    protected readonly style: GridStyleManager,\n    private readonly tableId: string,\n    mixinClasses: IMixinClass[] = []\n  ) {\n    this.columnAdapter = this.createColumnAdapter();\n    this.columnMixins = mixinClasses.map((MixinClass) => new MixinClass(this.columnAdapter));\n\n    this.columnFragment = header.ownerDocument.createDocumentFragment();\n  }\n\n  leftShift(): number {\n    const ctx = this.context;\n    const frozen = this.visibleColumns.frozen.reduce((a, d) => a + ctx.columns[d].width + ctx.column.padding(d), 0);\n    return this.visibleFirstColumnPos - frozen;\n  }\n\n  protected get headerScroller(): HTMLElement {\n    return this.header.parentElement as HTMLElement;\n  }\n\n  addColumnMixin(MixinClass: IMixinClass, options?: unknown): void {\n    this.columnMixins.push(new MixinClass(this.columnAdapter, options));\n  }\n\n  private createColumnAdapter(): IMixinAdapter {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n    const r = {\n      visible: this.visibleColumns,\n      addAtBeginning: this.addColumnAtStart.bind(this),\n      addAtBottom: this.addColumnAtEnd.bind(this),\n      removeFromBeginning: this.removeColumnFromStart.bind(this),\n      removeFromBottom: this.removeColumnFromEnd.bind(this),\n      updateOffset: this.updateColumnOffset.bind(this),\n      scroller: this.headerScroller,\n      syncFrozen: this.syncFrozen.bind(this),\n      isScrollEventWaiting: () => isScrollEventWaiting(this.headerScroller, 'animation'),\n      get visibleFirstRowPos() {\n        return that.visibleFirstColumnPos;\n      },\n      get context() {\n        return that.context.column;\n      },\n      get scrollOffset() {\n        return that.lastScrollInfo ? that.lastScrollInfo.left : 0;\n      },\n      get scrollTotal() {\n        return that.lastScrollInfo ? that.lastScrollInfo.width : that.headerScroller.clientWidth;\n      },\n    };\n    return r;\n  }\n\n  init(): void {\n    const { context } = this;\n    this.style.update(\n      context.defaultRowHeight - context.padding(-1),\n      context.columns,\n      context.column.padding,\n      0,\n      this.tableId\n    );\n\n    context.columns.forEach(() => {\n      // init pool\n      this.cellPool.push([]);\n    });\n  }\n\n  onScrolledHorizontally(scrollLeft: number, clientWidth: number, isGoingRight: boolean): EScrollResult {\n    const scrollResult = this.onScrolledHorizontallyImpl(scrollLeft, clientWidth);\n    for (const mixin of this.columnMixins) {\n      mixin.onScrolled(isGoingRight, scrollResult);\n    }\n    return scrollResult;\n  }\n\n  /**\n   * the current render context, upon change `recreate` the whole table\n   * @returns {ICellRenderContext}\n   */\n  protected abstract get context(): ICellAdapterRenderContext<T>;\n\n  protected abstract get body(): HTMLElement;\n\n  protected abstract get lastScrollInfo(): IScrollInfo | null;\n\n  protected abstract createHeader(document: Document, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  protected abstract updateHeader(node: HTMLElement, column: T): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  protected abstract createCell(document: Document, index: number, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  protected abstract updateCell(\n    node: HTMLElement,\n    index: number,\n    column: T\n  ): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  protected abstract forEachRow(callback: (row: HTMLElement, rowIndex: number) => void): void;\n\n  private removeColumnFromStart(from: number, to: number, frozenShift: number = this.visibleColumns.frozen.length) {\n    this.forEachRow((row: HTMLElement) => {\n      this.removeCellFromStart(row, from, to, frozenShift);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private removeCellFromStart(row: HTMLElement, from: number, to: number, frozenShift: number) {\n    for (let i = from; i <= to; i += 1) {\n      const node = (frozenShift === 0 ? row.firstElementChild : row.children[frozenShift]) as HTMLElement;\n      node.remove();\n      this.recycleCell(node, i);\n    }\n    // if (debug) {\n    //   verifyRow(row, -1, this.context.columns);\n    // }\n  }\n\n  private removeColumnFromEnd(from: number, to: number) {\n    this.forEachRow((row: HTMLElement) => {\n      this.removeCellFromEnd(row, from, to);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private removeCellFromEnd(row: HTMLElement, from: number, to: number) {\n    for (let i = to; i >= from; i -= 1) {\n      const node = row.lastElementChild as HTMLElement;\n      node.remove();\n      this.recycleCell(node, i);\n    }\n    // if (debug) {\n    //   verifyRow(row, -1, this.context.columns);\n    // }\n  }\n\n  private removeFrozenCells(row: HTMLElement, columnIndices: number[], shift: number) {\n    for (const columnIndex of columnIndices) {\n      const node = row.children[shift] as HTMLElement;\n      node.remove();\n      this.recycleCell(node, columnIndex);\n    }\n    // if (debug) {\n    //   verifyRow(row, -1, this.context.columns);\n    // }\n  }\n\n  private removeFrozenColumns(columnIndices: number[], shift: number) {\n    this.forEachRow((row: HTMLElement) => {\n      this.removeFrozenCells(row, columnIndices, shift);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private removeAllColumns(includingFrozen: boolean) {\n    this.forEachRow((row: HTMLElement) => {\n      this.removeAllCells(row, includingFrozen);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private removeAllCells(row: HTMLElement, includingFrozen: boolean, shift = this.visibleColumns.first) {\n    const arr = Array.from(row.children) as HTMLElement[];\n    const { frozen } = this.visibleColumns;\n    clear(row);\n\n    if (includingFrozen || frozen.length === 0) {\n      for (const i of frozen) {\n        this.recycleCell(arr.shift(), i);\n      }\n    } else {\n      // have frozen and keep them, so readd them\n      for (let i = 0; i < frozen.length; i += 1) {\n        row.appendChild(arr.shift());\n      }\n    }\n    arr.forEach((item, i) => {\n      this.recycleCell(item, i + shift);\n    });\n\n    // if (debug) {\n    //   verifyRow(row, -1, this.context.columns);\n    // }\n  }\n\n  private selectProxyCell(\n    row: number,\n    column: number,\n    columns: T[]\n  ): { item: HTMLElement; ready: IAbortAblePromise<void> | void } {\n    const pool = this.cellPool[column];\n    const columnObj = columns[column];\n\n    let item: HTMLElement;\n    let ready: IAbortAblePromise<void> | void;\n    const pooled = pool.pop();\n\n    const r = pooled\n      ? this.updateCell(pooled, row, columnObj) || pooled\n      : this.createCell(this.header.ownerDocument, row, columnObj);\n    if (isAsyncUpdate(r)) {\n      item = r.item;\n      ready = r.ready;\n    } else {\n      item = r;\n    }\n    if (item !== pooled) {\n      item.dataset.id = columnObj.id;\n      item.classList.add(CSS_CLASS_TD, this.style.cssClasses.td, cssClass(`td-${this.tableId}`));\n    }\n    this.updateShiftedState(item, columnObj);\n    return { item, ready };\n  }\n\n  handleCellReady(item: HTMLElement, ready: IAbortAblePromise<void>, column = -1): HTMLElement {\n    item.classList.add(CSS_CLASS_LOADING);\n    const abort = ready;\n    // lazy loading\n\n    this.loading.set(item, abort);\n    abort.then((result) => {\n      this.loading.delete(item);\n      item.classList.remove(CSS_CLASS_LOADING);\n      if (result === ABORTED && column >= 0) {\n        // aborted can recycle the real one\n        this.cellPool[column].push(item);\n      }\n    });\n    return item;\n  }\n\n  private selectCell(row: number, column: number, columns: T[]): HTMLElement {\n    const { item, ready } = this.selectProxyCell(row, column, columns);\n    if (!isAbortAble(ready)) {\n      return item;\n    }\n    return this.handleCellReady(item, ready, column);\n  }\n\n  protected updateShiftedState(node: HTMLElement, col: IColumn): void {\n    node.classList.toggle(CSS_CLASS_SHIFTED, col.frozen && this.horizontallyShifted);\n  }\n\n  recycleCell(item: HTMLElement, column = -1): void {\n    // check if the dom element is still being manipulated\n    const abort = this.loading.get(item);\n    if (abort != null) {\n      abort.abort();\n    } else if (!isLoadingCell(item) && column >= 0) {\n      this.cellPool[column].push(item);\n    }\n  }\n\n  private addColumnAtStart(from: number, to: number, frozenShift: number = this.visibleColumns.frozen.length) {\n    const { columns } = this.context;\n    this.forEachRow((row: HTMLElement, rowIndex: number) => {\n      this.addCellAtStart(row, rowIndex, from, to, frozenShift, columns);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  private addCellAtStart(\n    row: HTMLElement,\n    rowIndex: number,\n    from: number,\n    to: number,\n    frozenShift: number,\n    columns: T[]\n  ) {\n    // if (debug) {\n    //   verifyRow(row, rowIndex, this.context.columns);\n    // }\n    for (let i = to; i >= from; i -= 1) {\n      const cell = this.selectCell(rowIndex, i, columns);\n      row.insertBefore(cell, frozenShift > 0 ? row.children[frozenShift] : row.firstChild);\n    }\n    // if (debug) {\n    //   verifyRow(row, rowIndex, this.context.columns);\n    // }\n  }\n\n  private insertFrozenCells(row: HTMLElement, rowIndex: number, columnIndices: number[], shift: number, columns: T[]) {\n    const before = row.children[shift];\n    for (const i of columnIndices) {\n      const cell = this.selectCell(rowIndex, i, columns);\n      if (before) {\n        row.insertBefore(cell, before);\n      } else {\n        row.appendChild(cell);\n      }\n    }\n  }\n\n  private insertFrozenColumns(columnIndices: number[], shift: number) {\n    const { columns } = this.context;\n    this.forEachRow((row: HTMLElement, rowIndex: number) => {\n      this.insertFrozenCells(row, rowIndex, columnIndices, shift, columns);\n    });\n  }\n\n  private addColumnAtEnd(from: number, to: number) {\n    const { columns } = this.context;\n    this.forEachRow((row: HTMLElement, rowIndex: number) => {\n      this.addCellAtEnd(row, rowIndex, from, to, columns);\n    });\n    // if (debug) {\n    //   this.verifyRows();\n    // }\n  }\n\n  // private verifyRows() {\n  //   const { columns } = this.context;\n  //   this.forEachRow((row, rowIndex) => verifyRow(row, rowIndex, columns));\n  // }\n\n  private addCellAtEnd(row: HTMLElement, rowIndex: number, from: number, to: number, columns: T[]) {\n    for (let i = from; i <= to; i += 1) {\n      const cell = this.selectCell(rowIndex, i, columns);\n      row.appendChild(cell);\n    }\n    // if (debug) {\n    //   verifyRow(row, rowIndex, this.context.columns);\n    // }\n  }\n\n  updateHeaders(): void {\n    const { columns } = this.context;\n    Array.from(this.header.children).forEach((node: Element, i) => {\n      const base = node as HTMLElement;\n      const col = columns[i];\n      const r = this.updateHeader(base, col);\n      let n: HTMLElement;\n      if (isAsyncUpdate(r)) {\n        n = this.handleCellReady(r.item, r.ready, -1);\n      } else {\n        n = r || base;\n      }\n      if (n === base) {\n        return;\n      }\n      n.dataset.id = col.id;\n      n.classList.add(CSS_CLASS_TH, this.style.cssClasses.th, cssClass(`th-${this.tableId}`));\n      this.header.replaceChild(base, n);\n    });\n  }\n\n  recreate(left: number, width: number): void {\n    const { context } = this;\n\n    this.style.update(\n      context.defaultRowHeight - context.padding(-1),\n      context.columns,\n      context.column.padding,\n      0,\n      this.tableId\n    );\n\n    this.clearPool();\n    // init pool\n    for (let i = this.cellPool.length; i < context.columns.length; i += 1) {\n      this.cellPool.push([]);\n    }\n\n    // create all header columns\n    {\n      const fragment = this.columnFragment;\n      const document = fragment.ownerDocument;\n\n      // create lookup cache to reuse headers\n      const ids = new Map<string, HTMLElement>();\n      while (this.header.lastChild) {\n        const c = this.header.lastChild as HTMLElement;\n        this.header.removeChild(c);\n        ids.set(c.dataset.id ?? '', c);\n      }\n\n      context.columns.forEach((col) => {\n        const existing = ids.get(col.id);\n        const r = existing ? this.updateHeader(existing, col) || existing : this.createHeader(document, col);\n        let n: HTMLElement;\n        if (isAsyncUpdate(r)) {\n          n = this.handleCellReady(r.item, r.ready, -1);\n        } else {\n          n = r;\n        }\n        if (n !== existing) {\n          n.dataset.id = col.id;\n          n.classList.add(CSS_CLASS_TH, this.style.cssClasses.th, cssClass(`th-${this.tableId}`));\n        }\n        fragment.appendChild(n);\n      });\n      this.header.appendChild(fragment);\n    }\n\n    const { first, last, firstRowPos } = range(\n      left,\n      width,\n      context.column.defaultRowHeight,\n      context.column.exceptions,\n      context.column.numberOfRows\n    );\n\n    this.visibleColumns.first = first;\n    this.visibleColumns.forcedFirst = first;\n    this.visibleColumns.last = last;\n    this.visibleColumns.forcedLast = last;\n\n    if (context.columns.some((c) => c.frozen)) {\n      const { target } = updateFrozen([], context.columns, first);\n      this.visibleColumns.frozen = target;\n    } else {\n      this.visibleColumns.frozen = [];\n    }\n    this.updateColumnOffset(firstRowPos);\n  }\n\n  clearPool(): void {\n    this.cellPool.forEach((p) => p.splice(0, p.length));\n  }\n\n  protected updateColumnOffset(firstColumnPos: number): void {\n    const changed = firstColumnPos !== this.visibleFirstColumnPos;\n    this.visibleFirstColumnPos = firstColumnPos;\n    if (changed) {\n      const { context } = this;\n      this.style.update(\n        context.defaultRowHeight - context.padding(-1),\n        context.columns,\n        context.column.padding,\n        0,\n        this.tableId\n      );\n    }\n  }\n\n  createRow(node: HTMLElement, rowIndex: number): void {\n    const { columns } = this.context;\n    const visible = this.visibleColumns;\n\n    if (visible.frozen.length > 0) {\n      for (const i of visible.frozen) {\n        const cell = this.selectCell(rowIndex, i, columns);\n        node.appendChild(cell);\n      }\n    }\n    for (let i = visible.first; i <= visible.last; i += 1) {\n      const cell = this.selectCell(rowIndex, i, columns);\n      node.appendChild(cell);\n    }\n  }\n\n  updateRow(node: HTMLElement, rowIndex: number): void {\n    const { columns } = this.context;\n    const visible = this.visibleColumns;\n\n    // columns may not match anymore if it is a pooled item a long time ago\n\n    switch (node.childElementCount) {\n      case 0:\n        if (visible.frozen.length > 0) {\n          this.insertFrozenCells(node, rowIndex, visible.frozen, 0, columns);\n        }\n        this.addCellAtEnd(node, rowIndex, visible.first, visible.last, columns);\n        break;\n      case 1: {\n        const old = node.firstElementChild as HTMLElement;\n        const id = old.dataset.id ?? '';\n        const columnIndex = columns.findIndex((c) => c.id === id);\n        node.removeChild(old);\n        if (columnIndex >= 0) {\n          this.recycleCell(old, columnIndex);\n        }\n\n        if (visible.frozen.length > 0) {\n          this.insertFrozenCells(node, rowIndex, visible.frozen, 0, columns);\n        }\n        this.addCellAtEnd(node, rowIndex, visible.first, visible.last, columns);\n        break;\n      }\n      default:\n        this.mergeColumns(node, rowIndex);\n        break;\n    }\n  }\n\n  private mergeColumns(node: HTMLElement, rowIndex: number) {\n    const { columns } = this.context;\n    const visible = this.visibleColumns;\n    const ids = new Map<string, HTMLElement>();\n\n    while (node.lastChild) {\n      const c = node.lastChild as HTMLElement;\n      node.removeChild(c);\n      ids.set(c.dataset.id, c);\n    }\n\n    const updateImpl = (i: number) => {\n      const col = columns[i];\n      const existing = ids.get(col.id);\n      if (!existing) {\n        const cell = this.selectCell(rowIndex, i, columns);\n        node.appendChild(cell);\n        return;\n      }\n      ids.delete(col.id);\n      const r = this.updateCell(existing, rowIndex, col) || existing;\n      let cell: HTMLElement;\n      if (isAsyncUpdate(r)) {\n        cell = this.handleCellReady(r.item, r.ready, i);\n      } else {\n        cell = r;\n      }\n      if (cell && cell !== existing) {\n        cell.dataset.id = col.id;\n        cell.classList.add(CSS_CLASS_TD, this.style.cssClasses.td, cssClass(`td-${this.tableId}`));\n      }\n      this.updateShiftedState(cell, col);\n      node.appendChild(cell);\n    };\n\n    for (const frozen of visible.frozen) {\n      updateImpl(frozen);\n    }\n    for (let i = visible.first; i <= visible.last; i += 1) {\n      updateImpl(i);\n    }\n\n    if (ids.size === 0) {\n      return;\n    }\n\n    // recycle\n    const byId = new Map(columns.map((d, i) => [d.id, i]));\n    ids.forEach((idNode, key) => {\n      const index = byId.get(key);\n      if (index != null && index >= 0) {\n        this.recycleCell(idNode, index);\n      }\n    });\n  }\n\n  private updateShiftedStates() {\n    if (!this.context.columns.some((d) => d.frozen)) {\n      return;\n    }\n    const shifted = this.horizontallyShifted;\n    const clazz = CSS_CLASS_SHIFTED;\n    if (shifted) {\n      const headers = Array.from(this.header.querySelectorAll(`.${CSS_CLASS_FROZEN}:not(.${clazz})`));\n      const bodies = Array.from(this.body.querySelectorAll(`.${CSS_CLASS_FROZEN}:not(.${clazz})`));\n      for (const item of headers) {\n        item.classList.add(clazz);\n      }\n      for (const item of bodies) {\n        item.classList.add(clazz);\n      }\n    } else {\n      const headers = Array.from(this.header.querySelectorAll(`.${CSS_CLASS_FROZEN}.${clazz}`));\n      const bodies = Array.from(this.body.querySelectorAll(`.${CSS_CLASS_FROZEN}.${clazz}`));\n      for (const item of headers) {\n        item.classList.remove(clazz);\n      }\n      for (const item of bodies) {\n        item.classList.remove(clazz);\n      }\n    }\n  }\n\n  private syncFrozen(first: number) {\n    const { columns } = this.context;\n    const visible = this.visibleColumns;\n\n    if (!columns.some((d) => d.frozen)) {\n      return 0;\n    }\n    if (first === 0) {\n      if (visible.frozen.length > 0) {\n        this.removeFrozenColumns(visible.frozen, 0);\n        visible.frozen = [];\n      }\n      return 0;\n    }\n    const old = visible.frozen.length;\n    const { target, added, removed } = updateFrozen(visible.frozen, columns, first);\n    if (removed.length > 0) {\n      this.removeFrozenColumns(removed, old - removed.length);\n    }\n    if (added.length > 0) {\n      this.insertFrozenColumns(added, old - removed.length);\n    }\n    visible.frozen = target;\n    return target.length;\n  }\n\n  private onScrolledHorizontallyImpl(scrollLeft: number, clientWidth: number): EScrollResult {\n    const shiftingChanged = this.horizontallyShifted !== scrollLeft > 0;\n    this.horizontallyShifted = scrollLeft > 0;\n\n    const { column } = this.context;\n    const { first, last, firstRowPos } = range(\n      scrollLeft,\n      clientWidth,\n      column.defaultRowHeight,\n      column.exceptions,\n      column.numberOfRows\n    );\n\n    const visible = this.visibleColumns;\n    visible.forcedFirst = first;\n    visible.forcedLast = last;\n\n    if (first - visible.first >= 0 && last - visible.last <= 0) {\n      // nothing to do\n      if (shiftingChanged) {\n        this.updateShiftedStates();\n      }\n      return EScrollResult.NONE;\n    }\n\n    let r: EScrollResult = EScrollResult.SOME;\n\n    const frozenShift = this.syncFrozen(first);\n\n    if (first > visible.last || last < visible.first) {\n      // no overlap, clean and draw everything\n      // console.log(\n      //   `ff added: ${last - first + 1} removed: ${visible.last - visible.first + 1} ${first}:${last} ${frozenShift}`\n      // );\n      // removeRows(visibleFirst, visibleLast);\n      this.removeAllColumns(false);\n      // this.updateShiftedStates();\n      this.addColumnAtEnd(first, last);\n      r = EScrollResult.ALL;\n    } else if (first < visible.first) {\n      // some first rows missing and some last rows to much\n      // console.log(\n      //   `up added: ${visible.first - first + 1} removed: ${visible.last - last + 1} ${first}:${last} ${frozenShift}`\n      // );\n      this.removeColumnFromEnd(last + 1, visible.last);\n      this.updateShiftedStates();\n      this.addColumnAtStart(first, visible.first - 1, frozenShift);\n      r = EScrollResult.SOME_TOP;\n    } else {\n      // console.log(\n      //   `do added: ${last - visible.last + 1} removed: ${first - visible.first + 1} ${first}:${last} ${frozenShift}`\n      // );\n      // some last rows missing and some first rows to much\n      this.removeColumnFromStart(visible.first, first - 1, frozenShift);\n      this.updateShiftedStates();\n      this.addColumnAtEnd(visible.last + 1, last);\n      r = EScrollResult.SOME_BOTTOM;\n    }\n\n    visible.first = first;\n    visible.last = last;\n\n    this.updateColumnOffset(firstRowPos);\n\n    return r;\n  }\n}\n\n/**\n * @internal\n */\nexport default ACellAdapter;\n\n// function verifyRow(row: HTMLElement, index: number, columns: IColumn[]) {\n//   const cols = Array.from(row.children) as HTMLElement[];\n//   // sort incrementally\n//   if (cols.length <= 1) {\n//     return;\n//   }\n//   const colObjs = cols.map((c) => columns.find((d) => d.id === c.dataset.id));\n//   console.assert(\n//     colObjs.every((d) => Boolean(d)),\n//     'all columns must exist',\n//     index\n//   );\n//   console.assert(\n//     colObjs.every((d, i) => i === 0 || d.index >= colObjs[i - 1]!.index),\n//     'all columns in ascending order',\n//     index\n//   );\n//   console.assert(new Set(colObjs).size === colObjs.length, 'unique columns', colObjs);\n// }\n","/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { IAbortAblePromise, IAsyncUpdate } from './abortAble';\nimport { IAnimationContext } from './animation';\nimport { ARowRenderer, IRowRendererOptions, setTransform } from './ARowRenderer';\nimport { addScroll } from './internal';\nimport { EScrollResult, IMixinClass } from './mixin';\nimport { GridStyleManager, IColumn, setTemplate } from './style';\nimport { cssClass } from './styles';\nimport { ACellAdapter, ICellAdapterRenderContext, IVisibleColumns } from './table/internal/ACellAdapter';\n\nexport declare type ICellRenderContext<T extends IColumn> = ICellAdapterRenderContext<T>;\n\n/**\n * a @see ARowRenderer which manages multiple columns per row\n */\nexport abstract class ACellRenderer<T extends IColumn> extends ARowRenderer {\n  protected readonly style: GridStyleManager;\n\n  private readonly cell: ACellAdapter<T>;\n\n  constructor(protected readonly root: HTMLElement, htmlId: string, options: Partial<IRowRendererOptions> = {}) {\n    super(setTemplate(root, htmlId).querySelector<HTMLElement>('main > article'), options);\n    root.classList.add(cssClass(), 'lineup-engine');\n\n    this.style = new GridStyleManager(this.root, htmlId);\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n\n    class LocalCell extends ACellAdapter<T> {\n      protected get context(): ICellAdapterRenderContext<T> {\n        return that.context;\n      }\n\n      protected get body() {\n        return that.body;\n      }\n\n      protected get lastScrollInfo() {\n        return that.lastScrollInfo;\n      }\n\n      protected createHeader(document: Document, column: T) {\n        return that.createHeader(document, column);\n      }\n\n      protected updateHeader(node: HTMLElement, column: T) {\n        return that.updateHeader(node, column);\n      }\n\n      protected createCell(document: Document, index: number, column: T) {\n        return that.createCell(document, index, column);\n      }\n\n      protected updateCell(node: HTMLElement, index: number, column: T) {\n        return that.updateCell(node, index, column);\n      }\n\n      protected updateColumnOffset(firstColumnPos: number) {\n        super.updateColumnOffset(firstColumnPos);\n        that.updateOffset(that.visibleFirstRowPos);\n      }\n\n      protected forEachRow(callback: (row: HTMLElement, rowIndex: number) => void) {\n        return that.forEachRow(callback);\n      }\n    }\n\n    this.cell = new LocalCell(this.header, this.style, this.style.id, options.mixins || []);\n  }\n\n  protected get idPrefix(): string {\n    return this.style.id;\n  }\n\n  /**\n   * get the header root element\n   */\n  protected get header(): HTMLElement {\n    return this.root.querySelector<HTMLElement>('header > article');\n  }\n\n  /**\n   * get the header scrolling element, i.e its parent\n   */\n  protected get headerScroller(): HTMLElement {\n    return this.root.getElementsByTagName('header')[0] as HTMLElement;\n  }\n\n  protected get visibleColumns(): IVisibleColumns {\n    return this.cell.visibleColumns;\n  }\n\n  protected get visibleFirstColumnPos(): number {\n    return this.cell.visibleFirstColumnPos;\n  }\n\n  /**\n   * add another column mixin\n   * @param {IMixinClass} mixinClass mixing class to instantiate\n   * @param options optional options\n   */\n  protected addColumnMixin(mixinClass: IMixinClass, options?: unknown): void {\n    this.cell.addColumnMixin(mixinClass, options);\n  }\n\n  /**\n   * initialized this renderer\n   */\n  protected init(): void {\n    this.cell.init();\n\n    const scroller = this.body.parentElement as HTMLElement;\n\n    let old = addScroll(scroller, this.options.async, (act) => {\n      if (\n        Math.abs(old.left - act.left) < this.options.minScrollDelta &&\n        Math.abs(old.width - act.width) < this.options.minScrollDelta\n      ) {\n        return;\n      }\n      const isGoingRight = act.left > old.left;\n      old = act;\n      this.onScrolledHorizontally(act.left, act.width, isGoingRight);\n    });\n\n    super.init();\n  }\n\n  destroy(): void {\n    super.destroy();\n    this.root.remove();\n  }\n\n  /**\n   * will be called when scrolled horizontally\n   * @param {number} scrollLeft\n   * @param {number} clientWidth\n   * @param {boolean} isGoingRight\n   * @returns {EScrollResult}\n   */\n  protected onScrolledHorizontally(scrollLeft: number, clientWidth: number, isGoingRight: boolean): EScrollResult {\n    return this.cell.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);\n  }\n\n  /**\n   * the current render context, upon change `recreate` the whole table\n   * @returns {ICellRenderContext}\n   */\n  protected abstract get context(): ICellRenderContext<T>;\n\n  /**\n   * create a new header node for the given column\n   * @param {Document} document document to create nodes of\n   * @param {T} column the column to create the header for\n   * @returns {HTMLElement} the node representing the header\n   */\n  protected abstract createHeader(document: Document, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  /**\n   * updates the given header node with the given column\n   * @param {HTMLElement} node node to update\n   * @param {T} column the column to represents\n   * @returns {HTMLElement | void} an optional new replacement node for the header\n   */\n  protected abstract updateHeader(node: HTMLElement, column: T): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  /**\n   * create a new cell node fo the given row index and column\n   * @param {Document} document document the create nodes of\n   * @param {number} index the current row index\n   * @param {T} column the current column\n   * @returns {HTMLElement} the node representing the cell\n   */\n  protected abstract createCell(document: Document, index: number, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  /**\n   * updates the given cell node with the given row index and column\n   * @param {HTMLElement} node node to update\n   * @param {number} index row index to use\n   * @param {T} column column to use\n   * @returns {HTMLElement | void} an optional new replacement node for the header\n   */\n  protected abstract updateCell(\n    node: HTMLElement,\n    index: number,\n    column: T\n  ): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  /**\n   * trigger to update all headers\n   */\n  protected updateHeaders(): void {\n    this.cell.updateHeaders();\n  }\n\n  protected handleCellReady(item: HTMLElement, ready: IAbortAblePromise<void>, column = -1): HTMLElement {\n    return this.cell.handleCellReady(item, ready, column);\n  }\n\n  protected recycleCell(item: HTMLElement, column = -1): void {\n    this.cell.recycleCell(item, column);\n  }\n\n  /**\n   * triggers to update all column widths\n   */\n  protected updateColumnWidths(): void {\n    const { context } = this;\n    this.style.update(\n      context.defaultRowHeight - context.padding(-1),\n      context.columns,\n      context.column.padding,\n      0,\n      this.idPrefix\n    );\n  }\n\n  protected updateSizer(firstRowPos: number): void {\n    const ctx = this.context;\n    const { totalHeight } = ctx;\n    const totalWidth = ctx.column.totalHeight;\n\n    this.updateShifts(firstRowPos, this.cell.leftShift());\n    this.bodySizer.style.transform = `translate(${Math.max(0, totalWidth - 1).toFixed(0)}px, ${Math.max(\n      0,\n      totalHeight - 1\n    ).toFixed(0)}px)`;\n  }\n\n  protected updateShifts(top: number, _left: number): void {\n    setTransform(this.body, 0 /* left.toFixed(0) */, top.toFixed(0));\n  }\n\n  /**\n   * triggers to recreate the whole table\n   * @param {IAnimationContext} ctx optional animation context\n   */\n  protected recreate(ctx?: IAnimationContext): void {\n    const scroller = this.bodyScroller;\n    const oldLeft = scroller.scrollLeft;\n    this.cell.recreate(oldLeft, scroller.clientWidth);\n\n    super.recreate(ctx);\n    // restore left\n    scroller.scrollLeft = oldLeft;\n  }\n\n  protected clearPool(): void {\n    super.clearPool();\n    this.cell.clearPool();\n  }\n\n  protected createRow(node: HTMLElement, rowIndex: number): void {\n    this.cell.createRow(node, rowIndex);\n  }\n\n  protected updateRow(node: HTMLElement, rowIndex: number): void {\n    this.cell.updateRow(node, rowIndex);\n  }\n}\n\nexport default ACellRenderer;\n","import { range } from '../logic';\nimport { EScrollResult, IMixin, IMixinAdapter } from './IMixin';\n\nexport interface IPrefetchRendererOptions {\n  /**\n   * number of rows to prefetch\n   * @default 20\n   */\n  readonly prefetchRows: number;\n  /**\n   * number of rows extra before cleaning them up\n   * @default 10\n   */\n  readonly cleanUpRows: number;\n  /**\n   * delay to trigger a prefetch or clean up\n   * @default 200ms\n   */\n  readonly delay: number;\n}\n\n/**\n * mixin that prefetches rows depending on the scrolling direction for faster rendering\n */\nexport default class PrefetchMixin implements IMixin {\n  private prefetchTimeout = -1;\n\n  private cleanupTimeout = -1;\n\n  private readonly options: IPrefetchRendererOptions = {\n    prefetchRows: 20,\n    cleanUpRows: 10,\n    delay: 200,\n  };\n\n  constructor(private readonly adapter: IMixinAdapter, options?: Partial<IPrefetchRendererOptions>) {\n    Object.assign(this.options, options);\n    return this;\n  }\n\n  private prefetchDown() {\n    this.prefetchTimeout = -1;\n    if (this.adapter.isScrollEventWaiting()) {\n      return;\n    }\n    const { context } = this.adapter;\n    const nextLast = Math.min(this.adapter.visible.forcedLast + this.options.prefetchRows, context.numberOfRows - 1);\n    // add some rows in advance\n    if (\n      this.adapter.visible.last === nextLast &&\n      this.adapter.visible.last >= this.adapter.visible.forcedLast + this.options.prefetchRows\n    ) {\n      return;\n    }\n\n    this.adapter.addAtBottom(this.adapter.visible.last + 1, nextLast);\n    // console.log('prefetch', visibleFirst, visibleLast + 1, '=>', nextLast, ranking.children.length);\n    this.adapter.visible.last = nextLast;\n  }\n\n  private prefetchUp() {\n    this.prefetchTimeout = -1;\n    if (\n      this.adapter.isScrollEventWaiting() ||\n      this.adapter.visible.first <= this.adapter.visible.forcedFirst - this.options.prefetchRows\n    ) {\n      return;\n    }\n    const { context } = this.adapter;\n    const fakeOffset = Math.max(this.adapter.scrollOffset - this.options.prefetchRows * context.defaultRowHeight, 0);\n    const height = this.adapter.scrollTotal;\n    const { first, firstRowPos } = range(\n      fakeOffset,\n      height,\n      context.defaultRowHeight,\n      context.exceptions,\n      context.numberOfRows\n    );\n\n    if (first === this.adapter.visible.first) {\n      return;\n    }\n\n    const frozenShift = this.adapter.syncFrozen ? this.adapter.syncFrozen(first) : 0;\n\n    this.adapter.addAtBeginning(first, this.adapter.visible.first - 1, frozenShift);\n    // console.log('prefetch up ', visibleFirst, '=>', first, visibleLast, ranking.children.length);\n    this.adapter.visible.first = first;\n\n    this.adapter.updateOffset(firstRowPos);\n  }\n\n  private triggerPrefetch(isGoingDown: boolean) {\n    if (this.prefetchTimeout >= 0) {\n      clearTimeout(this.prefetchTimeout);\n    }\n\n    const prefetchDownPossible =\n      this.adapter.visible.last < this.adapter.visible.forcedLast + this.options.prefetchRows;\n    const prefetchUpPossible =\n      this.adapter.visible.first > this.adapter.visible.forcedFirst - this.options.prefetchRows;\n\n    const isLast = this.adapter.visible.last === this.adapter.context.numberOfRows;\n    const isFirst = this.adapter.visible.first === 0;\n\n    if ((isGoingDown && !prefetchDownPossible && !isLast) || (!isGoingDown && !prefetchUpPossible && !isFirst)) {\n      return;\n    }\n\n    // go down if we are already at the top, too\n    const op = isGoingDown || isFirst ? this.prefetchDown.bind(this) : this.prefetchUp.bind(this);\n\n    // eslint-disable-next-line no-restricted-globals\n    this.prefetchTimeout = self.setTimeout(op, this.options.delay);\n  }\n\n  private cleanUpTop(first: number) {\n    this.cleanupTimeout = -1;\n    if (this.adapter.isScrollEventWaiting()) {\n      return;\n    }\n    const newFirst = Math.max(0, first - this.options.cleanUpRows);\n\n    if (newFirst <= this.adapter.visible.first) {\n      return;\n    }\n\n    // console.log('cleanup top');\n    const frozenShift = this.adapter.syncFrozen ? this.adapter.syncFrozen(newFirst) : 0;\n\n    this.adapter.removeFromBeginning(this.adapter.visible.first, newFirst - 1, frozenShift);\n    const { context } = this.adapter;\n    // console.log('cleanup up ', visibleFirst, '=>', newFirst, visibleLast, ranking.children.length);\n    let shift = (newFirst - this.adapter.visible.first) * context.defaultRowHeight;\n    if (context.exceptions.length > 0) {\n      for (let i = this.adapter.visible.first; i < newFirst; i += 1) {\n        const ex = context.exceptionsLookup.get(i);\n        if (ex != null) {\n          shift += ex - context.defaultRowHeight;\n        }\n      }\n    }\n    this.adapter.visible.first = newFirst;\n    this.adapter.updateOffset(this.adapter.visibleFirstRowPos + shift);\n\n    this.prefetchDown();\n  }\n\n  private cleanUpBottom(last: number) {\n    this.cleanupTimeout = -1;\n    const newLast = last + this.options.cleanUpRows;\n    if (this.adapter.visible.last <= newLast) {\n      return;\n    }\n    // console.log('cleanup bottom');\n    this.adapter.removeFromBottom(newLast + 1, this.adapter.visible.last);\n    this.adapter.visible.last = newLast;\n\n    this.prefetchUp();\n  }\n\n  private triggerCleanUp(first: number, last: number, isGoingDown: boolean) {\n    if (this.cleanupTimeout >= 0) {\n      clearTimeout(this.cleanupTimeout);\n    }\n    if (\n      (isGoingDown && first - this.options.cleanUpRows <= this.adapter.visible.first) ||\n      (!isGoingDown && this.adapter.visible.last <= last + this.options.cleanUpRows)\n    ) {\n      return;\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    this.cleanupTimeout = self.setTimeout(\n      isGoingDown ? this.cleanUpTop.bind(this) : this.cleanUpBottom.bind(this),\n      this.options.delay,\n      isGoingDown ? first : last\n    );\n  }\n\n  onScrolled(isGoingDown: boolean, scrollResult: EScrollResult): void {\n    if (this.adapter.isScrollEventWaiting()) {\n      return;\n    }\n    if (scrollResult !== EScrollResult.ALL && this.options.cleanUpRows > 0) {\n      this.triggerCleanUp(this.adapter.visible.forcedFirst, this.adapter.visible.forcedLast, isGoingDown);\n    }\n    if (scrollResult !== EScrollResult.NONE && this.options.prefetchRows > 0) {\n      this.triggerPrefetch(isGoingDown);\n    }\n  }\n}\n","/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { IAbortAblePromise, IAsyncUpdate } from '../abortAble';\nimport { IAnimationContext } from '../animation';\nimport { ARowRenderer, IRowRendererOptions, setTransform } from '../ARowRenderer';\nimport { EScrollResult, IMixinClass } from '../mixin';\nimport { IColumn } from '../style';\nimport GridStyleManager from '../style/GridStyleManager';\nimport { CSS_CLASS_HIDDEN, CSS_CLASS_LOADING } from '../styles';\nimport { ACellAdapter, ICellAdapterRenderContext, IVisibleColumns } from './internal/ACellAdapter';\nimport { ITableSection } from './MultiTableRowRenderer';\n\nexport declare type ITableCellRenderContext<T extends IColumn> = ICellAdapterRenderContext<T>;\n\n/**\n * base class for a cell renderer as table section\n */\nexport abstract class ACellTableSection<T extends IColumn> extends ARowRenderer implements ITableSection {\n  private readonly cell: ACellAdapter<T>;\n\n  constructor(\n    public readonly header: HTMLElement,\n    public readonly body: HTMLElement,\n    protected readonly tableId: string,\n    protected readonly style: GridStyleManager,\n    options: Partial<IRowRendererOptions> = {}\n  ) {\n    super(body, options);\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n\n    class LocalCell extends ACellAdapter<T> {\n      protected get context(): ICellAdapterRenderContext<T> {\n        return that.context;\n      }\n\n      protected get body() {\n        return that.body;\n      }\n\n      protected get lastScrollInfo() {\n        return that.lastScrollInfo;\n      }\n\n      protected createHeader(document: Document, column: T) {\n        return that.createHeader(document, column);\n      }\n\n      protected updateHeader(node: HTMLElement, column: T) {\n        return that.updateHeader(node, column);\n      }\n\n      protected createCell(document: Document, index: number, column: T) {\n        return that.createCell(document, index, column);\n      }\n\n      protected updateColumnOffset(firstColumnPos: number) {\n        super.updateColumnOffset(firstColumnPos);\n        that.updateOffset(that.visibleFirstRowPos);\n      }\n\n      protected updateCell(node: HTMLElement, index: number, column: T) {\n        return that.updateCell(node, index, column);\n      }\n\n      protected forEachRow(callback: (row: HTMLElement, rowIndex: number) => void) {\n        return that.forEachRow(callback);\n      }\n    }\n\n    this.cell = new LocalCell(this.header, this.style, tableId, options.mixins || []);\n  }\n\n  protected addColumnMixin(mixinClass: IMixinClass, options?: unknown): void {\n    this.cell.addColumnMixin(mixinClass, options);\n  }\n\n  protected get idPrefix(): string {\n    return this.tableId;\n  }\n\n  abstract get id(): string;\n\n  get width(): number {\n    return this.context.column.totalHeight;\n  }\n\n  protected get visibleColumns(): IVisibleColumns {\n    return this.cell.visibleColumns;\n  }\n\n  protected get visibleFirstColumnPos(): number {\n    return this.cell.visibleFirstColumnPos;\n  }\n\n  get height(): number {\n    return this.context.totalHeight;\n  }\n\n  get hidden(): boolean {\n    return this.header.classList.contains(CSS_CLASS_LOADING);\n  }\n\n  set hidden(value: boolean) {\n    const old = this.hidden;\n    if (old === value) {\n      return;\n    }\n    this.header.classList.toggle(CSS_CLASS_LOADING, value);\n    this.body.classList.toggle(CSS_CLASS_LOADING, value);\n    this.header.classList.toggle(CSS_CLASS_HIDDEN, value);\n    this.body.classList.toggle(CSS_CLASS_HIDDEN, value);\n    this.onVisibilityChanged(!value);\n  }\n\n  protected updateSizer(firstRowPos: number): void {\n    this.updateShifts(firstRowPos, this.cell.leftShift());\n    // no sizer update since centrally managed\n  }\n\n  protected updateShifts(top: number, _left: number): void {\n    setTransform(this.body, 0 /* left.toFixed(0) */, top.toFixed(0));\n  }\n\n  /**\n   * hook when the visibility changes\n   * @param {boolean} _visible current visibility\n   */\n  protected onVisibilityChanged(_visible: boolean): void {\n    // hook\n  }\n\n  hide(): void {\n    this.hidden = true;\n  }\n\n  show(scrollLeft: number, clientWidth: number, isGoingRight: boolean): void {\n    const wasHidden = this.hidden;\n    this.hidden = false;\n    if (wasHidden) {\n      // full update\n      this.revalidate();\n    } else {\n      this.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);\n    }\n  }\n\n  init(): void {\n    this.hide(); // hide by default\n    this.cell.init();\n    super.init();\n  }\n\n  destroy(): void {\n    super.destroy();\n    this.header.remove();\n    this.style.remove(this.tableId);\n  }\n\n  protected onScrolledVertically(scrollTop: number, clientHeight: number, isGoingDown: boolean): EScrollResult {\n    if (this.hidden) {\n      return EScrollResult.NONE;\n    }\n    return super.onScrolledVertically(scrollTop, clientHeight, isGoingDown);\n  }\n\n  protected onScrolledHorizontally(scrollLeft: number, clientWidth: number, isGoingRight: boolean): EScrollResult {\n    const r = this.cell.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);\n    this.updateSizer(this.visibleFirstRowPos);\n    return r;\n  }\n\n  /**\n   * the current render context, upon change `recreate` the whole table\n   * @returns {ITableCellRenderContext}\n   */\n  protected abstract get context(): ITableCellRenderContext<T>;\n\n  /**\n   * create a new header node for the given column\n   * @param {Document} document document to create nodes of\n   * @param {T} column the column to create the header for\n   * @returns {HTMLElement} the node representing the header\n   */\n  protected abstract createHeader(document: Document, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  /**\n   * updates the given header node with the given column\n   * @param {HTMLElement} node node to update\n   * @param {T} column the column to represents\n   * @returns {HTMLElement | void} an optional new replacement node for the header\n   */\n  protected abstract updateHeader(node: HTMLElement, column: T): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  /**\n   * create a new cell node fo the given row index and column\n   * @param {Document} document document the create nodes of\n   * @param {number} index the current row index\n   * @param {T} column the current column\n   * @returns {HTMLElement} the node representing the cell\n   */\n  protected abstract createCell(document: Document, index: number, column: T): HTMLElement | IAsyncUpdate<HTMLElement>;\n\n  /**\n   * updates the given cell node with the given row index and column\n   * @param {HTMLElement} node node to update\n   * @param {number} index row index to use\n   * @param {T} column column to use\n   * @returns {HTMLElement | void} an optional new replacement node for the header\n   */\n  protected abstract updateCell(\n    node: HTMLElement,\n    index: number,\n    column: T\n  ): HTMLElement | IAsyncUpdate<HTMLElement> | void;\n\n  /**\n   * triggers updating the header\n   */\n  protected updateHeaders(): void {\n    this.cell.updateHeaders();\n  }\n\n  protected handleCellReady(item: HTMLElement, ready: IAbortAblePromise<void>, column = -1): HTMLElement {\n    return this.cell.handleCellReady(item, ready, column);\n  }\n\n  protected recycleCell(item: HTMLElement, column = -1): void {\n    this.cell.recycleCell(item, column);\n  }\n\n  /**\n   * trigger an update all all column widths\n   */\n  protected updateColumnWidths(): void {\n    const { context } = this;\n    this.style.update(\n      context.defaultRowHeight - context.padding(-1),\n      context.columns,\n      context.column.padding,\n      0,\n      this.tableId\n    );\n  }\n\n  protected recreate(ctx?: IAnimationContext): void {\n    const scroller = this.bodyScroller;\n    const oldLeft = scroller.scrollLeft;\n    this.cell.recreate(oldLeft, scroller.clientWidth);\n\n    super.recreate(ctx);\n    // restore left\n    scroller.scrollLeft = oldLeft;\n  }\n\n  protected clearPool(): void {\n    super.clearPool();\n    this.cell.clearPool();\n  }\n\n  protected createRow(node: HTMLElement, rowIndex: number): void {\n    this.cell.createRow(node, rowIndex);\n    node.classList.add(this.style.cssClasses.tr);\n  }\n\n  protected updateRow(node: HTMLElement, rowIndex: number): void {\n    this.cell.updateRow(node, rowIndex);\n  }\n}\n\nexport default ACellTableSection;\n","import { setTransform } from '../ARowRenderer';\nimport { addScroll, defaultMode, IDelayedMode } from '../internal';\nimport { GridStyleManager, tableCSSClasses, tableIds } from '../style';\nimport {\n  cssClass,\n  CSS_CLASS_BODY,\n  CSS_CLASS_FOOTER,\n  CSS_CLASS_HEADER,\n  CSS_CLASS_MULTI,\n  CSS_CLASS_TBODY,\n  CSS_CLASS_THEAD,\n} from '../styles';\n\n/**\n * basic interface of a table section\n */\nexport interface ITableSection {\n  readonly id: string;\n  readonly width: number;\n  readonly height: number;\n  readonly header: HTMLElement;\n  readonly body: HTMLElement;\n\n  init(): void;\n\n  /**\n   * show the section\n   * @param {number} left visible left margin\n   * @param {number} width visible width\n   * @param {boolean} isGoingRight whether it was a shift to the right\n   */\n  show(left: number, width: number, isGoingRight: boolean): void;\n\n  hide(): void;\n\n  destroy(): void;\n}\n\nexport interface ITableFactory<T extends ITableSection> {\n  (header: HTMLElement, body: HTMLElement, tableId: string, style: GridStyleManager, ...extras: unknown[]): T;\n}\n\nexport interface ISeparatorFactory<T extends ITableSection> {\n  (header: HTMLElement, body: HTMLElement, style: GridStyleManager, ...extras: unknown[]): T;\n}\n\nexport interface IMultiTableRowRendererOptions {\n  /**\n   * column padding to use between columns\n   * @default 0\n   */\n  columnPadding: number;\n  /**\n   * async update on scrolling\n   * animation -> use requestAnimationFrame\n   * sync -> execute within scroll listener\n   * {number} -> execute within this delay using setTimeout\n   * @default is chrome ? animation else 0\n   */\n  async: IDelayedMode;\n\n  /**\n   * minimal number of pixel the scrollbars has to move\n   * @default 30\n   */\n  minScrollDelta: number;\n}\n\n/**\n * manager of multiple columns separated by separators each an own row renderer\n */\nexport default class MultiTableRowRenderer {\n  readonly style: GridStyleManager;\n\n  private tableId = 0;\n\n  private readonly sections: ITableSection[] = [];\n\n  private readonly options: Readonly<IMultiTableRowRendererOptions> = {\n    columnPadding: 0,\n    async: defaultMode,\n    minScrollDelta: 30,\n  };\n\n  constructor(public readonly node: HTMLElement, htmlId: string, options: Partial<IMultiTableRowRendererOptions> = {}) {\n    Object.assign(this.options, options);\n    const cleanHTMLId = htmlId.startsWith('#') ? htmlId.slice(1) : htmlId;\n    // eslint-disable-next-line no-param-reassign\n    node.id = cleanHTMLId;\n    // eslint-disable-next-line no-param-reassign\n    node.innerHTML = `<header id=\"header-${cleanHTMLId}\" class=\"${CSS_CLASS_HEADER} ${cssClass(\n      `header-${cleanHTMLId}`\n    )}\">\n      <footer class=\"${CSS_CLASS_FOOTER} ${cssClass(`footer-${cleanHTMLId}`)}\">&nbsp;</footer>\n    </header>\n    <main id=\"body-${cleanHTMLId}\" class=\"${CSS_CLASS_BODY} ${cssClass(`body-${cleanHTMLId}`)}\">\n      <footer class=\"${CSS_CLASS_FOOTER}\">&nbsp;</footer>\n    </main>`;\n    node.classList.add(cssClass(), CSS_CLASS_MULTI, 'lineup-engine');\n\n    this.style = new GridStyleManager(this.node, cleanHTMLId);\n\n    let old = addScroll(this.main, this.options.async, (act) => {\n      if (\n        Math.abs(old.left - act.left) < this.options.minScrollDelta &&\n        Math.abs(old.width - act.width) < this.options.minScrollDelta\n      ) {\n        return;\n      }\n      const isGoingRight = act.left > old.left;\n      old = act;\n      this.onScrolledHorizontally(act.left, act.width, isGoingRight);\n    });\n  }\n\n  private update() {\n    this.onScrolledHorizontally(this.main.scrollLeft, this.main.clientWidth, false);\n\n    let offset = 0;\n    this.sections.forEach((s) => {\n      // eslint-disable-next-line no-param-reassign\n      s.body.style.left = `${offset}px`;\n      // eslint-disable-next-line no-param-reassign\n      s.header.style.left = `${offset}px`;\n      offset += s.width + this.options.columnPadding;\n    });\n  }\n\n  private onScrolledHorizontally(scrollLeft: number, clientWidth: number, isGoingRight: boolean) {\n    let offset = 0;\n    const scrollEnd = scrollLeft + clientWidth;\n    this.sections.forEach((s) => {\n      const end = offset + s.width;\n      if (end < scrollLeft || offset > scrollEnd) {\n        s.hide();\n      } else {\n        s.show(Math.max(0, scrollLeft - offset), Math.min(scrollEnd - offset, s.width), isGoingRight);\n      }\n\n      offset = end + this.options.columnPadding;\n    });\n\n    this.updateOffset();\n  }\n\n  private updateOffset() {\n    const headerFooter = this.header.getElementsByTagName('footer')[0];\n    const bodyFooter = this.main.getElementsByTagName('footer')[0];\n\n    const maxHeight = this.sections.reduce((acc, d) => Math.max(acc, d.height), 0);\n    const total = this.sections.reduce((a, c) => a + c.width + this.options.columnPadding, 0);\n\n    setTransform(headerFooter, total, 0);\n    setTransform(bodyFooter, total, maxHeight);\n  }\n\n  destroy(): void {\n    this.sections.forEach((d) => d.destroy());\n    this.node.remove();\n  }\n\n  private get doc(): Document {\n    return this.node.ownerDocument;\n  }\n\n  private get header() {\n    return this.node.getElementsByTagName('header')[0] as HTMLElement;\n  }\n\n  private get main() {\n    return this.node.getElementsByTagName('main')[0] as HTMLElement;\n  }\n\n  /**\n   * push another table to this instance\n   * @param {ITableFactory<T extends ITableSection>} factory factory for the table\n   * @param extras additional arguments to provide for the factory\n   * @returns {T} the table instance\n   */\n  pushTable<T extends ITableSection>(factory: ITableFactory<T>, ...extras: unknown[]): T {\n    const header = this.doc.createElement('article');\n    const body = this.doc.createElement('article');\n\n    const tableId = `${this.node.id}T${this.tableId}`;\n    this.tableId += 1;\n    const ids = tableIds(tableId);\n    const cssClasses = tableCSSClasses(tableId);\n\n    header.id = ids.thead;\n    header.classList.add(CSS_CLASS_THEAD, cssClasses.thead);\n    body.id = ids.tbody;\n    body.classList.add(CSS_CLASS_TBODY, cssClasses.tbody);\n    this.header.insertBefore(header, this.header.lastElementChild); // before the footer\n    this.main.appendChild(body);\n\n    const table = factory.call(this, header, body, tableId, this.style, ...extras);\n    table.init();\n    this.sections.push(table);\n    this.update();\n    return table;\n  }\n\n  /**\n   * push another separator to the manager\n   * @param {ISeparatorFactory<T extends ITableSection>} factory the factory to create the separator\n   * @param extras optional additional arguments\n   * @returns {T} the new created separator\n   */\n  pushSeparator<T extends ITableSection>(factory: ISeparatorFactory<T>, ...extras: unknown[]): T {\n    const header = this.doc.createElement('section');\n    const body = this.doc.createElement('section');\n    header.classList.add(cssClass('header-separator'));\n    body.classList.add(cssClass('separator'));\n    this.header.insertBefore(header, this.header.lastElementChild); // before the footer\n    this.main.appendChild(body);\n\n    const separator = factory.call(this, header, body, this.style, ...extras);\n    separator.init();\n    this.sections.push(separator);\n    this.update();\n    return separator;\n  }\n\n  /**\n   * removes a given table section\n   * @param {ITableSection} section section to remove\n   * @returns {boolean} successful flag\n   */\n  remove(section: ITableSection): boolean {\n    const index = this.sections.indexOf(section);\n    if (index < 0) {\n      return false;\n    }\n    this.sections.splice(index, 1);\n    section.destroy();\n    this.update();\n    return true;\n  }\n\n  clear(): void {\n    this.sections.splice(0, this.sections.length).forEach((s) => s.destroy());\n    this.update();\n  }\n\n  /**\n   * triggers and update because of a change in width of one or more table sections\n   */\n  widthChanged(): void {\n    this.update();\n  }\n}\n","import './style.scss';\n\nexport * from '.';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle\ndeclare const __VERSION__: string;\n// eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle\ndeclare const __BUILD_ID__: string;\n\nexport const version = __VERSION__;\nexport const buildId = __BUILD_ID__;\n"],"sourceRoot":""}